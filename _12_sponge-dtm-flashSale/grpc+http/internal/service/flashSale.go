// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"errors"
	"strconv"
	"time"

	"github.com/dtm-labs/client/dtmcli"
	"github.com/dtm-labs/client/dtmcli/dtmimp"
	"github.com/dtm-labs/client/dtmgrpc"
	"github.com/go-redis/redis/v8"
	"google.golang.org/grpc"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/krand"
	"github.com/zhufuyi/sponge/pkg/logger"

	flashSaleV1 "flashSale/api/flashSale/v1"
	"flashSale/internal/ecode"
	"flashSale/internal/rpcclient"
	"flashSale/pkg/goredis"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		flashSaleV1.RegisterFlashSaleServer(server, NewFlashSaleServer())
	})
}

var _ flashSaleV1.FlashSaleServer = (*flashSale)(nil)

type flashSale struct {
	flashSaleV1.UnimplementedFlashSaleServer

	rdb *redis.Client
}

// NewFlashSaleServer create a server
func NewFlashSaleServer() flashSaleV1.FlashSaleServer {
	return &flashSale{
		rdb: goredis.GetRedisCli(),
	}
}

// SetProductStock 设置库存数量
func (s *flashSale) SetProductStock(ctx context.Context, req *flashSaleV1.SetProductStockRequest) (*flashSaleV1.SetProductStockReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	stockKey := getStockKey(req.ProductID)
	_, err = goredis.GetRedisCli().Set(context.Background(), stockKey, req.Stock, 24*time.Hour).Result()
	if err != nil {
		logger.Warn("SetProductStock err", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	return &flashSaleV1.SetProductStockReply{}, nil
}

// FlashSale 秒杀抢购
func (s *flashSale) FlashSale(ctx context.Context, req *flashSaleV1.FlashSaleRequest) (*flashSaleV1.FlashSaleReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	gid := newGid()
	redisQueryPreparedURL := rpcclient.GetFlashSaleEndpoint() + flashSaleV1.FlashSale_RedisQueryPrepared_FullMethodName
	submitOrderURL := rpcclient.GetFlashSaleEndpoint() + flashSaleV1.FlashSale_SendSubmitOrderNotify_FullMethodName
	submitOrderReq := &flashSaleV1.SendSubmitOrderNotifyRequest{
		UserID:       req.UserID,
		ProductID:    req.ProductID,
		ProductCount: 1,
		Amount:       req.Amount,
		CouponID:     0,
		OrderID:      gid,
		RequestID:    interceptor.ServerCtxRequestID(ctx),
	}
	headers := map[string]string{interceptor.ContextRequestIDKey: interceptor.ServerCtxRequestID(ctx)}

	// 创建二阶段消息事务，1.检查库存是充足， 2.扣减库存，创建订单通知
	msg := dtmgrpc.NewMsgGrpc(rpcclient.GetDtmEndpoint(), gid, dtmgrpc.WithBranchHeaders(headers))
	msg.Add(submitOrderURL, submitOrderReq)
	err = msg.DoAndSubmit(redisQueryPreparedURL, func(bb *dtmcli.BranchBarrier) error {
		return bb.RedisCheckAdjustAmount(s.rdb, getStockKey(req.ProductID), -1, 86400)
	})
	if err != nil {
		if errors.Is(err, dtmimp.ErrFailure) {
			return nil, ecode.StatusAborted.ToRPCErr("已售罄，欢迎下次再来抢购")
		}
		logger.Warn("DoAndSubmit error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}

	logger.Info("flashSale success", logger.String("gid", gid), logger.String("trans type", "msg"), interceptor.ServerCtxRequestIDField(ctx))

	return &flashSaleV1.FlashSaleReply{}, nil
}

// RedisQueryPrepared 反查redis数据
func (s *flashSale) RedisQueryPrepared(ctx context.Context, req *flashSaleV1.RedisQueryPreparedRequest) (*flashSaleV1.RedisQueryPreparedReply, error) {
	ctx = interceptor.WrapServerCtx(ctx)

	bb, err := dtmgrpc.BarrierFromGrpc(ctx)
	if err != nil {
		logger.Warn("BarrierFromQuery error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}
	err = bb.RedisQueryPrepared(s.rdb, 7*86400)
	if err != nil {
		logger.Warn("RedisQueryPrepared error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, err
	}

	return &flashSaleV1.RedisQueryPreparedReply{}, nil
}

// SendSubmitOrderNotify 发送提交订单通知
func (s *flashSale) SendSubmitOrderNotify(ctx context.Context, req *flashSaleV1.SendSubmitOrderNotifyRequest) (*flashSaleV1.SendSubmitOrderNotifyReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 在这里发送消息(例如rabbitmq、kafka)，通知订单创建，因为没有子事务屏障，消费端需要做幂等处理
	logger.Info("SendSubmitOrderNotify success", logger.String("topic", "flash-sale-order"), interceptor.CtxRequestIDField(ctx))

	return &flashSaleV1.SendSubmitOrderNotifyReply{}, nil
}

func newGid() string {
	// 年月日时分秒毫秒微妙+随机数, 长度为26，可以使用uuid、雪花算法等替换
	dt := time.Now().Format("20060102150405.000000")
	return dt[:14] + dt[15:] + krand.String(krand.R_NUM, 6)
}

func getStockKey(productID uint64) string {
	return "stock:product_id:" + strconv.FormatUint(productID, 10)
}
