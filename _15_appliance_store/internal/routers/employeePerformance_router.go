// Code generated by https://github.com/go-dev-frame/sponge

package routers

import (
	"github.com/gin-gonic/gin"

	"github.com/go-dev-frame/sponge/pkg/logger"
	//"github.com/go-dev-frame/sponge/pkg/middleware"

	storeV1 "store/api/store/v1"
	"store/internal/handler"
)

func init() {
	allMiddlewareFns = append(allMiddlewareFns, func(c *middlewareConfig) {
		employeePerformanceMiddlewares(c)
	})

	allRouteFns = append(allRouteFns,
		func(r *gin.Engine, groupPathMiddlewares map[string][]gin.HandlerFunc, singlePathMiddlewares map[string][]gin.HandlerFunc) {
			employeePerformanceRouter(r, groupPathMiddlewares, singlePathMiddlewares, handler.NewEmployeePerformanceHandler())
		})
}

func employeePerformanceRouter(
	r *gin.Engine,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iService storeV1.EmployeePerformanceLogicer) {
	storeV1.RegisterEmployeePerformanceRouter(
		r,
		groupPathMiddlewares,
		singlePathMiddlewares,
		iService,
		storeV1.WithEmployeePerformanceLogger(logger.Get()),
		storeV1.WithEmployeePerformanceHTTPResponse(),
		storeV1.WithEmployeePerformanceErrorToHTTPCode(
		// Set some error codes to standard http return codes,
		// by default there is already ecode.InternalServerError and ecode.ServiceUnavailable
		// example:
		// 	ecode.Forbidden, ecode.LimitExceed,
		),
	)
}

// you can set the middleware of a route group, or set the middleware of a single route,
// or you can mix them, pay attention to the duplication of middleware when mixing them,
// it is recommended to set the middleware of a single route in preference
func employeePerformanceMiddlewares(c *middlewareConfig) {
	// set up group route middleware, group path is left prefix rules,
	// if the left prefix is hit, the middleware will take effect, e.g. group route is /api/v1, route /api/v1/employeePerformance/:id  will take effect
	// c.setGroupPath("/api/v1/employeePerformance", middleware.Auth())

	// set up single route middleware, just uncomment the code and fill in the middlewares, nothing else needs to be changed
	//c.setSinglePath("POST", "/api/v1/employeePerformance", middleware.Auth())    // Create employeePerformance
	//c.setSinglePath("DELETE", "/api/v1/employeePerformance/:id", middleware.Auth())    // DeleteByID delete employeePerformance by id
	//c.setSinglePath("PUT", "/api/v1/employeePerformance/:id", middleware.Auth())    // UpdateByID update employeePerformance by id
	//c.setSinglePath("GET", "/api/v1/employeePerformance/:id", middleware.Auth())    // GetByID get employeePerformance by id
	//c.setSinglePath("POST", "/api/v1/employeePerformance/list", middleware.Auth())    // List of employeePerformance by query parameters
	//c.setSinglePath("POST", "/api/v1/employeePerformance/calculate-commission", middleware.Auth())    // CalculateSalesCommission 计算销售提成
}
