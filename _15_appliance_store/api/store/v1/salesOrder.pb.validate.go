// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/salesOrder.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSalesOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSalesOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSalesOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSalesOrderRequestMultiError, or nil if none found.
func (m *CreateSalesOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSalesOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreID

	// no validation rules for CustomerID

	// no validation rules for TotalAmount

	// no validation rules for Status

	// no validation rules for PaymentMethod

	if len(errors) > 0 {
		return CreateSalesOrderRequestMultiError(errors)
	}

	return nil
}

// CreateSalesOrderRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSalesOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSalesOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSalesOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSalesOrderRequestMultiError) AllErrors() []error { return m }

// CreateSalesOrderRequestValidationError is the validation error returned by
// CreateSalesOrderRequest.Validate if the designated constraints aren't met.
type CreateSalesOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSalesOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSalesOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSalesOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSalesOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSalesOrderRequestValidationError) ErrorName() string {
	return "CreateSalesOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSalesOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSalesOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSalesOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSalesOrderRequestValidationError{}

// Validate checks the field values on CreateSalesOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSalesOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSalesOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSalesOrderReplyMultiError, or nil if none found.
func (m *CreateSalesOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSalesOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSalesOrderReplyMultiError(errors)
	}

	return nil
}

// CreateSalesOrderReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSalesOrderReply.ValidateAll() if the designated
// constraints aren't met.
type CreateSalesOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSalesOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSalesOrderReplyMultiError) AllErrors() []error { return m }

// CreateSalesOrderReplyValidationError is the validation error returned by
// CreateSalesOrderReply.Validate if the designated constraints aren't met.
type CreateSalesOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSalesOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSalesOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSalesOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSalesOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSalesOrderReplyValidationError) ErrorName() string {
	return "CreateSalesOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSalesOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSalesOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSalesOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSalesOrderReplyValidationError{}

// Validate checks the field values on DeleteSalesOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSalesOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSalesOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSalesOrderByIDRequestMultiError, or nil if none found.
func (m *DeleteSalesOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSalesOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteSalesOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSalesOrderByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteSalesOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteSalesOrderByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteSalesOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSalesOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSalesOrderByIDRequestMultiError) AllErrors() []error { return m }

// DeleteSalesOrderByIDRequestValidationError is the validation error returned
// by DeleteSalesOrderByIDRequest.Validate if the designated constraints
// aren't met.
type DeleteSalesOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSalesOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSalesOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSalesOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSalesOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSalesOrderByIDRequestValidationError) ErrorName() string {
	return "DeleteSalesOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSalesOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSalesOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSalesOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSalesOrderByIDRequestValidationError{}

// Validate checks the field values on DeleteSalesOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSalesOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSalesOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSalesOrderByIDReplyMultiError, or nil if none found.
func (m *DeleteSalesOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSalesOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSalesOrderByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteSalesOrderByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSalesOrderByIDReply.ValidateAll() if the
// designated constraints aren't met.
type DeleteSalesOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSalesOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSalesOrderByIDReplyMultiError) AllErrors() []error { return m }

// DeleteSalesOrderByIDReplyValidationError is the validation error returned by
// DeleteSalesOrderByIDReply.Validate if the designated constraints aren't met.
type DeleteSalesOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSalesOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSalesOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSalesOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSalesOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSalesOrderByIDReplyValidationError) ErrorName() string {
	return "DeleteSalesOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSalesOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSalesOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSalesOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSalesOrderByIDReplyValidationError{}

// Validate checks the field values on UpdateSalesOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSalesOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSalesOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSalesOrderByIDRequestMultiError, or nil if none found.
func (m *UpdateSalesOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSalesOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateSalesOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StoreID

	// no validation rules for CustomerID

	// no validation rules for TotalAmount

	// no validation rules for Status

	// no validation rules for PaymentMethod

	if len(errors) > 0 {
		return UpdateSalesOrderByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateSalesOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSalesOrderByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSalesOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSalesOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSalesOrderByIDRequestMultiError) AllErrors() []error { return m }

// UpdateSalesOrderByIDRequestValidationError is the validation error returned
// by UpdateSalesOrderByIDRequest.Validate if the designated constraints
// aren't met.
type UpdateSalesOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSalesOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSalesOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSalesOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSalesOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSalesOrderByIDRequestValidationError) ErrorName() string {
	return "UpdateSalesOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSalesOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSalesOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSalesOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSalesOrderByIDRequestValidationError{}

// Validate checks the field values on UpdateSalesOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSalesOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSalesOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSalesOrderByIDReplyMultiError, or nil if none found.
func (m *UpdateSalesOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSalesOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSalesOrderByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateSalesOrderByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateSalesOrderByIDReply.ValidateAll() if the
// designated constraints aren't met.
type UpdateSalesOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSalesOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSalesOrderByIDReplyMultiError) AllErrors() []error { return m }

// UpdateSalesOrderByIDReplyValidationError is the validation error returned by
// UpdateSalesOrderByIDReply.Validate if the designated constraints aren't met.
type UpdateSalesOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSalesOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSalesOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSalesOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSalesOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSalesOrderByIDReplyValidationError) ErrorName() string {
	return "UpdateSalesOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSalesOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSalesOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSalesOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSalesOrderByIDReplyValidationError{}

// Validate checks the field values on SalesOrder with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SalesOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SalesOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SalesOrderMultiError, or
// nil if none found.
func (m *SalesOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *SalesOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StoreID

	// no validation rules for CustomerID

	// no validation rules for TotalAmount

	// no validation rules for Status

	// no validation rules for PaymentMethod

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SalesOrderMultiError(errors)
	}

	return nil
}

// SalesOrderMultiError is an error wrapping multiple validation errors
// returned by SalesOrder.ValidateAll() if the designated constraints aren't met.
type SalesOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SalesOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SalesOrderMultiError) AllErrors() []error { return m }

// SalesOrderValidationError is the validation error returned by
// SalesOrder.Validate if the designated constraints aren't met.
type SalesOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SalesOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SalesOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SalesOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SalesOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SalesOrderValidationError) ErrorName() string { return "SalesOrderValidationError" }

// Error satisfies the builtin error interface
func (e SalesOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSalesOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SalesOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SalesOrderValidationError{}

// Validate checks the field values on GetSalesOrderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSalesOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSalesOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSalesOrderByIDRequestMultiError, or nil if none found.
func (m *GetSalesOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSalesOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetSalesOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSalesOrderByIDRequestMultiError(errors)
	}

	return nil
}

// GetSalesOrderByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetSalesOrderByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSalesOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSalesOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSalesOrderByIDRequestMultiError) AllErrors() []error { return m }

// GetSalesOrderByIDRequestValidationError is the validation error returned by
// GetSalesOrderByIDRequest.Validate if the designated constraints aren't met.
type GetSalesOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSalesOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSalesOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSalesOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSalesOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSalesOrderByIDRequestValidationError) ErrorName() string {
	return "GetSalesOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSalesOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSalesOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSalesOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSalesOrderByIDRequestValidationError{}

// Validate checks the field values on GetSalesOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSalesOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSalesOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSalesOrderByIDReplyMultiError, or nil if none found.
func (m *GetSalesOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSalesOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSalesOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSalesOrderByIDReplyValidationError{
					field:  "SalesOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSalesOrderByIDReplyValidationError{
					field:  "SalesOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSalesOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSalesOrderByIDReplyValidationError{
				field:  "SalesOrder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSalesOrderByIDReplyMultiError(errors)
	}

	return nil
}

// GetSalesOrderByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetSalesOrderByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetSalesOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSalesOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSalesOrderByIDReplyMultiError) AllErrors() []error { return m }

// GetSalesOrderByIDReplyValidationError is the validation error returned by
// GetSalesOrderByIDReply.Validate if the designated constraints aren't met.
type GetSalesOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSalesOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSalesOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSalesOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSalesOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSalesOrderByIDReplyValidationError) ErrorName() string {
	return "GetSalesOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSalesOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSalesOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSalesOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSalesOrderByIDReplyValidationError{}

// Validate checks the field values on ListSalesOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSalesOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSalesOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSalesOrderRequestMultiError, or nil if none found.
func (m *ListSalesOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSalesOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSalesOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSalesOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSalesOrderRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSalesOrderRequestMultiError(errors)
	}

	return nil
}

// ListSalesOrderRequestMultiError is an error wrapping multiple validation
// errors returned by ListSalesOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSalesOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSalesOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSalesOrderRequestMultiError) AllErrors() []error { return m }

// ListSalesOrderRequestValidationError is the validation error returned by
// ListSalesOrderRequest.Validate if the designated constraints aren't met.
type ListSalesOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSalesOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSalesOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSalesOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSalesOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSalesOrderRequestValidationError) ErrorName() string {
	return "ListSalesOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSalesOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSalesOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSalesOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSalesOrderRequestValidationError{}

// Validate checks the field values on ListSalesOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSalesOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSalesOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSalesOrderReplyMultiError, or nil if none found.
func (m *ListSalesOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSalesOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetSalesOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSalesOrderReplyValidationError{
						field:  fmt.Sprintf("SalesOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSalesOrderReplyValidationError{
						field:  fmt.Sprintf("SalesOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSalesOrderReplyValidationError{
					field:  fmt.Sprintf("SalesOrders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSalesOrderReplyMultiError(errors)
	}

	return nil
}

// ListSalesOrderReplyMultiError is an error wrapping multiple validation
// errors returned by ListSalesOrderReply.ValidateAll() if the designated
// constraints aren't met.
type ListSalesOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSalesOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSalesOrderReplyMultiError) AllErrors() []error { return m }

// ListSalesOrderReplyValidationError is the validation error returned by
// ListSalesOrderReply.Validate if the designated constraints aren't met.
type ListSalesOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSalesOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSalesOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSalesOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSalesOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSalesOrderReplyValidationError) ErrorName() string {
	return "ListSalesOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSalesOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSalesOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSalesOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSalesOrderReplyValidationError{}

// Validate checks the field values on GenerateHotSalesReportRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateHotSalesReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateHotSalesReportRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GenerateHotSalesReportRequestMultiError, or nil if none found.
func (m *GenerateHotSalesReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateHotSalesReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GenerateHotSalesReportRequest_StartTime_Pattern.MatchString(m.GetStartTime()) {
		err := GenerateHotSalesReportRequestValidationError{
			field:  "StartTime",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_GenerateHotSalesReportRequest_EndTime_Pattern.MatchString(m.GetEndTime()) {
		err := GenerateHotSalesReportRequestValidationError{
			field:  "EndTime",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetTopN(); val < 5 || val > 100 {
		err := GenerateHotSalesReportRequestValidationError{
			field:  "TopN",
			reason: "value must be inside range [5, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenerateHotSalesReportRequestMultiError(errors)
	}

	return nil
}

// GenerateHotSalesReportRequestMultiError is an error wrapping multiple
// validation errors returned by GenerateHotSalesReportRequest.ValidateAll()
// if the designated constraints aren't met.
type GenerateHotSalesReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateHotSalesReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateHotSalesReportRequestMultiError) AllErrors() []error { return m }

// GenerateHotSalesReportRequestValidationError is the validation error
// returned by GenerateHotSalesReportRequest.Validate if the designated
// constraints aren't met.
type GenerateHotSalesReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateHotSalesReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateHotSalesReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateHotSalesReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateHotSalesReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateHotSalesReportRequestValidationError) ErrorName() string {
	return "GenerateHotSalesReportRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateHotSalesReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateHotSalesReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateHotSalesReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateHotSalesReportRequestValidationError{}

var _GenerateHotSalesReportRequest_StartTime_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}$")

var _GenerateHotSalesReportRequest_EndTime_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}-\\d{2}$")

// Validate checks the field values on GenerateHotSalesReportReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateHotSalesReportReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateHotSalesReportReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateHotSalesReportReplyMultiError, or nil if none found.
func (m *GenerateHotSalesReportReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateHotSalesReportReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateHotSalesReportReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateHotSalesReportReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateHotSalesReportReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ReportTime

	if len(errors) > 0 {
		return GenerateHotSalesReportReplyMultiError(errors)
	}

	return nil
}

// GenerateHotSalesReportReplyMultiError is an error wrapping multiple
// validation errors returned by GenerateHotSalesReportReply.ValidateAll() if
// the designated constraints aren't met.
type GenerateHotSalesReportReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateHotSalesReportReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateHotSalesReportReplyMultiError) AllErrors() []error { return m }

// GenerateHotSalesReportReplyValidationError is the validation error returned
// by GenerateHotSalesReportReply.Validate if the designated constraints
// aren't met.
type GenerateHotSalesReportReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateHotSalesReportReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateHotSalesReportReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateHotSalesReportReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateHotSalesReportReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateHotSalesReportReplyValidationError) ErrorName() string {
	return "GenerateHotSalesReportReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateHotSalesReportReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateHotSalesReportReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateHotSalesReportReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateHotSalesReportReplyValidationError{}

// Validate checks the field values on GenerateHotSalesReportReply_HotSaleItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GenerateHotSalesReportReply_HotSaleItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GenerateHotSalesReportReply_HotSaleItem with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GenerateHotSalesReportReply_HotSaleItemMultiError, or nil if none found.
func (m *GenerateHotSalesReportReply_HotSaleItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateHotSalesReportReply_HotSaleItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuID

	// no validation rules for SkuName

	// no validation rules for TotalSold

	// no validation rules for GrowthRate

	// no validation rules for OverstockRisk

	if len(errors) > 0 {
		return GenerateHotSalesReportReply_HotSaleItemMultiError(errors)
	}

	return nil
}

// GenerateHotSalesReportReply_HotSaleItemMultiError is an error wrapping
// multiple validation errors returned by
// GenerateHotSalesReportReply_HotSaleItem.ValidateAll() if the designated
// constraints aren't met.
type GenerateHotSalesReportReply_HotSaleItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateHotSalesReportReply_HotSaleItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateHotSalesReportReply_HotSaleItemMultiError) AllErrors() []error { return m }

// GenerateHotSalesReportReply_HotSaleItemValidationError is the validation
// error returned by GenerateHotSalesReportReply_HotSaleItem.Validate if the
// designated constraints aren't met.
type GenerateHotSalesReportReply_HotSaleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateHotSalesReportReply_HotSaleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateHotSalesReportReply_HotSaleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateHotSalesReportReply_HotSaleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateHotSalesReportReply_HotSaleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateHotSalesReportReply_HotSaleItemValidationError) ErrorName() string {
	return "GenerateHotSalesReportReply_HotSaleItemValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateHotSalesReportReply_HotSaleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateHotSalesReportReply_HotSaleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateHotSalesReportReply_HotSaleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateHotSalesReportReply_HotSaleItemValidationError{}
