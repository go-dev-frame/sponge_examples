// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/accountPayable.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccountPayableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountPayableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountPayableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountPayableRequestMultiError, or nil if none found.
func (m *CreateAccountPayableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountPayableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupplierID

	// no validation rules for PurchaseID

	// no validation rules for DueAmount

	// no validation rules for PaidAmount

	// no validation rules for DueDate

	if len(errors) > 0 {
		return CreateAccountPayableRequestMultiError(errors)
	}

	return nil
}

// CreateAccountPayableRequestMultiError is an error wrapping multiple
// validation errors returned by CreateAccountPayableRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateAccountPayableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountPayableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountPayableRequestMultiError) AllErrors() []error { return m }

// CreateAccountPayableRequestValidationError is the validation error returned
// by CreateAccountPayableRequest.Validate if the designated constraints
// aren't met.
type CreateAccountPayableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountPayableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountPayableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountPayableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountPayableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountPayableRequestValidationError) ErrorName() string {
	return "CreateAccountPayableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountPayableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountPayableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountPayableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountPayableRequestValidationError{}

// Validate checks the field values on CreateAccountPayableReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountPayableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountPayableReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountPayableReplyMultiError, or nil if none found.
func (m *CreateAccountPayableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountPayableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAccountPayableReplyMultiError(errors)
	}

	return nil
}

// CreateAccountPayableReplyMultiError is an error wrapping multiple validation
// errors returned by CreateAccountPayableReply.ValidateAll() if the
// designated constraints aren't met.
type CreateAccountPayableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountPayableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountPayableReplyMultiError) AllErrors() []error { return m }

// CreateAccountPayableReplyValidationError is the validation error returned by
// CreateAccountPayableReply.Validate if the designated constraints aren't met.
type CreateAccountPayableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountPayableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountPayableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountPayableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountPayableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountPayableReplyValidationError) ErrorName() string {
	return "CreateAccountPayableReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountPayableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountPayableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountPayableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountPayableReplyValidationError{}

// Validate checks the field values on DeleteAccountPayableByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountPayableByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountPayableByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAccountPayableByIDRequestMultiError, or nil if none found.
func (m *DeleteAccountPayableByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountPayableByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAccountPayableByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAccountPayableByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteAccountPayableByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAccountPayableByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteAccountPayableByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountPayableByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountPayableByIDRequestMultiError) AllErrors() []error { return m }

// DeleteAccountPayableByIDRequestValidationError is the validation error
// returned by DeleteAccountPayableByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteAccountPayableByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountPayableByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountPayableByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountPayableByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountPayableByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountPayableByIDRequestValidationError) ErrorName() string {
	return "DeleteAccountPayableByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountPayableByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountPayableByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountPayableByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountPayableByIDRequestValidationError{}

// Validate checks the field values on DeleteAccountPayableByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountPayableByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountPayableByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteAccountPayableByIDReplyMultiError, or nil if none found.
func (m *DeleteAccountPayableByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountPayableByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAccountPayableByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteAccountPayableByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteAccountPayableByIDReply.ValidateAll()
// if the designated constraints aren't met.
type DeleteAccountPayableByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountPayableByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountPayableByIDReplyMultiError) AllErrors() []error { return m }

// DeleteAccountPayableByIDReplyValidationError is the validation error
// returned by DeleteAccountPayableByIDReply.Validate if the designated
// constraints aren't met.
type DeleteAccountPayableByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountPayableByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountPayableByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountPayableByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountPayableByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountPayableByIDReplyValidationError) ErrorName() string {
	return "DeleteAccountPayableByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountPayableByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountPayableByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountPayableByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountPayableByIDReplyValidationError{}

// Validate checks the field values on UpdateAccountPayableByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountPayableByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountPayableByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAccountPayableByIDRequestMultiError, or nil if none found.
func (m *UpdateAccountPayableByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountPayableByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAccountPayableByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SupplierID

	// no validation rules for PurchaseID

	// no validation rules for DueAmount

	// no validation rules for PaidAmount

	// no validation rules for DueDate

	if len(errors) > 0 {
		return UpdateAccountPayableByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateAccountPayableByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountPayableByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateAccountPayableByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountPayableByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountPayableByIDRequestMultiError) AllErrors() []error { return m }

// UpdateAccountPayableByIDRequestValidationError is the validation error
// returned by UpdateAccountPayableByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateAccountPayableByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountPayableByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountPayableByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountPayableByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountPayableByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountPayableByIDRequestValidationError) ErrorName() string {
	return "UpdateAccountPayableByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountPayableByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountPayableByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountPayableByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountPayableByIDRequestValidationError{}

// Validate checks the field values on UpdateAccountPayableByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountPayableByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountPayableByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAccountPayableByIDReplyMultiError, or nil if none found.
func (m *UpdateAccountPayableByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountPayableByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccountPayableByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateAccountPayableByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateAccountPayableByIDReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateAccountPayableByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountPayableByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountPayableByIDReplyMultiError) AllErrors() []error { return m }

// UpdateAccountPayableByIDReplyValidationError is the validation error
// returned by UpdateAccountPayableByIDReply.Validate if the designated
// constraints aren't met.
type UpdateAccountPayableByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountPayableByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountPayableByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountPayableByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountPayableByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountPayableByIDReplyValidationError) ErrorName() string {
	return "UpdateAccountPayableByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountPayableByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountPayableByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountPayableByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountPayableByIDReplyValidationError{}

// Validate checks the field values on AccountPayable with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountPayable) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountPayable with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountPayableMultiError,
// or nil if none found.
func (m *AccountPayable) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountPayable) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SupplierID

	// no validation rules for PurchaseID

	// no validation rules for DueAmount

	// no validation rules for PaidAmount

	// no validation rules for DueDate

	if len(errors) > 0 {
		return AccountPayableMultiError(errors)
	}

	return nil
}

// AccountPayableMultiError is an error wrapping multiple validation errors
// returned by AccountPayable.ValidateAll() if the designated constraints
// aren't met.
type AccountPayableMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountPayableMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountPayableMultiError) AllErrors() []error { return m }

// AccountPayableValidationError is the validation error returned by
// AccountPayable.Validate if the designated constraints aren't met.
type AccountPayableValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountPayableValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountPayableValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountPayableValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountPayableValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountPayableValidationError) ErrorName() string { return "AccountPayableValidationError" }

// Error satisfies the builtin error interface
func (e AccountPayableValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountPayable.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountPayableValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountPayableValidationError{}

// Validate checks the field values on GetAccountPayableByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountPayableByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountPayableByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountPayableByIDRequestMultiError, or nil if none found.
func (m *GetAccountPayableByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountPayableByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAccountPayableByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAccountPayableByIDRequestMultiError(errors)
	}

	return nil
}

// GetAccountPayableByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetAccountPayableByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetAccountPayableByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountPayableByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountPayableByIDRequestMultiError) AllErrors() []error { return m }

// GetAccountPayableByIDRequestValidationError is the validation error returned
// by GetAccountPayableByIDRequest.Validate if the designated constraints
// aren't met.
type GetAccountPayableByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountPayableByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountPayableByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountPayableByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountPayableByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountPayableByIDRequestValidationError) ErrorName() string {
	return "GetAccountPayableByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountPayableByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountPayableByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountPayableByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountPayableByIDRequestValidationError{}

// Validate checks the field values on GetAccountPayableByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountPayableByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountPayableByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountPayableByIDReplyMultiError, or nil if none found.
func (m *GetAccountPayableByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountPayableByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccountPayable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountPayableByIDReplyValidationError{
					field:  "AccountPayable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountPayableByIDReplyValidationError{
					field:  "AccountPayable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountPayable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountPayableByIDReplyValidationError{
				field:  "AccountPayable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountPayableByIDReplyMultiError(errors)
	}

	return nil
}

// GetAccountPayableByIDReplyMultiError is an error wrapping multiple
// validation errors returned by GetAccountPayableByIDReply.ValidateAll() if
// the designated constraints aren't met.
type GetAccountPayableByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountPayableByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountPayableByIDReplyMultiError) AllErrors() []error { return m }

// GetAccountPayableByIDReplyValidationError is the validation error returned
// by GetAccountPayableByIDReply.Validate if the designated constraints aren't met.
type GetAccountPayableByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountPayableByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountPayableByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountPayableByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountPayableByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountPayableByIDReplyValidationError) ErrorName() string {
	return "GetAccountPayableByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountPayableByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountPayableByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountPayableByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountPayableByIDReplyValidationError{}

// Validate checks the field values on ListAccountPayableRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountPayableRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountPayableRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountPayableRequestMultiError, or nil if none found.
func (m *ListAccountPayableRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountPayableRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAccountPayableRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAccountPayableRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAccountPayableRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAccountPayableRequestMultiError(errors)
	}

	return nil
}

// ListAccountPayableRequestMultiError is an error wrapping multiple validation
// errors returned by ListAccountPayableRequest.ValidateAll() if the
// designated constraints aren't met.
type ListAccountPayableRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountPayableRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountPayableRequestMultiError) AllErrors() []error { return m }

// ListAccountPayableRequestValidationError is the validation error returned by
// ListAccountPayableRequest.Validate if the designated constraints aren't met.
type ListAccountPayableRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountPayableRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountPayableRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountPayableRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountPayableRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountPayableRequestValidationError) ErrorName() string {
	return "ListAccountPayableRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountPayableRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountPayableRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountPayableRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountPayableRequestValidationError{}

// Validate checks the field values on ListAccountPayableReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountPayableReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountPayableReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountPayableReplyMultiError, or nil if none found.
func (m *ListAccountPayableReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountPayableReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAccountPayables() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccountPayableReplyValidationError{
						field:  fmt.Sprintf("AccountPayables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccountPayableReplyValidationError{
						field:  fmt.Sprintf("AccountPayables[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountPayableReplyValidationError{
					field:  fmt.Sprintf("AccountPayables[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccountPayableReplyMultiError(errors)
	}

	return nil
}

// ListAccountPayableReplyMultiError is an error wrapping multiple validation
// errors returned by ListAccountPayableReply.ValidateAll() if the designated
// constraints aren't met.
type ListAccountPayableReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountPayableReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountPayableReplyMultiError) AllErrors() []error { return m }

// ListAccountPayableReplyValidationError is the validation error returned by
// ListAccountPayableReply.Validate if the designated constraints aren't met.
type ListAccountPayableReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountPayableReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountPayableReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountPayableReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountPayableReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountPayableReplyValidationError) ErrorName() string {
	return "ListAccountPayableReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountPayableReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountPayableReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountPayableReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountPayableReplyValidationError{}
