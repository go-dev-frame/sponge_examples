// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/promotion.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePromotionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePromotionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePromotionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePromotionRequestMultiError, or nil if none found.
func (m *CreatePromotionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePromotionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Rule

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return CreatePromotionRequestMultiError(errors)
	}

	return nil
}

// CreatePromotionRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePromotionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePromotionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePromotionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePromotionRequestMultiError) AllErrors() []error { return m }

// CreatePromotionRequestValidationError is the validation error returned by
// CreatePromotionRequest.Validate if the designated constraints aren't met.
type CreatePromotionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePromotionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePromotionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePromotionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePromotionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePromotionRequestValidationError) ErrorName() string {
	return "CreatePromotionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePromotionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePromotionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePromotionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePromotionRequestValidationError{}

// Validate checks the field values on CreatePromotionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePromotionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePromotionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePromotionReplyMultiError, or nil if none found.
func (m *CreatePromotionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePromotionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePromotionReplyMultiError(errors)
	}

	return nil
}

// CreatePromotionReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePromotionReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePromotionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePromotionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePromotionReplyMultiError) AllErrors() []error { return m }

// CreatePromotionReplyValidationError is the validation error returned by
// CreatePromotionReply.Validate if the designated constraints aren't met.
type CreatePromotionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePromotionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePromotionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePromotionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePromotionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePromotionReplyValidationError) ErrorName() string {
	return "CreatePromotionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePromotionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePromotionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePromotionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePromotionReplyValidationError{}

// Validate checks the field values on DeletePromotionByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePromotionByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePromotionByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePromotionByIDRequestMultiError, or nil if none found.
func (m *DeletePromotionByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePromotionByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeletePromotionByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePromotionByIDRequestMultiError(errors)
	}

	return nil
}

// DeletePromotionByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePromotionByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type DeletePromotionByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePromotionByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePromotionByIDRequestMultiError) AllErrors() []error { return m }

// DeletePromotionByIDRequestValidationError is the validation error returned
// by DeletePromotionByIDRequest.Validate if the designated constraints aren't met.
type DeletePromotionByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePromotionByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePromotionByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePromotionByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePromotionByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePromotionByIDRequestValidationError) ErrorName() string {
	return "DeletePromotionByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePromotionByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePromotionByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePromotionByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePromotionByIDRequestValidationError{}

// Validate checks the field values on DeletePromotionByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePromotionByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePromotionByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePromotionByIDReplyMultiError, or nil if none found.
func (m *DeletePromotionByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePromotionByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePromotionByIDReplyMultiError(errors)
	}

	return nil
}

// DeletePromotionByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeletePromotionByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeletePromotionByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePromotionByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePromotionByIDReplyMultiError) AllErrors() []error { return m }

// DeletePromotionByIDReplyValidationError is the validation error returned by
// DeletePromotionByIDReply.Validate if the designated constraints aren't met.
type DeletePromotionByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePromotionByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePromotionByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePromotionByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePromotionByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePromotionByIDReplyValidationError) ErrorName() string {
	return "DeletePromotionByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePromotionByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePromotionByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePromotionByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePromotionByIDReplyValidationError{}

// Validate checks the field values on UpdatePromotionByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePromotionByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePromotionByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePromotionByIDRequestMultiError, or nil if none found.
func (m *UpdatePromotionByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePromotionByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdatePromotionByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Rule

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return UpdatePromotionByIDRequestMultiError(errors)
	}

	return nil
}

// UpdatePromotionByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePromotionByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdatePromotionByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePromotionByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePromotionByIDRequestMultiError) AllErrors() []error { return m }

// UpdatePromotionByIDRequestValidationError is the validation error returned
// by UpdatePromotionByIDRequest.Validate if the designated constraints aren't met.
type UpdatePromotionByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePromotionByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePromotionByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePromotionByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePromotionByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePromotionByIDRequestValidationError) ErrorName() string {
	return "UpdatePromotionByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePromotionByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePromotionByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePromotionByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePromotionByIDRequestValidationError{}

// Validate checks the field values on UpdatePromotionByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePromotionByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePromotionByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePromotionByIDReplyMultiError, or nil if none found.
func (m *UpdatePromotionByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePromotionByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePromotionByIDReplyMultiError(errors)
	}

	return nil
}

// UpdatePromotionByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdatePromotionByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdatePromotionByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePromotionByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePromotionByIDReplyMultiError) AllErrors() []error { return m }

// UpdatePromotionByIDReplyValidationError is the validation error returned by
// UpdatePromotionByIDReply.Validate if the designated constraints aren't met.
type UpdatePromotionByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePromotionByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePromotionByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePromotionByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePromotionByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePromotionByIDReplyValidationError) ErrorName() string {
	return "UpdatePromotionByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePromotionByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePromotionByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePromotionByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePromotionByIDReplyValidationError{}

// Validate checks the field values on Promotion with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Promotion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Promotion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PromotionMultiError, or nil
// if none found.
func (m *Promotion) ValidateAll() error {
	return m.validate(true)
}

func (m *Promotion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Rule

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return PromotionMultiError(errors)
	}

	return nil
}

// PromotionMultiError is an error wrapping multiple validation errors returned
// by Promotion.ValidateAll() if the designated constraints aren't met.
type PromotionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PromotionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PromotionMultiError) AllErrors() []error { return m }

// PromotionValidationError is the validation error returned by
// Promotion.Validate if the designated constraints aren't met.
type PromotionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PromotionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PromotionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PromotionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PromotionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PromotionValidationError) ErrorName() string { return "PromotionValidationError" }

// Error satisfies the builtin error interface
func (e PromotionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPromotion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PromotionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PromotionValidationError{}

// Validate checks the field values on GetPromotionByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPromotionByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPromotionByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPromotionByIDRequestMultiError, or nil if none found.
func (m *GetPromotionByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPromotionByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetPromotionByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPromotionByIDRequestMultiError(errors)
	}

	return nil
}

// GetPromotionByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetPromotionByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPromotionByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPromotionByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPromotionByIDRequestMultiError) AllErrors() []error { return m }

// GetPromotionByIDRequestValidationError is the validation error returned by
// GetPromotionByIDRequest.Validate if the designated constraints aren't met.
type GetPromotionByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPromotionByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPromotionByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPromotionByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPromotionByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPromotionByIDRequestValidationError) ErrorName() string {
	return "GetPromotionByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPromotionByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPromotionByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPromotionByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPromotionByIDRequestValidationError{}

// Validate checks the field values on GetPromotionByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPromotionByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPromotionByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPromotionByIDReplyMultiError, or nil if none found.
func (m *GetPromotionByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPromotionByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPromotion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPromotionByIDReplyValidationError{
					field:  "Promotion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPromotionByIDReplyValidationError{
					field:  "Promotion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPromotion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPromotionByIDReplyValidationError{
				field:  "Promotion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPromotionByIDReplyMultiError(errors)
	}

	return nil
}

// GetPromotionByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetPromotionByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetPromotionByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPromotionByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPromotionByIDReplyMultiError) AllErrors() []error { return m }

// GetPromotionByIDReplyValidationError is the validation error returned by
// GetPromotionByIDReply.Validate if the designated constraints aren't met.
type GetPromotionByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPromotionByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPromotionByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPromotionByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPromotionByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPromotionByIDReplyValidationError) ErrorName() string {
	return "GetPromotionByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPromotionByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPromotionByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPromotionByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPromotionByIDReplyValidationError{}

// Validate checks the field values on ListPromotionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPromotionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPromotionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPromotionRequestMultiError, or nil if none found.
func (m *ListPromotionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPromotionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPromotionRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPromotionRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPromotionRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPromotionRequestMultiError(errors)
	}

	return nil
}

// ListPromotionRequestMultiError is an error wrapping multiple validation
// errors returned by ListPromotionRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPromotionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPromotionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPromotionRequestMultiError) AllErrors() []error { return m }

// ListPromotionRequestValidationError is the validation error returned by
// ListPromotionRequest.Validate if the designated constraints aren't met.
type ListPromotionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPromotionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPromotionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPromotionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPromotionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPromotionRequestValidationError) ErrorName() string {
	return "ListPromotionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPromotionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPromotionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPromotionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPromotionRequestValidationError{}

// Validate checks the field values on ListPromotionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPromotionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPromotionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPromotionReplyMultiError, or nil if none found.
func (m *ListPromotionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPromotionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetPromotions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPromotionReplyValidationError{
						field:  fmt.Sprintf("Promotions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPromotionReplyValidationError{
						field:  fmt.Sprintf("Promotions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPromotionReplyValidationError{
					field:  fmt.Sprintf("Promotions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPromotionReplyMultiError(errors)
	}

	return nil
}

// ListPromotionReplyMultiError is an error wrapping multiple validation errors
// returned by ListPromotionReply.ValidateAll() if the designated constraints
// aren't met.
type ListPromotionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPromotionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPromotionReplyMultiError) AllErrors() []error { return m }

// ListPromotionReplyValidationError is the validation error returned by
// ListPromotionReply.Validate if the designated constraints aren't met.
type ListPromotionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPromotionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPromotionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPromotionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPromotionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPromotionReplyValidationError) ErrorName() string {
	return "ListPromotionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPromotionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPromotionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPromotionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPromotionReplyValidationError{}

// Validate checks the field values on BindCouponTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindCouponTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindCouponTemplateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindCouponTemplateRequestMultiError, or nil if none found.
func (m *BindCouponTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BindCouponTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPromotionID() <= 0 {
		err := BindCouponTemplateRequestValidationError{
			field:  "PromotionID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCouponIDs()) < 1 {
		err := BindCouponTemplateRequestValidationError{
			field:  "CouponIDs",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return BindCouponTemplateRequestMultiError(errors)
	}

	return nil
}

// BindCouponTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by BindCouponTemplateRequest.ValidateAll() if the
// designated constraints aren't met.
type BindCouponTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindCouponTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindCouponTemplateRequestMultiError) AllErrors() []error { return m }

// BindCouponTemplateRequestValidationError is the validation error returned by
// BindCouponTemplateRequest.Validate if the designated constraints aren't met.
type BindCouponTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindCouponTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindCouponTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindCouponTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindCouponTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindCouponTemplateRequestValidationError) ErrorName() string {
	return "BindCouponTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BindCouponTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindCouponTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindCouponTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindCouponTemplateRequestValidationError{}

// Validate checks the field values on BindCouponTemplateReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BindCouponTemplateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BindCouponTemplateReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BindCouponTemplateReplyMultiError, or nil if none found.
func (m *BindCouponTemplateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *BindCouponTemplateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BoundCount

	if len(errors) > 0 {
		return BindCouponTemplateReplyMultiError(errors)
	}

	return nil
}

// BindCouponTemplateReplyMultiError is an error wrapping multiple validation
// errors returned by BindCouponTemplateReply.ValidateAll() if the designated
// constraints aren't met.
type BindCouponTemplateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BindCouponTemplateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BindCouponTemplateReplyMultiError) AllErrors() []error { return m }

// BindCouponTemplateReplyValidationError is the validation error returned by
// BindCouponTemplateReply.Validate if the designated constraints aren't met.
type BindCouponTemplateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BindCouponTemplateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BindCouponTemplateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BindCouponTemplateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BindCouponTemplateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BindCouponTemplateReplyValidationError) ErrorName() string {
	return "BindCouponTemplateReplyValidationError"
}

// Error satisfies the builtin error interface
func (e BindCouponTemplateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBindCouponTemplateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BindCouponTemplateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BindCouponTemplateReplyValidationError{}
