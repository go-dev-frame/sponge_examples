// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/employee.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEmployeeRequestMultiError, or nil if none found.
func (m *CreateEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Role

	// no validation rules for StoreID

	// no validation rules for PasswordHash

	if len(errors) > 0 {
		return CreateEmployeeRequestMultiError(errors)
	}

	return nil
}

// CreateEmployeeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEmployeeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmployeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmployeeRequestMultiError) AllErrors() []error { return m }

// CreateEmployeeRequestValidationError is the validation error returned by
// CreateEmployeeRequest.Validate if the designated constraints aren't met.
type CreateEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmployeeRequestValidationError) ErrorName() string {
	return "CreateEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmployeeRequestValidationError{}

// Validate checks the field values on CreateEmployeeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEmployeeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmployeeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEmployeeReplyMultiError, or nil if none found.
func (m *CreateEmployeeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmployeeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEmployeeReplyMultiError(errors)
	}

	return nil
}

// CreateEmployeeReplyMultiError is an error wrapping multiple validation
// errors returned by CreateEmployeeReply.ValidateAll() if the designated
// constraints aren't met.
type CreateEmployeeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmployeeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmployeeReplyMultiError) AllErrors() []error { return m }

// CreateEmployeeReplyValidationError is the validation error returned by
// CreateEmployeeReply.Validate if the designated constraints aren't met.
type CreateEmployeeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmployeeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmployeeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmployeeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmployeeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmployeeReplyValidationError) ErrorName() string {
	return "CreateEmployeeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmployeeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmployeeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmployeeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmployeeReplyValidationError{}

// Validate checks the field values on DeleteEmployeeByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEmployeeByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmployeeByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEmployeeByIDRequestMultiError, or nil if none found.
func (m *DeleteEmployeeByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmployeeByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteEmployeeByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEmployeeByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteEmployeeByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteEmployeeByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteEmployeeByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmployeeByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmployeeByIDRequestMultiError) AllErrors() []error { return m }

// DeleteEmployeeByIDRequestValidationError is the validation error returned by
// DeleteEmployeeByIDRequest.Validate if the designated constraints aren't met.
type DeleteEmployeeByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeeByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeeByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeeByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeeByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeeByIDRequestValidationError) ErrorName() string {
	return "DeleteEmployeeByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeeByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeeByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeeByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeeByIDRequestValidationError{}

// Validate checks the field values on DeleteEmployeeByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteEmployeeByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmployeeByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteEmployeeByIDReplyMultiError, or nil if none found.
func (m *DeleteEmployeeByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmployeeByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEmployeeByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteEmployeeByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteEmployeeByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteEmployeeByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmployeeByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmployeeByIDReplyMultiError) AllErrors() []error { return m }

// DeleteEmployeeByIDReplyValidationError is the validation error returned by
// DeleteEmployeeByIDReply.Validate if the designated constraints aren't met.
type DeleteEmployeeByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeeByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeeByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeeByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeeByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeeByIDReplyValidationError) ErrorName() string {
	return "DeleteEmployeeByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeeByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeeByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeeByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeeByIDReplyValidationError{}

// Validate checks the field values on UpdateEmployeeByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmployeeByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeeByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmployeeByIDRequestMultiError, or nil if none found.
func (m *UpdateEmployeeByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeeByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateEmployeeByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Role

	// no validation rules for StoreID

	// no validation rules for PasswordHash

	if len(errors) > 0 {
		return UpdateEmployeeByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateEmployeeByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateEmployeeByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateEmployeeByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeeByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeeByIDRequestMultiError) AllErrors() []error { return m }

// UpdateEmployeeByIDRequestValidationError is the validation error returned by
// UpdateEmployeeByIDRequest.Validate if the designated constraints aren't met.
type UpdateEmployeeByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeeByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeByIDRequestValidationError) ErrorName() string {
	return "UpdateEmployeeByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeeByIDRequestValidationError{}

// Validate checks the field values on UpdateEmployeeByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateEmployeeByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeeByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateEmployeeByIDReplyMultiError, or nil if none found.
func (m *UpdateEmployeeByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeeByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEmployeeByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateEmployeeByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateEmployeeByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmployeeByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeeByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeeByIDReplyMultiError) AllErrors() []error { return m }

// UpdateEmployeeByIDReplyValidationError is the validation error returned by
// UpdateEmployeeByIDReply.Validate if the designated constraints aren't met.
type UpdateEmployeeByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeeByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeeByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeeByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeeByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeeByIDReplyValidationError) ErrorName() string {
	return "UpdateEmployeeByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeeByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeeByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeeByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeeByIDReplyValidationError{}

// Validate checks the field values on Employee with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Employee) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Employee with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmployeeMultiError, or nil
// if none found.
func (m *Employee) ValidateAll() error {
	return m.validate(true)
}

func (m *Employee) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Role

	// no validation rules for StoreID

	// no validation rules for PasswordHash

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EmployeeMultiError(errors)
	}

	return nil
}

// EmployeeMultiError is an error wrapping multiple validation errors returned
// by Employee.ValidateAll() if the designated constraints aren't met.
type EmployeeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmployeeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmployeeMultiError) AllErrors() []error { return m }

// EmployeeValidationError is the validation error returned by
// Employee.Validate if the designated constraints aren't met.
type EmployeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeeValidationError) ErrorName() string { return "EmployeeValidationError" }

// Error satisfies the builtin error interface
func (e EmployeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeeValidationError{}

// Validate checks the field values on GetEmployeeByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeeByIDRequestMultiError, or nil if none found.
func (m *GetEmployeeByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetEmployeeByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEmployeeByIDRequestMultiError(errors)
	}

	return nil
}

// GetEmployeeByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetEmployeeByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEmployeeByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeByIDRequestMultiError) AllErrors() []error { return m }

// GetEmployeeByIDRequestValidationError is the validation error returned by
// GetEmployeeByIDRequest.Validate if the designated constraints aren't met.
type GetEmployeeByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeeByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeByIDRequestValidationError) ErrorName() string {
	return "GetEmployeeByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeeByIDRequestValidationError{}

// Validate checks the field values on GetEmployeeByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeeByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeeByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEmployeeByIDReplyMultiError, or nil if none found.
func (m *GetEmployeeByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeeByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEmployee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEmployeeByIDReplyValidationError{
					field:  "Employee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEmployeeByIDReplyValidationError{
					field:  "Employee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmployee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEmployeeByIDReplyValidationError{
				field:  "Employee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEmployeeByIDReplyMultiError(errors)
	}

	return nil
}

// GetEmployeeByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetEmployeeByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetEmployeeByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeeByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeeByIDReplyMultiError) AllErrors() []error { return m }

// GetEmployeeByIDReplyValidationError is the validation error returned by
// GetEmployeeByIDReply.Validate if the designated constraints aren't met.
type GetEmployeeByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeeByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeeByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeeByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeeByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeeByIDReplyValidationError) ErrorName() string {
	return "GetEmployeeByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeeByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeeByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeeByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeeByIDReplyValidationError{}

// Validate checks the field values on ListEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmployeeRequestMultiError, or nil if none found.
func (m *ListEmployeeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEmployeeRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEmployeeRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeeRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListEmployeeRequestMultiError(errors)
	}

	return nil
}

// ListEmployeeRequestMultiError is an error wrapping multiple validation
// errors returned by ListEmployeeRequest.ValidateAll() if the designated
// constraints aren't met.
type ListEmployeeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeeRequestMultiError) AllErrors() []error { return m }

// ListEmployeeRequestValidationError is the validation error returned by
// ListEmployeeRequest.Validate if the designated constraints aren't met.
type ListEmployeeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeeRequestValidationError) ErrorName() string {
	return "ListEmployeeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeeRequestValidationError{}

// Validate checks the field values on ListEmployeeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmployeeReplyMultiError, or nil if none found.
func (m *ListEmployeeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetEmployees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEmployeeReplyValidationError{
						field:  fmt.Sprintf("Employees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEmployeeReplyValidationError{
						field:  fmt.Sprintf("Employees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEmployeeReplyValidationError{
					field:  fmt.Sprintf("Employees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEmployeeReplyMultiError(errors)
	}

	return nil
}

// ListEmployeeReplyMultiError is an error wrapping multiple validation errors
// returned by ListEmployeeReply.ValidateAll() if the designated constraints
// aren't met.
type ListEmployeeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeeReplyMultiError) AllErrors() []error { return m }

// ListEmployeeReplyValidationError is the validation error returned by
// ListEmployeeReply.Validate if the designated constraints aren't met.
type ListEmployeeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeeReplyValidationError) ErrorName() string {
	return "ListEmployeeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeeReplyValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRequestMultiError, or nil if none found.
func (m *ChangePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OldPassword

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return ChangePasswordRequestMultiError(errors)
	}

	return nil
}

// ChangePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRequestMultiError) AllErrors() []error { return m }

// ChangePasswordRequestValidationError is the validation error returned by
// ChangePasswordRequest.Validate if the designated constraints aren't met.
type ChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequestValidationError) ErrorName() string {
	return "ChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ResetPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResetPasswordRequestMultiError, or nil if none found.
func (m *ResetPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	// no validation rules for Code

	// no validation rules for NewPassword

	if len(errors) > 0 {
		return ResetPasswordRequestMultiError(errors)
	}

	return nil
}

// ResetPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ResetPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ResetPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPasswordRequestMultiError) AllErrors() []error { return m }

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on SendVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendVerificationCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendVerificationCodeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendVerificationCodeRequestMultiError, or nil if none found.
func (m *SendVerificationCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendVerificationCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Phone

	if len(errors) > 0 {
		return SendVerificationCodeRequestMultiError(errors)
	}

	return nil
}

// SendVerificationCodeRequestMultiError is an error wrapping multiple
// validation errors returned by SendVerificationCodeRequest.ValidateAll() if
// the designated constraints aren't met.
type SendVerificationCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendVerificationCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendVerificationCodeRequestMultiError) AllErrors() []error { return m }

// SendVerificationCodeRequestValidationError is the validation error returned
// by SendVerificationCodeRequest.Validate if the designated constraints
// aren't met.
type SendVerificationCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendVerificationCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendVerificationCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendVerificationCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendVerificationCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendVerificationCodeRequestValidationError) ErrorName() string {
	return "SendVerificationCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendVerificationCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendVerificationCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendVerificationCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendVerificationCodeRequestValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Empty) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EmptyMultiError, or nil if none found.
func (m *Empty) ValidateAll() error {
	return m.validate(true)
}

func (m *Empty) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMultiError(errors)
	}

	return nil
}

// EmptyMultiError is an error wrapping multiple validation errors returned by
// Empty.ValidateAll() if the designated constraints aren't met.
type EmptyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMultiError) AllErrors() []error { return m }

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}
