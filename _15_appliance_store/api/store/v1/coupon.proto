syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service coupon {
  // create coupon
  rpc Create(CreateCouponRequest) returns (CreateCouponReply) {
    option (google.api.http) = {
      post: "/api/v1/coupon"
      body: "*"
    };
  }

  // delete coupon by id
  rpc DeleteByID(DeleteCouponByIDRequest) returns (DeleteCouponByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/coupon/{id}"
    };
  }

  // update coupon by id
  rpc UpdateByID(UpdateCouponByIDRequest) returns (UpdateCouponByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/coupon/{id}"
      body: "*"
    };
  }

  // get coupon by id
  rpc GetByID(GetCouponByIDRequest) returns (GetCouponByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/coupon/{id}"
    };
  }

  // list of coupon by query parameters
  rpc List(ListCouponRequest) returns (ListCouponReply) {
    option (google.api.http) = {
      post: "/api/v1/coupon/list"
      body: "*"
    };
  }

  // ----------------------------------------

  // 优惠券核销
  rpc RedeemCoupon(RedeemCouponRequest) returns (RedeemCouponReply) {
    option (google.api.http) = {
      post: "/api/v1/coupon/redeem"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/coupon/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getCoupon?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateCouponRequest {
	int32 type = 1;  // 类型(1满减/2折扣/3代金券)
	string value = 2;  // 面值/折扣率
	string amountCondition = 3;  // 使用条件(满多少元可用)
	uint32 customerID = 4;  // 绑定客户ID
	int32 status = 5;  // 状态(0未发放/1未使用/2已使用/3已过期)
	string expireTime = 6;  // 过期时间
}

message CreateCouponReply {
  string id = 1;
}

message DeleteCouponByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message DeleteCouponByIDReply {

}

message UpdateCouponByIDRequest {
	string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];  // 优惠券ID
	int32 type = 2;  // 类型(1满减/2折扣/3代金券)
	string value = 3;  // 面值/折扣率
	string amountCondition = 4;  // 使用条件(满多少元可用)
	uint32 customerID = 5;  // 绑定客户ID
	int32 status = 6;  // 状态(0未发放/1未使用/2已使用/3已过期)
	string expireTime = 7;  // 过期时间
}

message UpdateCouponByIDReply {

}

message Coupon {
	string id = 1;  // 优惠券ID
	int32 type = 2;  // 类型(1满减/2折扣/3代金券)
	string value = 3;  // 面值/折扣率
	string amountCondition = 4;  // 使用条件(满多少元可用)
	uint32 customerID = 5;  // 绑定客户ID
	int32 status = 6;  // 状态(0未发放/1未使用/2已使用/3已过期)
	string expireTime = 7;  // 过期时间
}

message GetCouponByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message GetCouponByIDReply {
  Coupon coupon = 1;
}

message ListCouponRequest {
  api.types.Params params = 1;
}

message ListCouponReply {
  int64 total = 1;
  repeated Coupon coupons = 2;
}

// -------------------------------------

message RedeemCouponRequest {
  string couponID = 1;        // 优惠券ID
  uint32 storeID = 2;         // 核销门店
  string orderID = 3;         // 关联订单
  uint32 operatorID = 4;      // 操作员ID
}

message RedeemCouponReply {
  string transactionID = 1;   // 核销流水号
  string redeemedTime = 2;    // 核销时间
}
