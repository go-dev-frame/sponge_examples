// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/afterSales.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAfterSalesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAfterSalesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAfterSalesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAfterSalesRequestMultiError, or nil if none found.
func (m *CreateAfterSalesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAfterSalesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateAfterSalesRequestMultiError(errors)
	}

	return nil
}

// CreateAfterSalesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAfterSalesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAfterSalesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAfterSalesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAfterSalesRequestMultiError) AllErrors() []error { return m }

// CreateAfterSalesRequestValidationError is the validation error returned by
// CreateAfterSalesRequest.Validate if the designated constraints aren't met.
type CreateAfterSalesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAfterSalesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAfterSalesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAfterSalesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAfterSalesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAfterSalesRequestValidationError) ErrorName() string {
	return "CreateAfterSalesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAfterSalesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAfterSalesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAfterSalesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAfterSalesRequestValidationError{}

// Validate checks the field values on CreateAfterSalesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAfterSalesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAfterSalesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAfterSalesReplyMultiError, or nil if none found.
func (m *CreateAfterSalesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAfterSalesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAfterSalesReplyMultiError(errors)
	}

	return nil
}

// CreateAfterSalesReplyMultiError is an error wrapping multiple validation
// errors returned by CreateAfterSalesReply.ValidateAll() if the designated
// constraints aren't met.
type CreateAfterSalesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAfterSalesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAfterSalesReplyMultiError) AllErrors() []error { return m }

// CreateAfterSalesReplyValidationError is the validation error returned by
// CreateAfterSalesReply.Validate if the designated constraints aren't met.
type CreateAfterSalesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAfterSalesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAfterSalesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAfterSalesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAfterSalesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAfterSalesReplyValidationError) ErrorName() string {
	return "CreateAfterSalesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAfterSalesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAfterSalesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAfterSalesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAfterSalesReplyValidationError{}

// Validate checks the field values on DeleteAfterSalesByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAfterSalesByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAfterSalesByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAfterSalesByIDRequestMultiError, or nil if none found.
func (m *DeleteAfterSalesByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAfterSalesByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAfterSalesByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAfterSalesByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteAfterSalesByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteAfterSalesByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteAfterSalesByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAfterSalesByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAfterSalesByIDRequestMultiError) AllErrors() []error { return m }

// DeleteAfterSalesByIDRequestValidationError is the validation error returned
// by DeleteAfterSalesByIDRequest.Validate if the designated constraints
// aren't met.
type DeleteAfterSalesByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAfterSalesByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAfterSalesByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAfterSalesByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAfterSalesByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAfterSalesByIDRequestValidationError) ErrorName() string {
	return "DeleteAfterSalesByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAfterSalesByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAfterSalesByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAfterSalesByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAfterSalesByIDRequestValidationError{}

// Validate checks the field values on DeleteAfterSalesByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAfterSalesByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAfterSalesByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAfterSalesByIDReplyMultiError, or nil if none found.
func (m *DeleteAfterSalesByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAfterSalesByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAfterSalesByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteAfterSalesByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteAfterSalesByIDReply.ValidateAll() if the
// designated constraints aren't met.
type DeleteAfterSalesByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAfterSalesByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAfterSalesByIDReplyMultiError) AllErrors() []error { return m }

// DeleteAfterSalesByIDReplyValidationError is the validation error returned by
// DeleteAfterSalesByIDReply.Validate if the designated constraints aren't met.
type DeleteAfterSalesByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAfterSalesByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAfterSalesByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAfterSalesByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAfterSalesByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAfterSalesByIDReplyValidationError) ErrorName() string {
	return "DeleteAfterSalesByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAfterSalesByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAfterSalesByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAfterSalesByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAfterSalesByIDReplyValidationError{}

// Validate checks the field values on UpdateAfterSalesByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAfterSalesByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAfterSalesByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAfterSalesByIDRequestMultiError, or nil if none found.
func (m *UpdateAfterSalesByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAfterSalesByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAfterSalesByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrderID

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateAfterSalesByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateAfterSalesByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAfterSalesByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAfterSalesByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAfterSalesByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAfterSalesByIDRequestMultiError) AllErrors() []error { return m }

// UpdateAfterSalesByIDRequestValidationError is the validation error returned
// by UpdateAfterSalesByIDRequest.Validate if the designated constraints
// aren't met.
type UpdateAfterSalesByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAfterSalesByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAfterSalesByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAfterSalesByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAfterSalesByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAfterSalesByIDRequestValidationError) ErrorName() string {
	return "UpdateAfterSalesByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAfterSalesByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAfterSalesByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAfterSalesByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAfterSalesByIDRequestValidationError{}

// Validate checks the field values on UpdateAfterSalesByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAfterSalesByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAfterSalesByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAfterSalesByIDReplyMultiError, or nil if none found.
func (m *UpdateAfterSalesByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAfterSalesByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAfterSalesByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateAfterSalesByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateAfterSalesByIDReply.ValidateAll() if the
// designated constraints aren't met.
type UpdateAfterSalesByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAfterSalesByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAfterSalesByIDReplyMultiError) AllErrors() []error { return m }

// UpdateAfterSalesByIDReplyValidationError is the validation error returned by
// UpdateAfterSalesByIDReply.Validate if the designated constraints aren't met.
type UpdateAfterSalesByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAfterSalesByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAfterSalesByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAfterSalesByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAfterSalesByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAfterSalesByIDReplyValidationError) ErrorName() string {
	return "UpdateAfterSalesByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAfterSalesByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAfterSalesByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAfterSalesByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAfterSalesByIDReplyValidationError{}

// Validate checks the field values on AfterSales with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AfterSales) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AfterSales with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AfterSalesMultiError, or
// nil if none found.
func (m *AfterSales) ValidateAll() error {
	return m.validate(true)
}

func (m *AfterSales) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrderID

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AfterSalesMultiError(errors)
	}

	return nil
}

// AfterSalesMultiError is an error wrapping multiple validation errors
// returned by AfterSales.ValidateAll() if the designated constraints aren't met.
type AfterSalesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AfterSalesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AfterSalesMultiError) AllErrors() []error { return m }

// AfterSalesValidationError is the validation error returned by
// AfterSales.Validate if the designated constraints aren't met.
type AfterSalesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AfterSalesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AfterSalesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AfterSalesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AfterSalesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AfterSalesValidationError) ErrorName() string { return "AfterSalesValidationError" }

// Error satisfies the builtin error interface
func (e AfterSalesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAfterSales.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AfterSalesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AfterSalesValidationError{}

// Validate checks the field values on GetAfterSalesByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAfterSalesByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAfterSalesByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAfterSalesByIDRequestMultiError, or nil if none found.
func (m *GetAfterSalesByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAfterSalesByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAfterSalesByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAfterSalesByIDRequestMultiError(errors)
	}

	return nil
}

// GetAfterSalesByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetAfterSalesByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAfterSalesByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAfterSalesByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAfterSalesByIDRequestMultiError) AllErrors() []error { return m }

// GetAfterSalesByIDRequestValidationError is the validation error returned by
// GetAfterSalesByIDRequest.Validate if the designated constraints aren't met.
type GetAfterSalesByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAfterSalesByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAfterSalesByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAfterSalesByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAfterSalesByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAfterSalesByIDRequestValidationError) ErrorName() string {
	return "GetAfterSalesByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAfterSalesByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAfterSalesByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAfterSalesByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAfterSalesByIDRequestValidationError{}

// Validate checks the field values on GetAfterSalesByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAfterSalesByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAfterSalesByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAfterSalesByIDReplyMultiError, or nil if none found.
func (m *GetAfterSalesByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAfterSalesByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAfterSales()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAfterSalesByIDReplyValidationError{
					field:  "AfterSales",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAfterSalesByIDReplyValidationError{
					field:  "AfterSales",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAfterSales()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAfterSalesByIDReplyValidationError{
				field:  "AfterSales",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAfterSalesByIDReplyMultiError(errors)
	}

	return nil
}

// GetAfterSalesByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetAfterSalesByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetAfterSalesByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAfterSalesByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAfterSalesByIDReplyMultiError) AllErrors() []error { return m }

// GetAfterSalesByIDReplyValidationError is the validation error returned by
// GetAfterSalesByIDReply.Validate if the designated constraints aren't met.
type GetAfterSalesByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAfterSalesByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAfterSalesByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAfterSalesByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAfterSalesByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAfterSalesByIDReplyValidationError) ErrorName() string {
	return "GetAfterSalesByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAfterSalesByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAfterSalesByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAfterSalesByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAfterSalesByIDReplyValidationError{}

// Validate checks the field values on ListAfterSalesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAfterSalesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAfterSalesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAfterSalesRequestMultiError, or nil if none found.
func (m *ListAfterSalesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAfterSalesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAfterSalesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAfterSalesRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAfterSalesRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAfterSalesRequestMultiError(errors)
	}

	return nil
}

// ListAfterSalesRequestMultiError is an error wrapping multiple validation
// errors returned by ListAfterSalesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAfterSalesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAfterSalesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAfterSalesRequestMultiError) AllErrors() []error { return m }

// ListAfterSalesRequestValidationError is the validation error returned by
// ListAfterSalesRequest.Validate if the designated constraints aren't met.
type ListAfterSalesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAfterSalesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAfterSalesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAfterSalesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAfterSalesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAfterSalesRequestValidationError) ErrorName() string {
	return "ListAfterSalesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAfterSalesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAfterSalesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAfterSalesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAfterSalesRequestValidationError{}

// Validate checks the field values on ListAfterSalesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAfterSalesReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAfterSalesReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAfterSalesReplyMultiError, or nil if none found.
func (m *ListAfterSalesReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAfterSalesReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAfterSaless() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAfterSalesReplyValidationError{
						field:  fmt.Sprintf("AfterSaless[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAfterSalesReplyValidationError{
						field:  fmt.Sprintf("AfterSaless[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAfterSalesReplyValidationError{
					field:  fmt.Sprintf("AfterSaless[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAfterSalesReplyMultiError(errors)
	}

	return nil
}

// ListAfterSalesReplyMultiError is an error wrapping multiple validation
// errors returned by ListAfterSalesReply.ValidateAll() if the designated
// constraints aren't met.
type ListAfterSalesReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAfterSalesReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAfterSalesReplyMultiError) AllErrors() []error { return m }

// ListAfterSalesReplyValidationError is the validation error returned by
// ListAfterSalesReply.Validate if the designated constraints aren't met.
type ListAfterSalesReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAfterSalesReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAfterSalesReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAfterSalesReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAfterSalesReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAfterSalesReplyValidationError) ErrorName() string {
	return "ListAfterSalesReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListAfterSalesReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAfterSalesReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAfterSalesReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAfterSalesReplyValidationError{}

// Validate checks the field values on CreateServiceOrderWithAssignmentRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateServiceOrderWithAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreateServiceOrderWithAssignmentRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CreateServiceOrderWithAssignmentRequestMultiError, or nil if none found.
func (m *CreateServiceOrderWithAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceOrderWithAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomerID

	// no validation rules for ProductID

	if utf8.RuneCountInString(m.GetFaultDescription()) < 10 {
		err := CreateServiceOrderWithAssignmentRequestValidationError{
			field:  "FaultDescription",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PurchaseProof

	if len(errors) > 0 {
		return CreateServiceOrderWithAssignmentRequestMultiError(errors)
	}

	return nil
}

// CreateServiceOrderWithAssignmentRequestMultiError is an error wrapping
// multiple validation errors returned by
// CreateServiceOrderWithAssignmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceOrderWithAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceOrderWithAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceOrderWithAssignmentRequestMultiError) AllErrors() []error { return m }

// CreateServiceOrderWithAssignmentRequestValidationError is the validation
// error returned by CreateServiceOrderWithAssignmentRequest.Validate if the
// designated constraints aren't met.
type CreateServiceOrderWithAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceOrderWithAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceOrderWithAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceOrderWithAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceOrderWithAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceOrderWithAssignmentRequestValidationError) ErrorName() string {
	return "CreateServiceOrderWithAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceOrderWithAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceOrderWithAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceOrderWithAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceOrderWithAssignmentRequestValidationError{}

// Validate checks the field values on CreateServiceOrderWithAssignmentReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateServiceOrderWithAssignmentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceOrderWithAssignmentReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateServiceOrderWithAssignmentReplyMultiError, or nil if none found.
func (m *CreateServiceOrderWithAssignmentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceOrderWithAssignmentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ServiceOrderID

	// no validation rules for AssignedStore

	// no validation rules for QrCodeURL

	if len(errors) > 0 {
		return CreateServiceOrderWithAssignmentReplyMultiError(errors)
	}

	return nil
}

// CreateServiceOrderWithAssignmentReplyMultiError is an error wrapping
// multiple validation errors returned by
// CreateServiceOrderWithAssignmentReply.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceOrderWithAssignmentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceOrderWithAssignmentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceOrderWithAssignmentReplyMultiError) AllErrors() []error { return m }

// CreateServiceOrderWithAssignmentReplyValidationError is the validation error
// returned by CreateServiceOrderWithAssignmentReply.Validate if the
// designated constraints aren't met.
type CreateServiceOrderWithAssignmentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceOrderWithAssignmentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceOrderWithAssignmentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceOrderWithAssignmentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceOrderWithAssignmentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceOrderWithAssignmentReplyValidationError) ErrorName() string {
	return "CreateServiceOrderWithAssignmentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceOrderWithAssignmentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceOrderWithAssignmentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceOrderWithAssignmentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceOrderWithAssignmentReplyValidationError{}
