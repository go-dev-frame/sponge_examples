// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/inventoryCheck.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateInventoryCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInventoryCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInventoryCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInventoryCheckRequestMultiError, or nil if none found.
func (m *CreateInventoryCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInventoryCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreID

	// no validation rules for OperatorID

	// no validation rules for CheckTime

	// no validation rules for TotalDiff

	if len(errors) > 0 {
		return CreateInventoryCheckRequestMultiError(errors)
	}

	return nil
}

// CreateInventoryCheckRequestMultiError is an error wrapping multiple
// validation errors returned by CreateInventoryCheckRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateInventoryCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInventoryCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInventoryCheckRequestMultiError) AllErrors() []error { return m }

// CreateInventoryCheckRequestValidationError is the validation error returned
// by CreateInventoryCheckRequest.Validate if the designated constraints
// aren't met.
type CreateInventoryCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInventoryCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInventoryCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInventoryCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInventoryCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInventoryCheckRequestValidationError) ErrorName() string {
	return "CreateInventoryCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInventoryCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInventoryCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInventoryCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInventoryCheckRequestValidationError{}

// Validate checks the field values on CreateInventoryCheckReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInventoryCheckReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInventoryCheckReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInventoryCheckReplyMultiError, or nil if none found.
func (m *CreateInventoryCheckReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInventoryCheckReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateInventoryCheckReplyMultiError(errors)
	}

	return nil
}

// CreateInventoryCheckReplyMultiError is an error wrapping multiple validation
// errors returned by CreateInventoryCheckReply.ValidateAll() if the
// designated constraints aren't met.
type CreateInventoryCheckReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInventoryCheckReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInventoryCheckReplyMultiError) AllErrors() []error { return m }

// CreateInventoryCheckReplyValidationError is the validation error returned by
// CreateInventoryCheckReply.Validate if the designated constraints aren't met.
type CreateInventoryCheckReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInventoryCheckReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInventoryCheckReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInventoryCheckReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInventoryCheckReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInventoryCheckReplyValidationError) ErrorName() string {
	return "CreateInventoryCheckReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInventoryCheckReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInventoryCheckReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInventoryCheckReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInventoryCheckReplyValidationError{}

// Validate checks the field values on DeleteInventoryCheckByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInventoryCheckByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInventoryCheckByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteInventoryCheckByIDRequestMultiError, or nil if none found.
func (m *DeleteInventoryCheckByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInventoryCheckByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteInventoryCheckByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteInventoryCheckByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteInventoryCheckByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteInventoryCheckByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteInventoryCheckByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInventoryCheckByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInventoryCheckByIDRequestMultiError) AllErrors() []error { return m }

// DeleteInventoryCheckByIDRequestValidationError is the validation error
// returned by DeleteInventoryCheckByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteInventoryCheckByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInventoryCheckByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInventoryCheckByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInventoryCheckByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInventoryCheckByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInventoryCheckByIDRequestValidationError) ErrorName() string {
	return "DeleteInventoryCheckByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInventoryCheckByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInventoryCheckByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInventoryCheckByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInventoryCheckByIDRequestValidationError{}

// Validate checks the field values on DeleteInventoryCheckByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInventoryCheckByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInventoryCheckByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteInventoryCheckByIDReplyMultiError, or nil if none found.
func (m *DeleteInventoryCheckByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInventoryCheckByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInventoryCheckByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteInventoryCheckByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteInventoryCheckByIDReply.ValidateAll()
// if the designated constraints aren't met.
type DeleteInventoryCheckByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInventoryCheckByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInventoryCheckByIDReplyMultiError) AllErrors() []error { return m }

// DeleteInventoryCheckByIDReplyValidationError is the validation error
// returned by DeleteInventoryCheckByIDReply.Validate if the designated
// constraints aren't met.
type DeleteInventoryCheckByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInventoryCheckByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInventoryCheckByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInventoryCheckByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInventoryCheckByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInventoryCheckByIDReplyValidationError) ErrorName() string {
	return "DeleteInventoryCheckByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInventoryCheckByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInventoryCheckByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInventoryCheckByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInventoryCheckByIDReplyValidationError{}

// Validate checks the field values on UpdateInventoryCheckByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInventoryCheckByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInventoryCheckByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateInventoryCheckByIDRequestMultiError, or nil if none found.
func (m *UpdateInventoryCheckByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInventoryCheckByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateInventoryCheckByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StoreID

	// no validation rules for OperatorID

	// no validation rules for CheckTime

	// no validation rules for TotalDiff

	if len(errors) > 0 {
		return UpdateInventoryCheckByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateInventoryCheckByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateInventoryCheckByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateInventoryCheckByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInventoryCheckByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInventoryCheckByIDRequestMultiError) AllErrors() []error { return m }

// UpdateInventoryCheckByIDRequestValidationError is the validation error
// returned by UpdateInventoryCheckByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateInventoryCheckByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInventoryCheckByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInventoryCheckByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInventoryCheckByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInventoryCheckByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInventoryCheckByIDRequestValidationError) ErrorName() string {
	return "UpdateInventoryCheckByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInventoryCheckByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInventoryCheckByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInventoryCheckByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInventoryCheckByIDRequestValidationError{}

// Validate checks the field values on UpdateInventoryCheckByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInventoryCheckByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInventoryCheckByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateInventoryCheckByIDReplyMultiError, or nil if none found.
func (m *UpdateInventoryCheckByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInventoryCheckByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInventoryCheckByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateInventoryCheckByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateInventoryCheckByIDReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateInventoryCheckByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInventoryCheckByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInventoryCheckByIDReplyMultiError) AllErrors() []error { return m }

// UpdateInventoryCheckByIDReplyValidationError is the validation error
// returned by UpdateInventoryCheckByIDReply.Validate if the designated
// constraints aren't met.
type UpdateInventoryCheckByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInventoryCheckByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInventoryCheckByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInventoryCheckByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInventoryCheckByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInventoryCheckByIDReplyValidationError) ErrorName() string {
	return "UpdateInventoryCheckByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInventoryCheckByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInventoryCheckByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInventoryCheckByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInventoryCheckByIDReplyValidationError{}

// Validate checks the field values on InventoryCheck with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InventoryCheck) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InventoryCheck with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InventoryCheckMultiError,
// or nil if none found.
func (m *InventoryCheck) ValidateAll() error {
	return m.validate(true)
}

func (m *InventoryCheck) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StoreID

	// no validation rules for OperatorID

	// no validation rules for CheckTime

	// no validation rules for TotalDiff

	if len(errors) > 0 {
		return InventoryCheckMultiError(errors)
	}

	return nil
}

// InventoryCheckMultiError is an error wrapping multiple validation errors
// returned by InventoryCheck.ValidateAll() if the designated constraints
// aren't met.
type InventoryCheckMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InventoryCheckMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InventoryCheckMultiError) AllErrors() []error { return m }

// InventoryCheckValidationError is the validation error returned by
// InventoryCheck.Validate if the designated constraints aren't met.
type InventoryCheckValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InventoryCheckValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InventoryCheckValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InventoryCheckValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InventoryCheckValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InventoryCheckValidationError) ErrorName() string { return "InventoryCheckValidationError" }

// Error satisfies the builtin error interface
func (e InventoryCheckValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInventoryCheck.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InventoryCheckValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InventoryCheckValidationError{}

// Validate checks the field values on GetInventoryCheckByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInventoryCheckByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInventoryCheckByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInventoryCheckByIDRequestMultiError, or nil if none found.
func (m *GetInventoryCheckByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInventoryCheckByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetInventoryCheckByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetInventoryCheckByIDRequestMultiError(errors)
	}

	return nil
}

// GetInventoryCheckByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetInventoryCheckByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetInventoryCheckByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInventoryCheckByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInventoryCheckByIDRequestMultiError) AllErrors() []error { return m }

// GetInventoryCheckByIDRequestValidationError is the validation error returned
// by GetInventoryCheckByIDRequest.Validate if the designated constraints
// aren't met.
type GetInventoryCheckByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInventoryCheckByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInventoryCheckByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInventoryCheckByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInventoryCheckByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInventoryCheckByIDRequestValidationError) ErrorName() string {
	return "GetInventoryCheckByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInventoryCheckByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInventoryCheckByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInventoryCheckByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInventoryCheckByIDRequestValidationError{}

// Validate checks the field values on GetInventoryCheckByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInventoryCheckByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInventoryCheckByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInventoryCheckByIDReplyMultiError, or nil if none found.
func (m *GetInventoryCheckByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInventoryCheckByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInventoryCheck()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInventoryCheckByIDReplyValidationError{
					field:  "InventoryCheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInventoryCheckByIDReplyValidationError{
					field:  "InventoryCheck",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInventoryCheck()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInventoryCheckByIDReplyValidationError{
				field:  "InventoryCheck",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInventoryCheckByIDReplyMultiError(errors)
	}

	return nil
}

// GetInventoryCheckByIDReplyMultiError is an error wrapping multiple
// validation errors returned by GetInventoryCheckByIDReply.ValidateAll() if
// the designated constraints aren't met.
type GetInventoryCheckByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInventoryCheckByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInventoryCheckByIDReplyMultiError) AllErrors() []error { return m }

// GetInventoryCheckByIDReplyValidationError is the validation error returned
// by GetInventoryCheckByIDReply.Validate if the designated constraints aren't met.
type GetInventoryCheckByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInventoryCheckByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInventoryCheckByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInventoryCheckByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInventoryCheckByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInventoryCheckByIDReplyValidationError) ErrorName() string {
	return "GetInventoryCheckByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetInventoryCheckByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInventoryCheckByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInventoryCheckByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInventoryCheckByIDReplyValidationError{}

// Validate checks the field values on ListInventoryCheckRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInventoryCheckRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInventoryCheckRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInventoryCheckRequestMultiError, or nil if none found.
func (m *ListInventoryCheckRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInventoryCheckRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInventoryCheckRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInventoryCheckRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInventoryCheckRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInventoryCheckRequestMultiError(errors)
	}

	return nil
}

// ListInventoryCheckRequestMultiError is an error wrapping multiple validation
// errors returned by ListInventoryCheckRequest.ValidateAll() if the
// designated constraints aren't met.
type ListInventoryCheckRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInventoryCheckRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInventoryCheckRequestMultiError) AllErrors() []error { return m }

// ListInventoryCheckRequestValidationError is the validation error returned by
// ListInventoryCheckRequest.Validate if the designated constraints aren't met.
type ListInventoryCheckRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInventoryCheckRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInventoryCheckRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInventoryCheckRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInventoryCheckRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInventoryCheckRequestValidationError) ErrorName() string {
	return "ListInventoryCheckRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInventoryCheckRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInventoryCheckRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInventoryCheckRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInventoryCheckRequestValidationError{}

// Validate checks the field values on ListInventoryCheckReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInventoryCheckReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInventoryCheckReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInventoryCheckReplyMultiError, or nil if none found.
func (m *ListInventoryCheckReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInventoryCheckReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetInventoryChecks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInventoryCheckReplyValidationError{
						field:  fmt.Sprintf("InventoryChecks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInventoryCheckReplyValidationError{
						field:  fmt.Sprintf("InventoryChecks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInventoryCheckReplyValidationError{
					field:  fmt.Sprintf("InventoryChecks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInventoryCheckReplyMultiError(errors)
	}

	return nil
}

// ListInventoryCheckReplyMultiError is an error wrapping multiple validation
// errors returned by ListInventoryCheckReply.ValidateAll() if the designated
// constraints aren't met.
type ListInventoryCheckReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInventoryCheckReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInventoryCheckReplyMultiError) AllErrors() []error { return m }

// ListInventoryCheckReplyValidationError is the validation error returned by
// ListInventoryCheckReply.Validate if the designated constraints aren't met.
type ListInventoryCheckReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInventoryCheckReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInventoryCheckReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInventoryCheckReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInventoryCheckReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInventoryCheckReplyValidationError) ErrorName() string {
	return "ListInventoryCheckReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListInventoryCheckReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInventoryCheckReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInventoryCheckReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInventoryCheckReplyValidationError{}
