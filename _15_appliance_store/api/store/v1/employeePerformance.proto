syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service employeePerformance {
  // create employeePerformance
  rpc Create(CreateEmployeePerformanceRequest) returns (CreateEmployeePerformanceReply) {
    option (google.api.http) = {
      post: "/api/v1/employeePerformance"
      body: "*"
    };
  }

  // delete employeePerformance by id
  rpc DeleteByID(DeleteEmployeePerformanceByIDRequest) returns (DeleteEmployeePerformanceByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/employeePerformance/{id}"
    };
  }

  // update employeePerformance by id
  rpc UpdateByID(UpdateEmployeePerformanceByIDRequest) returns (UpdateEmployeePerformanceByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/employeePerformance/{id}"
      body: "*"
    };
  }

  // get employeePerformance by id
  rpc GetByID(GetEmployeePerformanceByIDRequest) returns (GetEmployeePerformanceByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/employeePerformance/{id}"
    };
  }

  // list of employeePerformance by query parameters
  rpc List(ListEmployeePerformanceRequest) returns (ListEmployeePerformanceReply) {
    option (google.api.http) = {
      post: "/api/v1/employeePerformance/list"
      body: "*"
    };
  }

  // ---------------------------------------------

  // 计算销售提成
  // 实现逻辑：
  // 1. 获取员工当月的销售记录
  // 2. 应用阶梯提成规则计算奖金
  // 3. 扣除已退货订单金额
  // 4. 生成提成明细记录
  rpc CalculateSalesCommission(CalculateSalesCommissionRequest) returns (CalculateSalesCommissionReply) {
    option (google.api.http) = {
      post: "/api/v1/employeePerformance/calculate-commission"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/employeePerformance/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getEmployeePerformance?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateEmployeePerformanceRequest {
	uint32 employeeID = 1;  // 员工ID
	string month = 2;  // 统计月份(YYYY-MM)
	string salesAmount = 3;  // 销售额
	string commission = 4;  // 提成金额
}

message CreateEmployeePerformanceReply {
  uint64 id = 1;
}

message DeleteEmployeePerformanceByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeleteEmployeePerformanceByIDReply {

}

message UpdateEmployeePerformanceByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // 记录ID
	uint32 employeeID = 2;  // 员工ID
	string month = 3;  // 统计月份(YYYY-MM)
	string salesAmount = 4;  // 销售额
	string commission = 5;  // 提成金额
}

message UpdateEmployeePerformanceByIDReply {

}

message EmployeePerformance {
	uint64 id = 1;  // 记录ID
	uint32 employeeID = 2;  // 员工ID
	string month = 3;  // 统计月份(YYYY-MM)
	string salesAmount = 4;  // 销售额
	string commission = 5;  // 提成金额
	string createdAt = 6;  // 创建时间
	string updatedAt = 7;  // 更新时间
}

message GetEmployeePerformanceByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetEmployeePerformanceByIDReply {
  EmployeePerformance employeePerformance = 1;
}

message ListEmployeePerformanceRequest {
  api.types.Params params = 1;
}

message ListEmployeePerformanceReply {
  int64 total = 1;
  repeated EmployeePerformance employeePerformances = 2;
}

// ------------------------------------------------------------

message CalculateSalesCommissionRequest {
  uint32 employeeID = 1; // 员工ID
  string month = 2 [(validate.rules).string = {pattern: "^\\d{4}-\\d{2}$"}]; // 月份格式YYYY-MM
}

message CalculateSalesCommissionReply {
  string totalSales = 1; // 总销售额
  string commissionAmount = 2; // 应得提成金额
  int32 qualifiedOrders = 3; // 符合提成条件的订单数
}
