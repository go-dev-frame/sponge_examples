syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service checkDetail {
  // create checkDetail
  rpc Create(CreateCheckDetailRequest) returns (CreateCheckDetailReply) {
    option (google.api.http) = {
      post: "/api/v1/checkDetail"
      body: "*"
    };
  }

  // delete checkDetail by checkID
  rpc DeleteByCheckID(DeleteCheckDetailByCheckIDRequest) returns (DeleteCheckDetailByCheckIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/checkDetail/{checkID}"
    };
  }

  // update checkDetail by checkID
  rpc UpdateByCheckID(UpdateCheckDetailByCheckIDRequest) returns (UpdateCheckDetailByCheckIDReply) {
    option (google.api.http) = {
      put: "/api/v1/checkDetail/{checkID}"
      body: "*"
    };
  }

  // get checkDetail by checkID
  rpc GetByCheckID(GetCheckDetailByCheckIDRequest) returns (GetCheckDetailByCheckIDReply) {
    option (google.api.http) = {
      get: "/api/v1/checkDetail/{checkID}"
    };
  }

  // list of checkDetail by query parameters
  rpc List(ListCheckDetailRequest) returns (ListCheckDetailReply) {
    option (google.api.http) = {
      post: "/api/v1/checkDetail/list"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/checkDetail/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getCheckDetail?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateCheckDetailRequest {
	string checkID = 1;  // 盘点单号
	uint32 skuID = 2;  // SKU ID
	int32 systemQty = 3;  // 系统库存
	int32 actualQty = 4;  // 实际库存
}

message CreateCheckDetailReply {
  string checkID = 1;
}

message DeleteCheckDetailByCheckIDRequest {
  string checkID = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"checkID\""];
}

message DeleteCheckDetailByCheckIDReply {

}

message UpdateCheckDetailByCheckIDRequest {
	string checkID = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"checkID\""];  // 盘点单号
	uint32 skuID = 2;  // SKU ID
	int32 systemQty = 3;  // 系统库存
	int32 actualQty = 4;  // 实际库存
}

message UpdateCheckDetailByCheckIDReply {

}

message CheckDetail {
	string checkID = 1;  // 盘点单号
	uint32 skuID = 2;  // SKU ID
	int32 systemQty = 3;  // 系统库存
	int32 actualQty = 4;  // 实际库存
}

message GetCheckDetailByCheckIDRequest {
  string checkID = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"checkID\""];
}

message GetCheckDetailByCheckIDReply {
  CheckDetail checkDetail = 1;
}

message ListCheckDetailRequest {
  api.types.Params params = 1;
}

message ListCheckDetailReply {
  int64 total = 1;
  repeated CheckDetail checkDetails = 2;
}


