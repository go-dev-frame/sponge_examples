// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/purchaseOrder.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePurchaseOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePurchaseOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePurchaseOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePurchaseOrderRequestMultiError, or nil if none found.
func (m *CreatePurchaseOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePurchaseOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SupplierID

	// no validation rules for TotalAmount

	// no validation rules for Status

	// no validation rules for ExpectedDate

	if len(errors) > 0 {
		return CreatePurchaseOrderRequestMultiError(errors)
	}

	return nil
}

// CreatePurchaseOrderRequestMultiError is an error wrapping multiple
// validation errors returned by CreatePurchaseOrderRequest.ValidateAll() if
// the designated constraints aren't met.
type CreatePurchaseOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePurchaseOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePurchaseOrderRequestMultiError) AllErrors() []error { return m }

// CreatePurchaseOrderRequestValidationError is the validation error returned
// by CreatePurchaseOrderRequest.Validate if the designated constraints aren't met.
type CreatePurchaseOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseOrderRequestValidationError) ErrorName() string {
	return "CreatePurchaseOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseOrderRequestValidationError{}

// Validate checks the field values on CreatePurchaseOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePurchaseOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePurchaseOrderReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePurchaseOrderReplyMultiError, or nil if none found.
func (m *CreatePurchaseOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePurchaseOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePurchaseOrderReplyMultiError(errors)
	}

	return nil
}

// CreatePurchaseOrderReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePurchaseOrderReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePurchaseOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePurchaseOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePurchaseOrderReplyMultiError) AllErrors() []error { return m }

// CreatePurchaseOrderReplyValidationError is the validation error returned by
// CreatePurchaseOrderReply.Validate if the designated constraints aren't met.
type CreatePurchaseOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePurchaseOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePurchaseOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePurchaseOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePurchaseOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePurchaseOrderReplyValidationError) ErrorName() string {
	return "CreatePurchaseOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePurchaseOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePurchaseOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePurchaseOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePurchaseOrderReplyValidationError{}

// Validate checks the field values on DeletePurchaseOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePurchaseOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePurchaseOrderByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeletePurchaseOrderByIDRequestMultiError, or nil if none found.
func (m *DeletePurchaseOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePurchaseOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeletePurchaseOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePurchaseOrderByIDRequestMultiError(errors)
	}

	return nil
}

// DeletePurchaseOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeletePurchaseOrderByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeletePurchaseOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePurchaseOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePurchaseOrderByIDRequestMultiError) AllErrors() []error { return m }

// DeletePurchaseOrderByIDRequestValidationError is the validation error
// returned by DeletePurchaseOrderByIDRequest.Validate if the designated
// constraints aren't met.
type DeletePurchaseOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePurchaseOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePurchaseOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePurchaseOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePurchaseOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePurchaseOrderByIDRequestValidationError) ErrorName() string {
	return "DeletePurchaseOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePurchaseOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePurchaseOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePurchaseOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePurchaseOrderByIDRequestValidationError{}

// Validate checks the field values on DeletePurchaseOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePurchaseOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePurchaseOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePurchaseOrderByIDReplyMultiError, or nil if none found.
func (m *DeletePurchaseOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePurchaseOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePurchaseOrderByIDReplyMultiError(errors)
	}

	return nil
}

// DeletePurchaseOrderByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeletePurchaseOrderByIDReply.ValidateAll() if
// the designated constraints aren't met.
type DeletePurchaseOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePurchaseOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePurchaseOrderByIDReplyMultiError) AllErrors() []error { return m }

// DeletePurchaseOrderByIDReplyValidationError is the validation error returned
// by DeletePurchaseOrderByIDReply.Validate if the designated constraints
// aren't met.
type DeletePurchaseOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePurchaseOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePurchaseOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePurchaseOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePurchaseOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePurchaseOrderByIDReplyValidationError) ErrorName() string {
	return "DeletePurchaseOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePurchaseOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePurchaseOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePurchaseOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePurchaseOrderByIDReplyValidationError{}

// Validate checks the field values on UpdatePurchaseOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePurchaseOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePurchaseOrderByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdatePurchaseOrderByIDRequestMultiError, or nil if none found.
func (m *UpdatePurchaseOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePurchaseOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdatePurchaseOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SupplierID

	// no validation rules for TotalAmount

	// no validation rules for Status

	// no validation rules for ExpectedDate

	if len(errors) > 0 {
		return UpdatePurchaseOrderByIDRequestMultiError(errors)
	}

	return nil
}

// UpdatePurchaseOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdatePurchaseOrderByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdatePurchaseOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePurchaseOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePurchaseOrderByIDRequestMultiError) AllErrors() []error { return m }

// UpdatePurchaseOrderByIDRequestValidationError is the validation error
// returned by UpdatePurchaseOrderByIDRequest.Validate if the designated
// constraints aren't met.
type UpdatePurchaseOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePurchaseOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePurchaseOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePurchaseOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePurchaseOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePurchaseOrderByIDRequestValidationError) ErrorName() string {
	return "UpdatePurchaseOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePurchaseOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePurchaseOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePurchaseOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePurchaseOrderByIDRequestValidationError{}

// Validate checks the field values on UpdatePurchaseOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePurchaseOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePurchaseOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePurchaseOrderByIDReplyMultiError, or nil if none found.
func (m *UpdatePurchaseOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePurchaseOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePurchaseOrderByIDReplyMultiError(errors)
	}

	return nil
}

// UpdatePurchaseOrderByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdatePurchaseOrderByIDReply.ValidateAll() if
// the designated constraints aren't met.
type UpdatePurchaseOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePurchaseOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePurchaseOrderByIDReplyMultiError) AllErrors() []error { return m }

// UpdatePurchaseOrderByIDReplyValidationError is the validation error returned
// by UpdatePurchaseOrderByIDReply.Validate if the designated constraints
// aren't met.
type UpdatePurchaseOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePurchaseOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePurchaseOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePurchaseOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePurchaseOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePurchaseOrderByIDReplyValidationError) ErrorName() string {
	return "UpdatePurchaseOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePurchaseOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePurchaseOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePurchaseOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePurchaseOrderByIDReplyValidationError{}

// Validate checks the field values on PurchaseOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PurchaseOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseOrder with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PurchaseOrderMultiError, or
// nil if none found.
func (m *PurchaseOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SupplierID

	// no validation rules for TotalAmount

	// no validation rules for Status

	// no validation rules for ExpectedDate

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return PurchaseOrderMultiError(errors)
	}

	return nil
}

// PurchaseOrderMultiError is an error wrapping multiple validation errors
// returned by PurchaseOrder.ValidateAll() if the designated constraints
// aren't met.
type PurchaseOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseOrderMultiError) AllErrors() []error { return m }

// PurchaseOrderValidationError is the validation error returned by
// PurchaseOrder.Validate if the designated constraints aren't met.
type PurchaseOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseOrderValidationError) ErrorName() string { return "PurchaseOrderValidationError" }

// Error satisfies the builtin error interface
func (e PurchaseOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseOrderValidationError{}

// Validate checks the field values on GetPurchaseOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderByIDRequestMultiError, or nil if none found.
func (m *GetPurchaseOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetPurchaseOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPurchaseOrderByIDRequestMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetPurchaseOrderByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetPurchaseOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderByIDRequestMultiError) AllErrors() []error { return m }

// GetPurchaseOrderByIDRequestValidationError is the validation error returned
// by GetPurchaseOrderByIDRequest.Validate if the designated constraints
// aren't met.
type GetPurchaseOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderByIDRequestValidationError) ErrorName() string {
	return "GetPurchaseOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderByIDRequestValidationError{}

// Validate checks the field values on GetPurchaseOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPurchaseOrderByIDReplyMultiError, or nil if none found.
func (m *GetPurchaseOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPurchaseOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPurchaseOrderByIDReplyValidationError{
					field:  "PurchaseOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPurchaseOrderByIDReplyValidationError{
					field:  "PurchaseOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPurchaseOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPurchaseOrderByIDReplyValidationError{
				field:  "PurchaseOrder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPurchaseOrderByIDReplyMultiError(errors)
	}

	return nil
}

// GetPurchaseOrderByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetPurchaseOrderByIDReply.ValidateAll() if the
// designated constraints aren't met.
type GetPurchaseOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseOrderByIDReplyMultiError) AllErrors() []error { return m }

// GetPurchaseOrderByIDReplyValidationError is the validation error returned by
// GetPurchaseOrderByIDReply.Validate if the designated constraints aren't met.
type GetPurchaseOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseOrderByIDReplyValidationError) ErrorName() string {
	return "GetPurchaseOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseOrderByIDReplyValidationError{}

// Validate checks the field values on ListPurchaseOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPurchaseOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPurchaseOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPurchaseOrderRequestMultiError, or nil if none found.
func (m *ListPurchaseOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPurchaseOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPurchaseOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPurchaseOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPurchaseOrderRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPurchaseOrderRequestMultiError(errors)
	}

	return nil
}

// ListPurchaseOrderRequestMultiError is an error wrapping multiple validation
// errors returned by ListPurchaseOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPurchaseOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPurchaseOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPurchaseOrderRequestMultiError) AllErrors() []error { return m }

// ListPurchaseOrderRequestValidationError is the validation error returned by
// ListPurchaseOrderRequest.Validate if the designated constraints aren't met.
type ListPurchaseOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPurchaseOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPurchaseOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPurchaseOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPurchaseOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPurchaseOrderRequestValidationError) ErrorName() string {
	return "ListPurchaseOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPurchaseOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPurchaseOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPurchaseOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPurchaseOrderRequestValidationError{}

// Validate checks the field values on ListPurchaseOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPurchaseOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPurchaseOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPurchaseOrderReplyMultiError, or nil if none found.
func (m *ListPurchaseOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPurchaseOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetPurchaseOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPurchaseOrderReplyValidationError{
						field:  fmt.Sprintf("PurchaseOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPurchaseOrderReplyValidationError{
						field:  fmt.Sprintf("PurchaseOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPurchaseOrderReplyValidationError{
					field:  fmt.Sprintf("PurchaseOrders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPurchaseOrderReplyMultiError(errors)
	}

	return nil
}

// ListPurchaseOrderReplyMultiError is an error wrapping multiple validation
// errors returned by ListPurchaseOrderReply.ValidateAll() if the designated
// constraints aren't met.
type ListPurchaseOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPurchaseOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPurchaseOrderReplyMultiError) AllErrors() []error { return m }

// ListPurchaseOrderReplyValidationError is the validation error returned by
// ListPurchaseOrderReply.Validate if the designated constraints aren't met.
type ListPurchaseOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPurchaseOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPurchaseOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPurchaseOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPurchaseOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPurchaseOrderReplyValidationError) ErrorName() string {
	return "ListPurchaseOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPurchaseOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPurchaseOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPurchaseOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPurchaseOrderReplyValidationError{}
