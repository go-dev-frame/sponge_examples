syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service product {
  // create product
  rpc Create(CreateProductRequest) returns (CreateProductReply) {
    option (google.api.http) = {
      post: "/api/v1/product"
      body: "*"
    };
  }

  // delete product by id
  rpc DeleteByID(DeleteProductByIDRequest) returns (DeleteProductByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/product/{id}"
    };
  }

  // update product by id
  rpc UpdateByID(UpdateProductByIDRequest) returns (UpdateProductByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/product/{id}"
      body: "*"
    };
  }

  // get product by id
  rpc GetByID(GetProductByIDRequest) returns (GetProductByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/product/{id}"
    };
  }

  // list of product by query parameters
  rpc List(ListProductRequest) returns (ListProductReply) {
    option (google.api.http) = {
      post: "/api/v1/product/list"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/product/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getProduct?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateProductRequest {
	string name = 1;  // 产品名称
	uint32 categoryID = 2;  // 分类ID
	string brand = 3;  // 品牌
	string model = 4;  // 型号
	string spec = 5;  // 规格
	string description = 6;  // 详细描述
	string price = 7;  // 价格
	uint32 warrantyMonths = 8;  // 保修月数
	string serviceTerms = 9;  // 售后服务条款
}

message CreateProductReply {
  uint64 id = 1;
}

message DeleteProductByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeleteProductByIDReply {

}

message UpdateProductByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // 产品ID
	string name = 2;  // 产品名称
	uint32 categoryID = 3;  // 分类ID
	string brand = 4;  // 品牌
	string model = 5;  // 型号
	string spec = 6;  // 规格
	string description = 7;  // 详细描述
	string price = 8;  // 价格
	uint32 warrantyMonths = 9;  // 保修月数
	string serviceTerms = 10;  // 售后服务条款
}

message UpdateProductByIDReply {

}

message Product {
	uint64 id = 1;  // 产品ID
	string name = 2;  // 产品名称
	uint32 categoryID = 3;  // 分类ID
	string brand = 4;  // 品牌
	string model = 5;  // 型号
	string spec = 6;  // 规格
	string description = 7;  // 详细描述
	string price = 8;  // 价格
	uint32 warrantyMonths = 9;  // 保修月数
	string serviceTerms = 10;  // 售后服务条款
	string createdAt = 11;  // 创建时间
	string updatedAt = 12;  // 更新时间
}

message GetProductByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetProductByIDReply {
  Product product = 1;
}

message ListProductRequest {
  api.types.Params params = 1;
}

message ListProductReply {
  int64 total = 1;
  repeated Product products = 2;
}


