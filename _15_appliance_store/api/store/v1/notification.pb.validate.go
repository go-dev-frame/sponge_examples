// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/notification.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotificationRequestMultiError, or nil if none found.
func (m *CreateNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Recipient

	// no validation rules for Content

	// no validation rules for SendStatus

	if len(errors) > 0 {
		return CreateNotificationRequestMultiError(errors)
	}

	return nil
}

// CreateNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateNotificationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotificationRequestMultiError) AllErrors() []error { return m }

// CreateNotificationRequestValidationError is the validation error returned by
// CreateNotificationRequest.Validate if the designated constraints aren't met.
type CreateNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotificationRequestValidationError) ErrorName() string {
	return "CreateNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotificationRequestValidationError{}

// Validate checks the field values on CreateNotificationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateNotificationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateNotificationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateNotificationReplyMultiError, or nil if none found.
func (m *CreateNotificationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateNotificationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateNotificationReplyMultiError(errors)
	}

	return nil
}

// CreateNotificationReplyMultiError is an error wrapping multiple validation
// errors returned by CreateNotificationReply.ValidateAll() if the designated
// constraints aren't met.
type CreateNotificationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateNotificationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateNotificationReplyMultiError) AllErrors() []error { return m }

// CreateNotificationReplyValidationError is the validation error returned by
// CreateNotificationReply.Validate if the designated constraints aren't met.
type CreateNotificationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateNotificationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateNotificationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateNotificationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateNotificationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateNotificationReplyValidationError) ErrorName() string {
	return "CreateNotificationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateNotificationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateNotificationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateNotificationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateNotificationReplyValidationError{}

// Validate checks the field values on DeleteNotificationByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotificationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotificationByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteNotificationByIDRequestMultiError, or nil if none found.
func (m *DeleteNotificationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotificationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteNotificationByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteNotificationByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteNotificationByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteNotificationByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteNotificationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotificationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotificationByIDRequestMultiError) AllErrors() []error { return m }

// DeleteNotificationByIDRequestValidationError is the validation error
// returned by DeleteNotificationByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteNotificationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotificationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotificationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotificationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotificationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotificationByIDRequestValidationError) ErrorName() string {
	return "DeleteNotificationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotificationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotificationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotificationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotificationByIDRequestValidationError{}

// Validate checks the field values on DeleteNotificationByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteNotificationByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteNotificationByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteNotificationByIDReplyMultiError, or nil if none found.
func (m *DeleteNotificationByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteNotificationByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteNotificationByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteNotificationByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteNotificationByIDReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteNotificationByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteNotificationByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteNotificationByIDReplyMultiError) AllErrors() []error { return m }

// DeleteNotificationByIDReplyValidationError is the validation error returned
// by DeleteNotificationByIDReply.Validate if the designated constraints
// aren't met.
type DeleteNotificationByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteNotificationByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteNotificationByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteNotificationByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteNotificationByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteNotificationByIDReplyValidationError) ErrorName() string {
	return "DeleteNotificationByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteNotificationByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteNotificationByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteNotificationByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteNotificationByIDReplyValidationError{}

// Validate checks the field values on UpdateNotificationByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotificationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateNotificationByIDRequestMultiError, or nil if none found.
func (m *UpdateNotificationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateNotificationByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Recipient

	// no validation rules for Content

	// no validation rules for SendStatus

	if len(errors) > 0 {
		return UpdateNotificationByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateNotificationByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateNotificationByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateNotificationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationByIDRequestMultiError) AllErrors() []error { return m }

// UpdateNotificationByIDRequestValidationError is the validation error
// returned by UpdateNotificationByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateNotificationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationByIDRequestValidationError) ErrorName() string {
	return "UpdateNotificationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationByIDRequestValidationError{}

// Validate checks the field values on UpdateNotificationByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateNotificationByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateNotificationByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateNotificationByIDReplyMultiError, or nil if none found.
func (m *UpdateNotificationByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateNotificationByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateNotificationByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateNotificationByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateNotificationByIDReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateNotificationByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateNotificationByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateNotificationByIDReplyMultiError) AllErrors() []error { return m }

// UpdateNotificationByIDReplyValidationError is the validation error returned
// by UpdateNotificationByIDReply.Validate if the designated constraints
// aren't met.
type UpdateNotificationByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationByIDReplyValidationError) ErrorName() string {
	return "UpdateNotificationByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationByIDReplyValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Recipient

	// no validation rules for Content

	// no validation rules for SendStatus

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on GetNotificationByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationByIDRequestMultiError, or nil if none found.
func (m *GetNotificationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetNotificationByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetNotificationByIDRequestMultiError(errors)
	}

	return nil
}

// GetNotificationByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetNotificationByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNotificationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationByIDRequestMultiError) AllErrors() []error { return m }

// GetNotificationByIDRequestValidationError is the validation error returned
// by GetNotificationByIDRequest.Validate if the designated constraints aren't met.
type GetNotificationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationByIDRequestValidationError) ErrorName() string {
	return "GetNotificationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationByIDRequestValidationError{}

// Validate checks the field values on GetNotificationByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNotificationByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNotificationByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNotificationByIDReplyMultiError, or nil if none found.
func (m *GetNotificationByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNotificationByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNotificationByIDReplyValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNotificationByIDReplyValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotificationByIDReplyValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNotificationByIDReplyMultiError(errors)
	}

	return nil
}

// GetNotificationByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetNotificationByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetNotificationByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNotificationByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNotificationByIDReplyMultiError) AllErrors() []error { return m }

// GetNotificationByIDReplyValidationError is the validation error returned by
// GetNotificationByIDReply.Validate if the designated constraints aren't met.
type GetNotificationByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationByIDReplyValidationError) ErrorName() string {
	return "GetNotificationByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationByIDReplyValidationError{}

// Validate checks the field values on ListNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotificationRequestMultiError, or nil if none found.
func (m *ListNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListNotificationRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListNotificationRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListNotificationRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListNotificationRequestMultiError(errors)
	}

	return nil
}

// ListNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by ListNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotificationRequestMultiError) AllErrors() []error { return m }

// ListNotificationRequestValidationError is the validation error returned by
// ListNotificationRequest.Validate if the designated constraints aren't met.
type ListNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotificationRequestValidationError) ErrorName() string {
	return "ListNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotificationRequestValidationError{}

// Validate checks the field values on ListNotificationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListNotificationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListNotificationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListNotificationReplyMultiError, or nil if none found.
func (m *ListNotificationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListNotificationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListNotificationReplyValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListNotificationReplyValidationError{
						field:  fmt.Sprintf("Notifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListNotificationReplyValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListNotificationReplyMultiError(errors)
	}

	return nil
}

// ListNotificationReplyMultiError is an error wrapping multiple validation
// errors returned by ListNotificationReply.ValidateAll() if the designated
// constraints aren't met.
type ListNotificationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListNotificationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListNotificationReplyMultiError) AllErrors() []error { return m }

// ListNotificationReplyValidationError is the validation error returned by
// ListNotificationReply.Validate if the designated constraints aren't met.
type ListNotificationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListNotificationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListNotificationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListNotificationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListNotificationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListNotificationReplyValidationError) ErrorName() string {
	return "ListNotificationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListNotificationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListNotificationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListNotificationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListNotificationReplyValidationError{}

// Validate checks the field values on SendNotificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationRequestMultiError, or nil if none found.
func (m *SendNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Channel

	// no validation rules for Recipient

	// no validation rules for TemplateID

	// no validation rules for Params

	if len(errors) > 0 {
		return SendNotificationRequestMultiError(errors)
	}

	return nil
}

// SendNotificationRequestMultiError is an error wrapping multiple validation
// errors returned by SendNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationRequestMultiError) AllErrors() []error { return m }

// SendNotificationRequestValidationError is the validation error returned by
// SendNotificationRequest.Validate if the designated constraints aren't met.
type SendNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationRequestValidationError) ErrorName() string {
	return "SendNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationRequestValidationError{}

// Validate checks the field values on SendNotificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendNotificationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendNotificationResponseMultiError, or nil if none found.
func (m *SendNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageID

	// no validation rules for SendTime

	if len(errors) > 0 {
		return SendNotificationResponseMultiError(errors)
	}

	return nil
}

// SendNotificationResponseMultiError is an error wrapping multiple validation
// errors returned by SendNotificationResponse.ValidateAll() if the designated
// constraints aren't met.
type SendNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendNotificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendNotificationResponseMultiError) AllErrors() []error { return m }

// SendNotificationResponseValidationError is the validation error returned by
// SendNotificationResponse.Validate if the designated constraints aren't met.
type SendNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendNotificationResponseValidationError) ErrorName() string {
	return "SendNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendNotificationResponseValidationError{}
