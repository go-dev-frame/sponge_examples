// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/supplier.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSupplierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSupplierRequestMultiError, or nil if none found.
func (m *CreateSupplierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSupplierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for ContactPerson

	// no validation rules for Phone

	// no validation rules for PaymentTerms

	if len(errors) > 0 {
		return CreateSupplierRequestMultiError(errors)
	}

	return nil
}

// CreateSupplierRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSupplierRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSupplierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSupplierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSupplierRequestMultiError) AllErrors() []error { return m }

// CreateSupplierRequestValidationError is the validation error returned by
// CreateSupplierRequest.Validate if the designated constraints aren't met.
type CreateSupplierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSupplierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSupplierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSupplierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSupplierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSupplierRequestValidationError) ErrorName() string {
	return "CreateSupplierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSupplierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSupplierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSupplierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSupplierRequestValidationError{}

// Validate checks the field values on CreateSupplierReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSupplierReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSupplierReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSupplierReplyMultiError, or nil if none found.
func (m *CreateSupplierReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSupplierReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSupplierReplyMultiError(errors)
	}

	return nil
}

// CreateSupplierReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSupplierReply.ValidateAll() if the designated
// constraints aren't met.
type CreateSupplierReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSupplierReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSupplierReplyMultiError) AllErrors() []error { return m }

// CreateSupplierReplyValidationError is the validation error returned by
// CreateSupplierReply.Validate if the designated constraints aren't met.
type CreateSupplierReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSupplierReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSupplierReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSupplierReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSupplierReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSupplierReplyValidationError) ErrorName() string {
	return "CreateSupplierReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSupplierReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSupplierReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSupplierReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSupplierReplyValidationError{}

// Validate checks the field values on DeleteSupplierByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSupplierByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSupplierByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSupplierByIDRequestMultiError, or nil if none found.
func (m *DeleteSupplierByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSupplierByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteSupplierByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSupplierByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteSupplierByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSupplierByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteSupplierByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSupplierByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSupplierByIDRequestMultiError) AllErrors() []error { return m }

// DeleteSupplierByIDRequestValidationError is the validation error returned by
// DeleteSupplierByIDRequest.Validate if the designated constraints aren't met.
type DeleteSupplierByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSupplierByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSupplierByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSupplierByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSupplierByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSupplierByIDRequestValidationError) ErrorName() string {
	return "DeleteSupplierByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSupplierByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSupplierByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSupplierByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSupplierByIDRequestValidationError{}

// Validate checks the field values on DeleteSupplierByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSupplierByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSupplierByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSupplierByIDReplyMultiError, or nil if none found.
func (m *DeleteSupplierByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSupplierByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSupplierByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteSupplierByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteSupplierByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteSupplierByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSupplierByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSupplierByIDReplyMultiError) AllErrors() []error { return m }

// DeleteSupplierByIDReplyValidationError is the validation error returned by
// DeleteSupplierByIDReply.Validate if the designated constraints aren't met.
type DeleteSupplierByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSupplierByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSupplierByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSupplierByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSupplierByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSupplierByIDReplyValidationError) ErrorName() string {
	return "DeleteSupplierByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSupplierByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSupplierByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSupplierByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSupplierByIDReplyValidationError{}

// Validate checks the field values on UpdateSupplierByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSupplierByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSupplierByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSupplierByIDRequestMultiError, or nil if none found.
func (m *UpdateSupplierByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSupplierByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateSupplierByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for ContactPerson

	// no validation rules for Phone

	// no validation rules for PaymentTerms

	if len(errors) > 0 {
		return UpdateSupplierByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateSupplierByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSupplierByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateSupplierByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSupplierByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSupplierByIDRequestMultiError) AllErrors() []error { return m }

// UpdateSupplierByIDRequestValidationError is the validation error returned by
// UpdateSupplierByIDRequest.Validate if the designated constraints aren't met.
type UpdateSupplierByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSupplierByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSupplierByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSupplierByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSupplierByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSupplierByIDRequestValidationError) ErrorName() string {
	return "UpdateSupplierByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSupplierByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSupplierByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSupplierByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSupplierByIDRequestValidationError{}

// Validate checks the field values on UpdateSupplierByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSupplierByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSupplierByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSupplierByIDReplyMultiError, or nil if none found.
func (m *UpdateSupplierByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSupplierByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSupplierByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateSupplierByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateSupplierByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateSupplierByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSupplierByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSupplierByIDReplyMultiError) AllErrors() []error { return m }

// UpdateSupplierByIDReplyValidationError is the validation error returned by
// UpdateSupplierByIDReply.Validate if the designated constraints aren't met.
type UpdateSupplierByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSupplierByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSupplierByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSupplierByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSupplierByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSupplierByIDReplyValidationError) ErrorName() string {
	return "UpdateSupplierByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSupplierByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSupplierByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSupplierByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSupplierByIDReplyValidationError{}

// Validate checks the field values on Supplier with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Supplier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Supplier with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SupplierMultiError, or nil
// if none found.
func (m *Supplier) ValidateAll() error {
	return m.validate(true)
}

func (m *Supplier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ContactPerson

	// no validation rules for Phone

	// no validation rules for PaymentTerms

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SupplierMultiError(errors)
	}

	return nil
}

// SupplierMultiError is an error wrapping multiple validation errors returned
// by Supplier.ValidateAll() if the designated constraints aren't met.
type SupplierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SupplierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SupplierMultiError) AllErrors() []error { return m }

// SupplierValidationError is the validation error returned by
// Supplier.Validate if the designated constraints aren't met.
type SupplierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SupplierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SupplierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SupplierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SupplierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SupplierValidationError) ErrorName() string { return "SupplierValidationError" }

// Error satisfies the builtin error interface
func (e SupplierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSupplier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SupplierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SupplierValidationError{}

// Validate checks the field values on GetSupplierByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupplierByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupplierByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupplierByIDRequestMultiError, or nil if none found.
func (m *GetSupplierByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupplierByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetSupplierByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSupplierByIDRequestMultiError(errors)
	}

	return nil
}

// GetSupplierByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetSupplierByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSupplierByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupplierByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupplierByIDRequestMultiError) AllErrors() []error { return m }

// GetSupplierByIDRequestValidationError is the validation error returned by
// GetSupplierByIDRequest.Validate if the designated constraints aren't met.
type GetSupplierByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupplierByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupplierByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupplierByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupplierByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupplierByIDRequestValidationError) ErrorName() string {
	return "GetSupplierByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupplierByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupplierByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupplierByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupplierByIDRequestValidationError{}

// Validate checks the field values on GetSupplierByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSupplierByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSupplierByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSupplierByIDReplyMultiError, or nil if none found.
func (m *GetSupplierByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSupplierByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSupplier()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSupplierByIDReplyValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSupplierByIDReplyValidationError{
					field:  "Supplier",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSupplier()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSupplierByIDReplyValidationError{
				field:  "Supplier",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSupplierByIDReplyMultiError(errors)
	}

	return nil
}

// GetSupplierByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetSupplierByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetSupplierByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSupplierByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSupplierByIDReplyMultiError) AllErrors() []error { return m }

// GetSupplierByIDReplyValidationError is the validation error returned by
// GetSupplierByIDReply.Validate if the designated constraints aren't met.
type GetSupplierByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupplierByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupplierByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupplierByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupplierByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupplierByIDReplyValidationError) ErrorName() string {
	return "GetSupplierByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupplierByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupplierByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupplierByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupplierByIDReplyValidationError{}

// Validate checks the field values on ListSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSupplierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSupplierRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSupplierRequestMultiError, or nil if none found.
func (m *ListSupplierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSupplierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSupplierRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSupplierRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSupplierRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSupplierRequestMultiError(errors)
	}

	return nil
}

// ListSupplierRequestMultiError is an error wrapping multiple validation
// errors returned by ListSupplierRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSupplierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSupplierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSupplierRequestMultiError) AllErrors() []error { return m }

// ListSupplierRequestValidationError is the validation error returned by
// ListSupplierRequest.Validate if the designated constraints aren't met.
type ListSupplierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSupplierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSupplierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSupplierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSupplierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSupplierRequestValidationError) ErrorName() string {
	return "ListSupplierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSupplierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSupplierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSupplierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSupplierRequestValidationError{}

// Validate checks the field values on ListSupplierReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSupplierReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSupplierReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSupplierReplyMultiError, or nil if none found.
func (m *ListSupplierReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSupplierReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetSuppliers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSupplierReplyValidationError{
						field:  fmt.Sprintf("Suppliers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSupplierReplyValidationError{
						field:  fmt.Sprintf("Suppliers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSupplierReplyValidationError{
					field:  fmt.Sprintf("Suppliers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSupplierReplyMultiError(errors)
	}

	return nil
}

// ListSupplierReplyMultiError is an error wrapping multiple validation errors
// returned by ListSupplierReply.ValidateAll() if the designated constraints
// aren't met.
type ListSupplierReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSupplierReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSupplierReplyMultiError) AllErrors() []error { return m }

// ListSupplierReplyValidationError is the validation error returned by
// ListSupplierReply.Validate if the designated constraints aren't met.
type ListSupplierReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSupplierReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSupplierReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSupplierReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSupplierReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSupplierReplyValidationError) ErrorName() string {
	return "ListSupplierReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSupplierReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSupplierReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSupplierReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSupplierReplyValidationError{}
