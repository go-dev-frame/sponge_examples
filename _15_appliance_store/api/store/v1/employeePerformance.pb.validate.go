// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/employeePerformance.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateEmployeePerformanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateEmployeePerformanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmployeePerformanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEmployeePerformanceRequestMultiError, or nil if none found.
func (m *CreateEmployeePerformanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmployeePerformanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmployeeID

	// no validation rules for Month

	// no validation rules for SalesAmount

	// no validation rules for Commission

	if len(errors) > 0 {
		return CreateEmployeePerformanceRequestMultiError(errors)
	}

	return nil
}

// CreateEmployeePerformanceRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateEmployeePerformanceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEmployeePerformanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmployeePerformanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmployeePerformanceRequestMultiError) AllErrors() []error { return m }

// CreateEmployeePerformanceRequestValidationError is the validation error
// returned by CreateEmployeePerformanceRequest.Validate if the designated
// constraints aren't met.
type CreateEmployeePerformanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmployeePerformanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmployeePerformanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmployeePerformanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmployeePerformanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmployeePerformanceRequestValidationError) ErrorName() string {
	return "CreateEmployeePerformanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmployeePerformanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmployeePerformanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmployeePerformanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmployeePerformanceRequestValidationError{}

// Validate checks the field values on CreateEmployeePerformanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEmployeePerformanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEmployeePerformanceReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateEmployeePerformanceReplyMultiError, or nil if none found.
func (m *CreateEmployeePerformanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEmployeePerformanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEmployeePerformanceReplyMultiError(errors)
	}

	return nil
}

// CreateEmployeePerformanceReplyMultiError is an error wrapping multiple
// validation errors returned by CreateEmployeePerformanceReply.ValidateAll()
// if the designated constraints aren't met.
type CreateEmployeePerformanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEmployeePerformanceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEmployeePerformanceReplyMultiError) AllErrors() []error { return m }

// CreateEmployeePerformanceReplyValidationError is the validation error
// returned by CreateEmployeePerformanceReply.Validate if the designated
// constraints aren't met.
type CreateEmployeePerformanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEmployeePerformanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEmployeePerformanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEmployeePerformanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEmployeePerformanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEmployeePerformanceReplyValidationError) ErrorName() string {
	return "CreateEmployeePerformanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEmployeePerformanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEmployeePerformanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEmployeePerformanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEmployeePerformanceReplyValidationError{}

// Validate checks the field values on DeleteEmployeePerformanceByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteEmployeePerformanceByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmployeePerformanceByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEmployeePerformanceByIDRequestMultiError, or nil if none found.
func (m *DeleteEmployeePerformanceByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmployeePerformanceByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteEmployeePerformanceByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEmployeePerformanceByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteEmployeePerformanceByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEmployeePerformanceByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteEmployeePerformanceByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmployeePerformanceByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmployeePerformanceByIDRequestMultiError) AllErrors() []error { return m }

// DeleteEmployeePerformanceByIDRequestValidationError is the validation error
// returned by DeleteEmployeePerformanceByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteEmployeePerformanceByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeePerformanceByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeePerformanceByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeePerformanceByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeePerformanceByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeePerformanceByIDRequestValidationError) ErrorName() string {
	return "DeleteEmployeePerformanceByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeePerformanceByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeePerformanceByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeePerformanceByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeePerformanceByIDRequestValidationError{}

// Validate checks the field values on DeleteEmployeePerformanceByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteEmployeePerformanceByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteEmployeePerformanceByIDReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteEmployeePerformanceByIDReplyMultiError, or nil if none found.
func (m *DeleteEmployeePerformanceByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteEmployeePerformanceByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteEmployeePerformanceByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteEmployeePerformanceByIDReplyMultiError is an error wrapping multiple
// validation errors returned by
// DeleteEmployeePerformanceByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteEmployeePerformanceByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEmployeePerformanceByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEmployeePerformanceByIDReplyMultiError) AllErrors() []error { return m }

// DeleteEmployeePerformanceByIDReplyValidationError is the validation error
// returned by DeleteEmployeePerformanceByIDReply.Validate if the designated
// constraints aren't met.
type DeleteEmployeePerformanceByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEmployeePerformanceByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEmployeePerformanceByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEmployeePerformanceByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEmployeePerformanceByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEmployeePerformanceByIDReplyValidationError) ErrorName() string {
	return "DeleteEmployeePerformanceByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEmployeePerformanceByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEmployeePerformanceByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEmployeePerformanceByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEmployeePerformanceByIDReplyValidationError{}

// Validate checks the field values on UpdateEmployeePerformanceByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateEmployeePerformanceByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeePerformanceByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEmployeePerformanceByIDRequestMultiError, or nil if none found.
func (m *UpdateEmployeePerformanceByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeePerformanceByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateEmployeePerformanceByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for EmployeeID

	// no validation rules for Month

	// no validation rules for SalesAmount

	// no validation rules for Commission

	if len(errors) > 0 {
		return UpdateEmployeePerformanceByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateEmployeePerformanceByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEmployeePerformanceByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmployeePerformanceByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeePerformanceByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeePerformanceByIDRequestMultiError) AllErrors() []error { return m }

// UpdateEmployeePerformanceByIDRequestValidationError is the validation error
// returned by UpdateEmployeePerformanceByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateEmployeePerformanceByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeePerformanceByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeePerformanceByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeePerformanceByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeePerformanceByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeePerformanceByIDRequestValidationError) ErrorName() string {
	return "UpdateEmployeePerformanceByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeePerformanceByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeePerformanceByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeePerformanceByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeePerformanceByIDRequestValidationError{}

// Validate checks the field values on UpdateEmployeePerformanceByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateEmployeePerformanceByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateEmployeePerformanceByIDReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateEmployeePerformanceByIDReplyMultiError, or nil if none found.
func (m *UpdateEmployeePerformanceByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateEmployeePerformanceByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateEmployeePerformanceByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateEmployeePerformanceByIDReplyMultiError is an error wrapping multiple
// validation errors returned by
// UpdateEmployeePerformanceByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateEmployeePerformanceByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEmployeePerformanceByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEmployeePerformanceByIDReplyMultiError) AllErrors() []error { return m }

// UpdateEmployeePerformanceByIDReplyValidationError is the validation error
// returned by UpdateEmployeePerformanceByIDReply.Validate if the designated
// constraints aren't met.
type UpdateEmployeePerformanceByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEmployeePerformanceByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEmployeePerformanceByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEmployeePerformanceByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEmployeePerformanceByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEmployeePerformanceByIDReplyValidationError) ErrorName() string {
	return "UpdateEmployeePerformanceByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEmployeePerformanceByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEmployeePerformanceByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEmployeePerformanceByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEmployeePerformanceByIDReplyValidationError{}

// Validate checks the field values on EmployeePerformance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EmployeePerformance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmployeePerformance with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmployeePerformanceMultiError, or nil if none found.
func (m *EmployeePerformance) ValidateAll() error {
	return m.validate(true)
}

func (m *EmployeePerformance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for EmployeeID

	// no validation rules for Month

	// no validation rules for SalesAmount

	// no validation rules for Commission

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return EmployeePerformanceMultiError(errors)
	}

	return nil
}

// EmployeePerformanceMultiError is an error wrapping multiple validation
// errors returned by EmployeePerformance.ValidateAll() if the designated
// constraints aren't met.
type EmployeePerformanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmployeePerformanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmployeePerformanceMultiError) AllErrors() []error { return m }

// EmployeePerformanceValidationError is the validation error returned by
// EmployeePerformance.Validate if the designated constraints aren't met.
type EmployeePerformanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmployeePerformanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmployeePerformanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmployeePerformanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmployeePerformanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmployeePerformanceValidationError) ErrorName() string {
	return "EmployeePerformanceValidationError"
}

// Error satisfies the builtin error interface
func (e EmployeePerformanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmployeePerformance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmployeePerformanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmployeePerformanceValidationError{}

// Validate checks the field values on GetEmployeePerformanceByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetEmployeePerformanceByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeePerformanceByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetEmployeePerformanceByIDRequestMultiError, or nil if none found.
func (m *GetEmployeePerformanceByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeePerformanceByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetEmployeePerformanceByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEmployeePerformanceByIDRequestMultiError(errors)
	}

	return nil
}

// GetEmployeePerformanceByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetEmployeePerformanceByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEmployeePerformanceByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeePerformanceByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeePerformanceByIDRequestMultiError) AllErrors() []error { return m }

// GetEmployeePerformanceByIDRequestValidationError is the validation error
// returned by GetEmployeePerformanceByIDRequest.Validate if the designated
// constraints aren't met.
type GetEmployeePerformanceByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeePerformanceByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeePerformanceByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeePerformanceByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeePerformanceByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeePerformanceByIDRequestValidationError) ErrorName() string {
	return "GetEmployeePerformanceByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeePerformanceByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeePerformanceByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeePerformanceByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeePerformanceByIDRequestValidationError{}

// Validate checks the field values on GetEmployeePerformanceByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEmployeePerformanceByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmployeePerformanceByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEmployeePerformanceByIDReplyMultiError, or nil if none found.
func (m *GetEmployeePerformanceByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmployeePerformanceByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEmployeePerformance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEmployeePerformanceByIDReplyValidationError{
					field:  "EmployeePerformance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEmployeePerformanceByIDReplyValidationError{
					field:  "EmployeePerformance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEmployeePerformance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEmployeePerformanceByIDReplyValidationError{
				field:  "EmployeePerformance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEmployeePerformanceByIDReplyMultiError(errors)
	}

	return nil
}

// GetEmployeePerformanceByIDReplyMultiError is an error wrapping multiple
// validation errors returned by GetEmployeePerformanceByIDReply.ValidateAll()
// if the designated constraints aren't met.
type GetEmployeePerformanceByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmployeePerformanceByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmployeePerformanceByIDReplyMultiError) AllErrors() []error { return m }

// GetEmployeePerformanceByIDReplyValidationError is the validation error
// returned by GetEmployeePerformanceByIDReply.Validate if the designated
// constraints aren't met.
type GetEmployeePerformanceByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmployeePerformanceByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmployeePerformanceByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmployeePerformanceByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmployeePerformanceByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmployeePerformanceByIDReplyValidationError) ErrorName() string {
	return "GetEmployeePerformanceByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmployeePerformanceByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmployeePerformanceByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmployeePerformanceByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmployeePerformanceByIDReplyValidationError{}

// Validate checks the field values on ListEmployeePerformanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeePerformanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeePerformanceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListEmployeePerformanceRequestMultiError, or nil if none found.
func (m *ListEmployeePerformanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeePerformanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListEmployeePerformanceRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListEmployeePerformanceRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEmployeePerformanceRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListEmployeePerformanceRequestMultiError(errors)
	}

	return nil
}

// ListEmployeePerformanceRequestMultiError is an error wrapping multiple
// validation errors returned by ListEmployeePerformanceRequest.ValidateAll()
// if the designated constraints aren't met.
type ListEmployeePerformanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeePerformanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeePerformanceRequestMultiError) AllErrors() []error { return m }

// ListEmployeePerformanceRequestValidationError is the validation error
// returned by ListEmployeePerformanceRequest.Validate if the designated
// constraints aren't met.
type ListEmployeePerformanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeePerformanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeePerformanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeePerformanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeePerformanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeePerformanceRequestValidationError) ErrorName() string {
	return "ListEmployeePerformanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeePerformanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeePerformanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeePerformanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeePerformanceRequestValidationError{}

// Validate checks the field values on ListEmployeePerformanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListEmployeePerformanceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListEmployeePerformanceReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListEmployeePerformanceReplyMultiError, or nil if none found.
func (m *ListEmployeePerformanceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListEmployeePerformanceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetEmployeePerformances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListEmployeePerformanceReplyValidationError{
						field:  fmt.Sprintf("EmployeePerformances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListEmployeePerformanceReplyValidationError{
						field:  fmt.Sprintf("EmployeePerformances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEmployeePerformanceReplyValidationError{
					field:  fmt.Sprintf("EmployeePerformances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListEmployeePerformanceReplyMultiError(errors)
	}

	return nil
}

// ListEmployeePerformanceReplyMultiError is an error wrapping multiple
// validation errors returned by ListEmployeePerformanceReply.ValidateAll() if
// the designated constraints aren't met.
type ListEmployeePerformanceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEmployeePerformanceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEmployeePerformanceReplyMultiError) AllErrors() []error { return m }

// ListEmployeePerformanceReplyValidationError is the validation error returned
// by ListEmployeePerformanceReply.Validate if the designated constraints
// aren't met.
type ListEmployeePerformanceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEmployeePerformanceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEmployeePerformanceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEmployeePerformanceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEmployeePerformanceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEmployeePerformanceReplyValidationError) ErrorName() string {
	return "ListEmployeePerformanceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListEmployeePerformanceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEmployeePerformanceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEmployeePerformanceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEmployeePerformanceReplyValidationError{}

// Validate checks the field values on CalculateSalesCommissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateSalesCommissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateSalesCommissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CalculateSalesCommissionRequestMultiError, or nil if none found.
func (m *CalculateSalesCommissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateSalesCommissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmployeeID

	if !_CalculateSalesCommissionRequest_Month_Pattern.MatchString(m.GetMonth()) {
		err := CalculateSalesCommissionRequestValidationError{
			field:  "Month",
			reason: "value does not match regex pattern \"^\\\\d{4}-\\\\d{2}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CalculateSalesCommissionRequestMultiError(errors)
	}

	return nil
}

// CalculateSalesCommissionRequestMultiError is an error wrapping multiple
// validation errors returned by CalculateSalesCommissionRequest.ValidateAll()
// if the designated constraints aren't met.
type CalculateSalesCommissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateSalesCommissionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateSalesCommissionRequestMultiError) AllErrors() []error { return m }

// CalculateSalesCommissionRequestValidationError is the validation error
// returned by CalculateSalesCommissionRequest.Validate if the designated
// constraints aren't met.
type CalculateSalesCommissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateSalesCommissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateSalesCommissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateSalesCommissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateSalesCommissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateSalesCommissionRequestValidationError) ErrorName() string {
	return "CalculateSalesCommissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateSalesCommissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateSalesCommissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateSalesCommissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateSalesCommissionRequestValidationError{}

var _CalculateSalesCommissionRequest_Month_Pattern = regexp.MustCompile("^\\d{4}-\\d{2}$")

// Validate checks the field values on CalculateSalesCommissionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateSalesCommissionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateSalesCommissionReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CalculateSalesCommissionReplyMultiError, or nil if none found.
func (m *CalculateSalesCommissionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateSalesCommissionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSales

	// no validation rules for CommissionAmount

	// no validation rules for QualifiedOrders

	if len(errors) > 0 {
		return CalculateSalesCommissionReplyMultiError(errors)
	}

	return nil
}

// CalculateSalesCommissionReplyMultiError is an error wrapping multiple
// validation errors returned by CalculateSalesCommissionReply.ValidateAll()
// if the designated constraints aren't met.
type CalculateSalesCommissionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateSalesCommissionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateSalesCommissionReplyMultiError) AllErrors() []error { return m }

// CalculateSalesCommissionReplyValidationError is the validation error
// returned by CalculateSalesCommissionReply.Validate if the designated
// constraints aren't met.
type CalculateSalesCommissionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateSalesCommissionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateSalesCommissionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateSalesCommissionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateSalesCommissionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateSalesCommissionReplyValidationError) ErrorName() string {
	return "CalculateSalesCommissionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateSalesCommissionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateSalesCommissionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateSalesCommissionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateSalesCommissionReplyValidationError{}
