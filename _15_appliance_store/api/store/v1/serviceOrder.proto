syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service serviceOrder {
  // create serviceOrder
  rpc Create(CreateServiceOrderRequest) returns (CreateServiceOrderReply) {
    option (google.api.http) = {
      post: "/api/v1/serviceOrder"
      body: "*"
    };
  }

  // delete serviceOrder by id
  rpc DeleteByID(DeleteServiceOrderByIDRequest) returns (DeleteServiceOrderByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/serviceOrder/{id}"
    };
  }

  // update serviceOrder by id
  rpc UpdateByID(UpdateServiceOrderByIDRequest) returns (UpdateServiceOrderByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/serviceOrder/{id}"
      body: "*"
    };
  }

  // get serviceOrder by id
  rpc GetByID(GetServiceOrderByIDRequest) returns (GetServiceOrderByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/serviceOrder/{id}"
    };
  }

  // list of serviceOrder by query parameters
  rpc List(ListServiceOrderRequest) returns (ListServiceOrderReply) {
    option (google.api.http) = {
      post: "/api/v1/serviceOrder/list"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/serviceOrder/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getServiceOrder?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateServiceOrderRequest {
	uint32 customerID = 1;  // 客户ID
	uint32 productID = 2;  // 产品ID
	string faultDesc = 3;  // 故障描述
	int32 status = 4;  // 状态(0待处理/1维修中/2已完成/3已关闭)
	uint32 technicianID = 5;  // 维修人员ID
	string completionTime = 6;  // 完成时间
}

message CreateServiceOrderReply {
  string id = 1;
}

message DeleteServiceOrderByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message DeleteServiceOrderByIDReply {

}

message UpdateServiceOrderByIDRequest {
	string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];  // 工单号
	uint32 customerID = 2;  // 客户ID
	uint32 productID = 3;  // 产品ID
	string faultDesc = 4;  // 故障描述
	int32 status = 5;  // 状态(0待处理/1维修中/2已完成/3已关闭)
	uint32 technicianID = 6;  // 维修人员ID
	string completionTime = 7;  // 完成时间
}

message UpdateServiceOrderByIDReply {

}

message ServiceOrder {
	string id = 1;  // 工单号
	uint32 customerID = 2;  // 客户ID
	uint32 productID = 3;  // 产品ID
	string faultDesc = 4;  // 故障描述
	int32 status = 5;  // 状态(0待处理/1维修中/2已完成/3已关闭)
	uint32 technicianID = 6;  // 维修人员ID
	string completionTime = 7;  // 完成时间
	string createdAt = 8;  // 创建时间
	string updatedAt = 9;  // 更新时间
}

message GetServiceOrderByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message GetServiceOrderByIDReply {
  ServiceOrder serviceOrder = 1;
}

message ListServiceOrderRequest {
  api.types.Params params = 1;
}

message ListServiceOrderReply {
  int64 total = 1;
  repeated ServiceOrder serviceOrders = 2;
}


