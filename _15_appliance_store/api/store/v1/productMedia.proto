syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service productMedia {
  // create productMedia
  rpc Create(CreateProductMediaRequest) returns (CreateProductMediaReply) {
    option (google.api.http) = {
      post: "/api/v1/productMedia"
      body: "*"
    };
  }

  // delete productMedia by id
  rpc DeleteByID(DeleteProductMediaByIDRequest) returns (DeleteProductMediaByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/productMedia/{id}"
    };
  }

  // update productMedia by id
  rpc UpdateByID(UpdateProductMediaByIDRequest) returns (UpdateProductMediaByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/productMedia/{id}"
      body: "*"
    };
  }

  // get productMedia by id
  rpc GetByID(GetProductMediaByIDRequest) returns (GetProductMediaByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/productMedia/{id}"
    };
  }

  // list of productMedia by query parameters
  rpc List(ListProductMediaRequest) returns (ListProductMediaReply) {
    option (google.api.http) = {
      post: "/api/v1/productMedia/list"
      body: "*"
    };
  }

  // ---------------------------------

  // 上传多媒体文件
  rpc UploadMedia(stream UploadMediaRequest) returns (UploadMediaReply) {
    option (google.api.http) = {
      post: "/api/v1/productMedia/upload"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/productMedia/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getProductMedia?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateProductMediaRequest {
	uint32 productID = 1;  // 产品ID
	int32 type = 2;  // 类型(1图片/2视频/33D模型)
	string url = 3;  // 资源地址
	uint32 sortOrder = 4;  // 排序序号
}

message CreateProductMediaReply {
  uint64 id = 1;
}

message DeleteProductMediaByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeleteProductMediaByIDReply {

}

message UpdateProductMediaByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // 媒体ID
	uint32 productID = 2;  // 产品ID
	int32 type = 3;  // 类型(1图片/2视频/33D模型)
	string url = 4;  // 资源地址
	uint32 sortOrder = 5;  // 排序序号
}

message UpdateProductMediaByIDReply {

}

message ProductMedia {
	uint64 id = 1;  // 媒体ID
	uint32 productID = 2;  // 产品ID
	int32 type = 3;  // 类型(1图片/2视频/33D模型)
	string url = 4;  // 资源地址
	uint32 sortOrder = 5;  // 排序序号
	string createdAt = 6;  // 创建时间
	string updatedAt = 7;  // 更新时间
}

message GetProductMediaByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetProductMediaByIDReply {
  ProductMedia productMedia = 1;
}

message ListProductMediaRequest {
  api.types.Params params = 1;
}

message ListProductMediaReply {
  int64 total = 1;
  repeated ProductMedia productMedias = 2;
}

// ------------------------------------------

message UploadMediaRequest {
  oneof data {
    MediaMetadata metadata = 1;  // 文件元数据
    bytes chunk = 2;             // 文件分片内容
  }
  string productID = 3;         // 关联产品ID
}

message MediaMetadata {
  string filename = 1;   // 文件名
  string mimeType = 2;  // MIME类型
  int32 fileType = 3;   // 类型(1=图片 2=视频 3=3D模型)
}

message UploadMediaReply {
  string mediaURL = 1;  // 最终访问URL
}
