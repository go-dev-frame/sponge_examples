// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/financialTransaction.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateFinancialTransactionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateFinancialTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFinancialTransactionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateFinancialTransactionRequestMultiError, or nil if none found.
func (m *CreateFinancialTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFinancialTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Amount

	// no validation rules for RelatedID

	// no validation rules for TransactionTime

	// no validation rules for Operator

	// no validation rules for Remark

	if len(errors) > 0 {
		return CreateFinancialTransactionRequestMultiError(errors)
	}

	return nil
}

// CreateFinancialTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateFinancialTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateFinancialTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFinancialTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFinancialTransactionRequestMultiError) AllErrors() []error { return m }

// CreateFinancialTransactionRequestValidationError is the validation error
// returned by CreateFinancialTransactionRequest.Validate if the designated
// constraints aren't met.
type CreateFinancialTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFinancialTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFinancialTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFinancialTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFinancialTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFinancialTransactionRequestValidationError) ErrorName() string {
	return "CreateFinancialTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFinancialTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFinancialTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFinancialTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFinancialTransactionRequestValidationError{}

// Validate checks the field values on CreateFinancialTransactionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFinancialTransactionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFinancialTransactionReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateFinancialTransactionReplyMultiError, or nil if none found.
func (m *CreateFinancialTransactionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFinancialTransactionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateFinancialTransactionReplyMultiError(errors)
	}

	return nil
}

// CreateFinancialTransactionReplyMultiError is an error wrapping multiple
// validation errors returned by CreateFinancialTransactionReply.ValidateAll()
// if the designated constraints aren't met.
type CreateFinancialTransactionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFinancialTransactionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFinancialTransactionReplyMultiError) AllErrors() []error { return m }

// CreateFinancialTransactionReplyValidationError is the validation error
// returned by CreateFinancialTransactionReply.Validate if the designated
// constraints aren't met.
type CreateFinancialTransactionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFinancialTransactionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFinancialTransactionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFinancialTransactionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFinancialTransactionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFinancialTransactionReplyValidationError) ErrorName() string {
	return "CreateFinancialTransactionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFinancialTransactionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFinancialTransactionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFinancialTransactionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFinancialTransactionReplyValidationError{}

// Validate checks the field values on DeleteFinancialTransactionByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteFinancialTransactionByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFinancialTransactionByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteFinancialTransactionByIDRequestMultiError, or nil if none found.
func (m *DeleteFinancialTransactionByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFinancialTransactionByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteFinancialTransactionByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFinancialTransactionByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteFinancialTransactionByIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// DeleteFinancialTransactionByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFinancialTransactionByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFinancialTransactionByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFinancialTransactionByIDRequestMultiError) AllErrors() []error { return m }

// DeleteFinancialTransactionByIDRequestValidationError is the validation error
// returned by DeleteFinancialTransactionByIDRequest.Validate if the
// designated constraints aren't met.
type DeleteFinancialTransactionByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFinancialTransactionByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFinancialTransactionByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFinancialTransactionByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFinancialTransactionByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFinancialTransactionByIDRequestValidationError) ErrorName() string {
	return "DeleteFinancialTransactionByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFinancialTransactionByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFinancialTransactionByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFinancialTransactionByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFinancialTransactionByIDRequestValidationError{}

// Validate checks the field values on DeleteFinancialTransactionByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteFinancialTransactionByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFinancialTransactionByIDReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteFinancialTransactionByIDReplyMultiError, or nil if none found.
func (m *DeleteFinancialTransactionByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFinancialTransactionByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFinancialTransactionByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteFinancialTransactionByIDReplyMultiError is an error wrapping multiple
// validation errors returned by
// DeleteFinancialTransactionByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteFinancialTransactionByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFinancialTransactionByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFinancialTransactionByIDReplyMultiError) AllErrors() []error { return m }

// DeleteFinancialTransactionByIDReplyValidationError is the validation error
// returned by DeleteFinancialTransactionByIDReply.Validate if the designated
// constraints aren't met.
type DeleteFinancialTransactionByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFinancialTransactionByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFinancialTransactionByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFinancialTransactionByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFinancialTransactionByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFinancialTransactionByIDReplyValidationError) ErrorName() string {
	return "DeleteFinancialTransactionByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFinancialTransactionByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFinancialTransactionByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFinancialTransactionByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFinancialTransactionByIDReplyValidationError{}

// Validate checks the field values on UpdateFinancialTransactionByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateFinancialTransactionByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFinancialTransactionByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateFinancialTransactionByIDRequestMultiError, or nil if none found.
func (m *UpdateFinancialTransactionByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFinancialTransactionByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateFinancialTransactionByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	// no validation rules for Amount

	// no validation rules for RelatedID

	// no validation rules for TransactionTime

	// no validation rules for Operator

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateFinancialTransactionByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateFinancialTransactionByIDRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateFinancialTransactionByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFinancialTransactionByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFinancialTransactionByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFinancialTransactionByIDRequestMultiError) AllErrors() []error { return m }

// UpdateFinancialTransactionByIDRequestValidationError is the validation error
// returned by UpdateFinancialTransactionByIDRequest.Validate if the
// designated constraints aren't met.
type UpdateFinancialTransactionByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFinancialTransactionByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFinancialTransactionByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFinancialTransactionByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFinancialTransactionByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFinancialTransactionByIDRequestValidationError) ErrorName() string {
	return "UpdateFinancialTransactionByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFinancialTransactionByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFinancialTransactionByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFinancialTransactionByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFinancialTransactionByIDRequestValidationError{}

// Validate checks the field values on UpdateFinancialTransactionByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateFinancialTransactionByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFinancialTransactionByIDReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateFinancialTransactionByIDReplyMultiError, or nil if none found.
func (m *UpdateFinancialTransactionByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFinancialTransactionByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFinancialTransactionByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateFinancialTransactionByIDReplyMultiError is an error wrapping multiple
// validation errors returned by
// UpdateFinancialTransactionByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateFinancialTransactionByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFinancialTransactionByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFinancialTransactionByIDReplyMultiError) AllErrors() []error { return m }

// UpdateFinancialTransactionByIDReplyValidationError is the validation error
// returned by UpdateFinancialTransactionByIDReply.Validate if the designated
// constraints aren't met.
type UpdateFinancialTransactionByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFinancialTransactionByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFinancialTransactionByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFinancialTransactionByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFinancialTransactionByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFinancialTransactionByIDReplyValidationError) ErrorName() string {
	return "UpdateFinancialTransactionByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFinancialTransactionByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFinancialTransactionByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFinancialTransactionByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFinancialTransactionByIDReplyValidationError{}

// Validate checks the field values on FinancialTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinancialTransaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinancialTransaction with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinancialTransactionMultiError, or nil if none found.
func (m *FinancialTransaction) ValidateAll() error {
	return m.validate(true)
}

func (m *FinancialTransaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Amount

	// no validation rules for RelatedID

	// no validation rules for TransactionTime

	// no validation rules for Operator

	// no validation rules for Remark

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return FinancialTransactionMultiError(errors)
	}

	return nil
}

// FinancialTransactionMultiError is an error wrapping multiple validation
// errors returned by FinancialTransaction.ValidateAll() if the designated
// constraints aren't met.
type FinancialTransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinancialTransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinancialTransactionMultiError) AllErrors() []error { return m }

// FinancialTransactionValidationError is the validation error returned by
// FinancialTransaction.Validate if the designated constraints aren't met.
type FinancialTransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinancialTransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinancialTransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinancialTransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinancialTransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinancialTransactionValidationError) ErrorName() string {
	return "FinancialTransactionValidationError"
}

// Error satisfies the builtin error interface
func (e FinancialTransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinancialTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinancialTransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinancialTransactionValidationError{}

// Validate checks the field values on GetFinancialTransactionByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetFinancialTransactionByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialTransactionByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetFinancialTransactionByIDRequestMultiError, or nil if none found.
func (m *GetFinancialTransactionByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialTransactionByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetFinancialTransactionByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFinancialTransactionByIDRequestMultiError(errors)
	}

	return nil
}

// GetFinancialTransactionByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetFinancialTransactionByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFinancialTransactionByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialTransactionByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialTransactionByIDRequestMultiError) AllErrors() []error { return m }

// GetFinancialTransactionByIDRequestValidationError is the validation error
// returned by GetFinancialTransactionByIDRequest.Validate if the designated
// constraints aren't met.
type GetFinancialTransactionByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialTransactionByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialTransactionByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialTransactionByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialTransactionByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialTransactionByIDRequestValidationError) ErrorName() string {
	return "GetFinancialTransactionByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialTransactionByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialTransactionByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialTransactionByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialTransactionByIDRequestValidationError{}

// Validate checks the field values on GetFinancialTransactionByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetFinancialTransactionByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFinancialTransactionByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetFinancialTransactionByIDReplyMultiError, or nil if none found.
func (m *GetFinancialTransactionByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFinancialTransactionByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFinancialTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFinancialTransactionByIDReplyValidationError{
					field:  "FinancialTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFinancialTransactionByIDReplyValidationError{
					field:  "FinancialTransaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinancialTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFinancialTransactionByIDReplyValidationError{
				field:  "FinancialTransaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFinancialTransactionByIDReplyMultiError(errors)
	}

	return nil
}

// GetFinancialTransactionByIDReplyMultiError is an error wrapping multiple
// validation errors returned by
// GetFinancialTransactionByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetFinancialTransactionByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFinancialTransactionByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFinancialTransactionByIDReplyMultiError) AllErrors() []error { return m }

// GetFinancialTransactionByIDReplyValidationError is the validation error
// returned by GetFinancialTransactionByIDReply.Validate if the designated
// constraints aren't met.
type GetFinancialTransactionByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFinancialTransactionByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFinancialTransactionByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFinancialTransactionByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFinancialTransactionByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFinancialTransactionByIDReplyValidationError) ErrorName() string {
	return "GetFinancialTransactionByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetFinancialTransactionByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFinancialTransactionByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFinancialTransactionByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFinancialTransactionByIDReplyValidationError{}

// Validate checks the field values on ListFinancialTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFinancialTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFinancialTransactionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListFinancialTransactionRequestMultiError, or nil if none found.
func (m *ListFinancialTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFinancialTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFinancialTransactionRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFinancialTransactionRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFinancialTransactionRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListFinancialTransactionRequestMultiError(errors)
	}

	return nil
}

// ListFinancialTransactionRequestMultiError is an error wrapping multiple
// validation errors returned by ListFinancialTransactionRequest.ValidateAll()
// if the designated constraints aren't met.
type ListFinancialTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFinancialTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFinancialTransactionRequestMultiError) AllErrors() []error { return m }

// ListFinancialTransactionRequestValidationError is the validation error
// returned by ListFinancialTransactionRequest.Validate if the designated
// constraints aren't met.
type ListFinancialTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFinancialTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFinancialTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFinancialTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFinancialTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFinancialTransactionRequestValidationError) ErrorName() string {
	return "ListFinancialTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFinancialTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFinancialTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFinancialTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFinancialTransactionRequestValidationError{}

// Validate checks the field values on ListFinancialTransactionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFinancialTransactionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFinancialTransactionReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListFinancialTransactionReplyMultiError, or nil if none found.
func (m *ListFinancialTransactionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFinancialTransactionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetFinancialTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFinancialTransactionReplyValidationError{
						field:  fmt.Sprintf("FinancialTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFinancialTransactionReplyValidationError{
						field:  fmt.Sprintf("FinancialTransactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFinancialTransactionReplyValidationError{
					field:  fmt.Sprintf("FinancialTransactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFinancialTransactionReplyMultiError(errors)
	}

	return nil
}

// ListFinancialTransactionReplyMultiError is an error wrapping multiple
// validation errors returned by ListFinancialTransactionReply.ValidateAll()
// if the designated constraints aren't met.
type ListFinancialTransactionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFinancialTransactionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFinancialTransactionReplyMultiError) AllErrors() []error { return m }

// ListFinancialTransactionReplyValidationError is the validation error
// returned by ListFinancialTransactionReply.Validate if the designated
// constraints aren't met.
type ListFinancialTransactionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFinancialTransactionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFinancialTransactionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFinancialTransactionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFinancialTransactionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFinancialTransactionReplyValidationError) ErrorName() string {
	return "ListFinancialTransactionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListFinancialTransactionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFinancialTransactionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFinancialTransactionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFinancialTransactionReplyValidationError{}
