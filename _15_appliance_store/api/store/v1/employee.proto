syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service employee {
  // create employee
  rpc Create(CreateEmployeeRequest) returns (CreateEmployeeReply) {
    option (google.api.http) = {
      post: "/api/v1/employee"
      body: "*"
    };
  }

  // delete employee by id
  rpc DeleteByID(DeleteEmployeeByIDRequest) returns (DeleteEmployeeByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/employee/{id}"
    };
  }

  // update employee by id
  rpc UpdateByID(UpdateEmployeeByIDRequest) returns (UpdateEmployeeByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/employee/{id}"
      body: "*"
    };
  }

  // get employee by id
  rpc GetByID(GetEmployeeByIDRequest) returns (GetEmployeeByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/employee/{id}"
    };
  }

  // list of employee by query parameters
  rpc List(ListEmployeeRequest) returns (ListEmployeeReply) {
    option (google.api.http) = {
      post: "/api/v1/employee/list"
      body: "*"
    };
  }

  // ---------------------------------------------------------

  // 员工登录，获取访问令牌
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/employee/login"
      body: "*"
    };
  }

  // 员工退出登录
  rpc Logout(Empty) returns (Empty) {
    option (google.api.http) = {
      post: "/api/v1/employee/logout"
    };
  }

  // 修改密码
  rpc ChangePassword(ChangePasswordRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/api/v1/employee/change-password"
      body: "*"
    };
  }

  // 重置密码
  rpc ResetPassword(ResetPasswordRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/api/v1/employee/reset-password"
      body: "*"
    };
  }

  // 使用阿里云短信服务，向指定手机号发送验证码，验证码存放在redis中，5分钟内有效
  rpc SendVerificationCode(SendVerificationCodeRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/api/v1/employee/send-verification-code"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/employee/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getEmployee?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateEmployeeRequest {
	string name = 1;  // 姓名
	string phone = 2;  // 手机号
	int32 role = 3;  // 角色(1管理员/2店长/3销售员/4财务)
	uint32 storeID = 4;  // 所属门店ID
	string passwordHash = 5;  // 密码哈希值
}

message CreateEmployeeReply {
  uint64 id = 1;
}

message DeleteEmployeeByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeleteEmployeeByIDReply {

}

message UpdateEmployeeByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // 员工ID
	string name = 2;  // 姓名
	string phone = 3;  // 手机号
	int32 role = 4;  // 角色(1管理员/2店长/3销售员/4财务)
	uint32 storeID = 5;  // 所属门店ID
	string passwordHash = 6;  // 密码哈希值
}

message UpdateEmployeeByIDReply {

}

message Employee {
	uint64 id = 1;  // 员工ID
	string name = 2;  // 姓名
	string phone = 3;  // 手机号
	int32 role = 4;  // 角色(1管理员/2店长/3销售员/4财务)
	uint32 storeID = 5;  // 所属门店ID
	string passwordHash = 6;  // 密码哈希值
	string createdAt = 7;  // 创建时间
	string updatedAt = 8;  // 更新时间
}

message GetEmployeeByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetEmployeeByIDReply {
  Employee employee = 1;
}

message ListEmployeeRequest {
  api.types.Params params = 1;
}

message ListEmployeeReply {
  int64 total = 1;
  repeated Employee employees = 2;
}

// -------------------------------------------------------------------------

// 登录请求
message LoginRequest {
  string phone = 1;  // 手机号
  string password = 2;  // 密码
}

// 登录响应
message LoginResponse {
  string token = 1;  // 访问令牌
}

// 修改密码请求
message ChangePasswordRequest {
  string oldPassword = 1;  // 旧密码
  string newPassword = 2;  // 新密码
}

// 找回密码请求
message ResetPasswordRequest {
  string phone = 1;  // 手机号
  string code = 2;  // 验证码
  string newPassword = 3;  // 新密码
}

// 发送验证码请求
message SendVerificationCodeRequest {
  string phone = 1;  // 手机号
}

message Empty {}
