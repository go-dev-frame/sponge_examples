// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/transferOrder.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTransferOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransferOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransferOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransferOrderRequestMultiError, or nil if none found.
func (m *CreateTransferOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransferOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromStore

	// no validation rules for ToStore

	// no validation rules for TotalQuantity

	// no validation rules for Status

	// no validation rules for CompleteTime

	if len(errors) > 0 {
		return CreateTransferOrderRequestMultiError(errors)
	}

	return nil
}

// CreateTransferOrderRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTransferOrderRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateTransferOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransferOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransferOrderRequestMultiError) AllErrors() []error { return m }

// CreateTransferOrderRequestValidationError is the validation error returned
// by CreateTransferOrderRequest.Validate if the designated constraints aren't met.
type CreateTransferOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferOrderRequestValidationError) ErrorName() string {
	return "CreateTransferOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferOrderRequestValidationError{}

// Validate checks the field values on CreateTransferOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransferOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransferOrderReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransferOrderReplyMultiError, or nil if none found.
func (m *CreateTransferOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransferOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTransferOrderReplyMultiError(errors)
	}

	return nil
}

// CreateTransferOrderReplyMultiError is an error wrapping multiple validation
// errors returned by CreateTransferOrderReply.ValidateAll() if the designated
// constraints aren't met.
type CreateTransferOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransferOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransferOrderReplyMultiError) AllErrors() []error { return m }

// CreateTransferOrderReplyValidationError is the validation error returned by
// CreateTransferOrderReply.Validate if the designated constraints aren't met.
type CreateTransferOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransferOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransferOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransferOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransferOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransferOrderReplyValidationError) ErrorName() string {
	return "CreateTransferOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransferOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransferOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransferOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransferOrderReplyValidationError{}

// Validate checks the field values on DeleteTransferOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTransferOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTransferOrderByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteTransferOrderByIDRequestMultiError, or nil if none found.
func (m *DeleteTransferOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTransferOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteTransferOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteTransferOrderByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteTransferOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTransferOrderByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteTransferOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTransferOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTransferOrderByIDRequestMultiError) AllErrors() []error { return m }

// DeleteTransferOrderByIDRequestValidationError is the validation error
// returned by DeleteTransferOrderByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteTransferOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTransferOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTransferOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTransferOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTransferOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTransferOrderByIDRequestValidationError) ErrorName() string {
	return "DeleteTransferOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTransferOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTransferOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTransferOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTransferOrderByIDRequestValidationError{}

// Validate checks the field values on DeleteTransferOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTransferOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTransferOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTransferOrderByIDReplyMultiError, or nil if none found.
func (m *DeleteTransferOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTransferOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTransferOrderByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteTransferOrderByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteTransferOrderByIDReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteTransferOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTransferOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTransferOrderByIDReplyMultiError) AllErrors() []error { return m }

// DeleteTransferOrderByIDReplyValidationError is the validation error returned
// by DeleteTransferOrderByIDReply.Validate if the designated constraints
// aren't met.
type DeleteTransferOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTransferOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTransferOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTransferOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTransferOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTransferOrderByIDReplyValidationError) ErrorName() string {
	return "DeleteTransferOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTransferOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTransferOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTransferOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTransferOrderByIDReplyValidationError{}

// Validate checks the field values on UpdateTransferOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTransferOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransferOrderByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateTransferOrderByIDRequestMultiError, or nil if none found.
func (m *UpdateTransferOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransferOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateTransferOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FromStore

	// no validation rules for ToStore

	// no validation rules for TotalQuantity

	// no validation rules for Status

	// no validation rules for CompleteTime

	if len(errors) > 0 {
		return UpdateTransferOrderByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateTransferOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTransferOrderByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateTransferOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransferOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransferOrderByIDRequestMultiError) AllErrors() []error { return m }

// UpdateTransferOrderByIDRequestValidationError is the validation error
// returned by UpdateTransferOrderByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateTransferOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransferOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransferOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransferOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransferOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransferOrderByIDRequestValidationError) ErrorName() string {
	return "UpdateTransferOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransferOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransferOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransferOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransferOrderByIDRequestValidationError{}

// Validate checks the field values on UpdateTransferOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTransferOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTransferOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTransferOrderByIDReplyMultiError, or nil if none found.
func (m *UpdateTransferOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTransferOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTransferOrderByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateTransferOrderByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateTransferOrderByIDReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateTransferOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTransferOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTransferOrderByIDReplyMultiError) AllErrors() []error { return m }

// UpdateTransferOrderByIDReplyValidationError is the validation error returned
// by UpdateTransferOrderByIDReply.Validate if the designated constraints
// aren't met.
type UpdateTransferOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTransferOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTransferOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTransferOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTransferOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTransferOrderByIDReplyValidationError) ErrorName() string {
	return "UpdateTransferOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTransferOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTransferOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTransferOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTransferOrderByIDReplyValidationError{}

// Validate checks the field values on TransferOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransferOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferOrder with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransferOrderMultiError, or
// nil if none found.
func (m *TransferOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FromStore

	// no validation rules for ToStore

	// no validation rules for TotalQuantity

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for CompleteTime

	if len(errors) > 0 {
		return TransferOrderMultiError(errors)
	}

	return nil
}

// TransferOrderMultiError is an error wrapping multiple validation errors
// returned by TransferOrder.ValidateAll() if the designated constraints
// aren't met.
type TransferOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferOrderMultiError) AllErrors() []error { return m }

// TransferOrderValidationError is the validation error returned by
// TransferOrder.Validate if the designated constraints aren't met.
type TransferOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferOrderValidationError) ErrorName() string { return "TransferOrderValidationError" }

// Error satisfies the builtin error interface
func (e TransferOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferOrderValidationError{}

// Validate checks the field values on GetTransferOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransferOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransferOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransferOrderByIDRequestMultiError, or nil if none found.
func (m *GetTransferOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransferOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetTransferOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTransferOrderByIDRequestMultiError(errors)
	}

	return nil
}

// GetTransferOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetTransferOrderByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTransferOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransferOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransferOrderByIDRequestMultiError) AllErrors() []error { return m }

// GetTransferOrderByIDRequestValidationError is the validation error returned
// by GetTransferOrderByIDRequest.Validate if the designated constraints
// aren't met.
type GetTransferOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransferOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransferOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransferOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransferOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransferOrderByIDRequestValidationError) ErrorName() string {
	return "GetTransferOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransferOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransferOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransferOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransferOrderByIDRequestValidationError{}

// Validate checks the field values on GetTransferOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTransferOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTransferOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTransferOrderByIDReplyMultiError, or nil if none found.
func (m *GetTransferOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTransferOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransferOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTransferOrderByIDReplyValidationError{
					field:  "TransferOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTransferOrderByIDReplyValidationError{
					field:  "TransferOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransferOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTransferOrderByIDReplyValidationError{
				field:  "TransferOrder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTransferOrderByIDReplyMultiError(errors)
	}

	return nil
}

// GetTransferOrderByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetTransferOrderByIDReply.ValidateAll() if the
// designated constraints aren't met.
type GetTransferOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTransferOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTransferOrderByIDReplyMultiError) AllErrors() []error { return m }

// GetTransferOrderByIDReplyValidationError is the validation error returned by
// GetTransferOrderByIDReply.Validate if the designated constraints aren't met.
type GetTransferOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTransferOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTransferOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTransferOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTransferOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTransferOrderByIDReplyValidationError) ErrorName() string {
	return "GetTransferOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTransferOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTransferOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTransferOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTransferOrderByIDReplyValidationError{}

// Validate checks the field values on ListTransferOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransferOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransferOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransferOrderRequestMultiError, or nil if none found.
func (m *ListTransferOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransferOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTransferOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTransferOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTransferOrderRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTransferOrderRequestMultiError(errors)
	}

	return nil
}

// ListTransferOrderRequestMultiError is an error wrapping multiple validation
// errors returned by ListTransferOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTransferOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransferOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransferOrderRequestMultiError) AllErrors() []error { return m }

// ListTransferOrderRequestValidationError is the validation error returned by
// ListTransferOrderRequest.Validate if the designated constraints aren't met.
type ListTransferOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferOrderRequestValidationError) ErrorName() string {
	return "ListTransferOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferOrderRequestValidationError{}

// Validate checks the field values on ListTransferOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTransferOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTransferOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTransferOrderReplyMultiError, or nil if none found.
func (m *ListTransferOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTransferOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetTransferOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTransferOrderReplyValidationError{
						field:  fmt.Sprintf("TransferOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTransferOrderReplyValidationError{
						field:  fmt.Sprintf("TransferOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTransferOrderReplyValidationError{
					field:  fmt.Sprintf("TransferOrders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTransferOrderReplyMultiError(errors)
	}

	return nil
}

// ListTransferOrderReplyMultiError is an error wrapping multiple validation
// errors returned by ListTransferOrderReply.ValidateAll() if the designated
// constraints aren't met.
type ListTransferOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTransferOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTransferOrderReplyMultiError) AllErrors() []error { return m }

// ListTransferOrderReplyValidationError is the validation error returned by
// ListTransferOrderReply.Validate if the designated constraints aren't met.
type ListTransferOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTransferOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTransferOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTransferOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTransferOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTransferOrderReplyValidationError) ErrorName() string {
	return "ListTransferOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTransferOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTransferOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTransferOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTransferOrderReplyValidationError{}

// Validate checks the field values on PrecheckTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrecheckTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrecheckTransferRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrecheckTransferRequestMultiError, or nil if none found.
func (m *PrecheckTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PrecheckTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromStore

	// no validation rules for ToStore

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrecheckTransferRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrecheckTransferRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrecheckTransferRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrecheckTransferRequestMultiError(errors)
	}

	return nil
}

// PrecheckTransferRequestMultiError is an error wrapping multiple validation
// errors returned by PrecheckTransferRequest.ValidateAll() if the designated
// constraints aren't met.
type PrecheckTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrecheckTransferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrecheckTransferRequestMultiError) AllErrors() []error { return m }

// PrecheckTransferRequestValidationError is the validation error returned by
// PrecheckTransferRequest.Validate if the designated constraints aren't met.
type PrecheckTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrecheckTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrecheckTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrecheckTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrecheckTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrecheckTransferRequestValidationError) ErrorName() string {
	return "PrecheckTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PrecheckTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrecheckTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrecheckTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrecheckTransferRequestValidationError{}

// Validate checks the field values on TransferItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TransferItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransferItemMultiError, or
// nil if none found.
func (m *TransferItem) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuID

	// no validation rules for Quantity

	if len(errors) > 0 {
		return TransferItemMultiError(errors)
	}

	return nil
}

// TransferItemMultiError is an error wrapping multiple validation errors
// returned by TransferItem.ValidateAll() if the designated constraints aren't met.
type TransferItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferItemMultiError) AllErrors() []error { return m }

// TransferItemValidationError is the validation error returned by
// TransferItem.Validate if the designated constraints aren't met.
type TransferItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferItemValidationError) ErrorName() string { return "TransferItemValidationError" }

// Error satisfies the builtin error interface
func (e TransferItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferItemValidationError{}

// Validate checks the field values on PrecheckTransferReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PrecheckTransferReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrecheckTransferReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PrecheckTransferReplyMultiError, or nil if none found.
func (m *PrecheckTransferReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PrecheckTransferReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PrecheckTransferReplyValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PrecheckTransferReplyValidationError{
						field:  fmt.Sprintf("Status[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PrecheckTransferReplyValidationError{
					field:  fmt.Sprintf("Status[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PrecheckTransferReplyMultiError(errors)
	}

	return nil
}

// PrecheckTransferReplyMultiError is an error wrapping multiple validation
// errors returned by PrecheckTransferReply.ValidateAll() if the designated
// constraints aren't met.
type PrecheckTransferReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrecheckTransferReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrecheckTransferReplyMultiError) AllErrors() []error { return m }

// PrecheckTransferReplyValidationError is the validation error returned by
// PrecheckTransferReply.Validate if the designated constraints aren't met.
type PrecheckTransferReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrecheckTransferReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrecheckTransferReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrecheckTransferReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrecheckTransferReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrecheckTransferReplyValidationError) ErrorName() string {
	return "PrecheckTransferReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PrecheckTransferReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrecheckTransferReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrecheckTransferReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrecheckTransferReplyValidationError{}

// Validate checks the field values on PrecheckTransferReply_StockStatus with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PrecheckTransferReply_StockStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PrecheckTransferReply_StockStatus
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PrecheckTransferReply_StockStatusMultiError, or nil if none found.
func (m *PrecheckTransferReply_StockStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *PrecheckTransferReply_StockStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuID

	// no validation rules for Available

	// no validation rules for AvailableQty

	if len(errors) > 0 {
		return PrecheckTransferReply_StockStatusMultiError(errors)
	}

	return nil
}

// PrecheckTransferReply_StockStatusMultiError is an error wrapping multiple
// validation errors returned by
// PrecheckTransferReply_StockStatus.ValidateAll() if the designated
// constraints aren't met.
type PrecheckTransferReply_StockStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrecheckTransferReply_StockStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrecheckTransferReply_StockStatusMultiError) AllErrors() []error { return m }

// PrecheckTransferReply_StockStatusValidationError is the validation error
// returned by PrecheckTransferReply_StockStatus.Validate if the designated
// constraints aren't met.
type PrecheckTransferReply_StockStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrecheckTransferReply_StockStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrecheckTransferReply_StockStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrecheckTransferReply_StockStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrecheckTransferReply_StockStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrecheckTransferReply_StockStatusValidationError) ErrorName() string {
	return "PrecheckTransferReply_StockStatusValidationError"
}

// Error satisfies the builtin error interface
func (e PrecheckTransferReply_StockStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrecheckTransferReply_StockStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrecheckTransferReply_StockStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrecheckTransferReply_StockStatusValidationError{}
