// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/checkDetail.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCheckDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCheckDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCheckDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCheckDetailRequestMultiError, or nil if none found.
func (m *CreateCheckDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCheckDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CheckID

	// no validation rules for SkuID

	// no validation rules for SystemQty

	// no validation rules for ActualQty

	if len(errors) > 0 {
		return CreateCheckDetailRequestMultiError(errors)
	}

	return nil
}

// CreateCheckDetailRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCheckDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCheckDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCheckDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCheckDetailRequestMultiError) AllErrors() []error { return m }

// CreateCheckDetailRequestValidationError is the validation error returned by
// CreateCheckDetailRequest.Validate if the designated constraints aren't met.
type CreateCheckDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckDetailRequestValidationError) ErrorName() string {
	return "CreateCheckDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckDetailRequestValidationError{}

// Validate checks the field values on CreateCheckDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCheckDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCheckDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCheckDetailReplyMultiError, or nil if none found.
func (m *CreateCheckDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCheckDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CheckID

	if len(errors) > 0 {
		return CreateCheckDetailReplyMultiError(errors)
	}

	return nil
}

// CreateCheckDetailReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCheckDetailReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCheckDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCheckDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCheckDetailReplyMultiError) AllErrors() []error { return m }

// CreateCheckDetailReplyValidationError is the validation error returned by
// CreateCheckDetailReply.Validate if the designated constraints aren't met.
type CreateCheckDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCheckDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCheckDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCheckDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCheckDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCheckDetailReplyValidationError) ErrorName() string {
	return "CreateCheckDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCheckDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCheckDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCheckDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCheckDetailReplyValidationError{}

// Validate checks the field values on DeleteCheckDetailByCheckIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteCheckDetailByCheckIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCheckDetailByCheckIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteCheckDetailByCheckIDRequestMultiError, or nil if none found.
func (m *DeleteCheckDetailByCheckIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCheckDetailByCheckIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCheckID()) < 1 {
		err := DeleteCheckDetailByCheckIDRequestValidationError{
			field:  "CheckID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCheckDetailByCheckIDRequestMultiError(errors)
	}

	return nil
}

// DeleteCheckDetailByCheckIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteCheckDetailByCheckIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCheckDetailByCheckIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCheckDetailByCheckIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCheckDetailByCheckIDRequestMultiError) AllErrors() []error { return m }

// DeleteCheckDetailByCheckIDRequestValidationError is the validation error
// returned by DeleteCheckDetailByCheckIDRequest.Validate if the designated
// constraints aren't met.
type DeleteCheckDetailByCheckIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCheckDetailByCheckIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCheckDetailByCheckIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCheckDetailByCheckIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCheckDetailByCheckIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCheckDetailByCheckIDRequestValidationError) ErrorName() string {
	return "DeleteCheckDetailByCheckIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCheckDetailByCheckIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCheckDetailByCheckIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCheckDetailByCheckIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCheckDetailByCheckIDRequestValidationError{}

// Validate checks the field values on DeleteCheckDetailByCheckIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCheckDetailByCheckIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCheckDetailByCheckIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCheckDetailByCheckIDReplyMultiError, or nil if none found.
func (m *DeleteCheckDetailByCheckIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCheckDetailByCheckIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCheckDetailByCheckIDReplyMultiError(errors)
	}

	return nil
}

// DeleteCheckDetailByCheckIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteCheckDetailByCheckIDReply.ValidateAll()
// if the designated constraints aren't met.
type DeleteCheckDetailByCheckIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCheckDetailByCheckIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCheckDetailByCheckIDReplyMultiError) AllErrors() []error { return m }

// DeleteCheckDetailByCheckIDReplyValidationError is the validation error
// returned by DeleteCheckDetailByCheckIDReply.Validate if the designated
// constraints aren't met.
type DeleteCheckDetailByCheckIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCheckDetailByCheckIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCheckDetailByCheckIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCheckDetailByCheckIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCheckDetailByCheckIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCheckDetailByCheckIDReplyValidationError) ErrorName() string {
	return "DeleteCheckDetailByCheckIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCheckDetailByCheckIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCheckDetailByCheckIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCheckDetailByCheckIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCheckDetailByCheckIDReplyValidationError{}

// Validate checks the field values on UpdateCheckDetailByCheckIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCheckDetailByCheckIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCheckDetailByCheckIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateCheckDetailByCheckIDRequestMultiError, or nil if none found.
func (m *UpdateCheckDetailByCheckIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCheckDetailByCheckIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCheckID()) < 1 {
		err := UpdateCheckDetailByCheckIDRequestValidationError{
			field:  "CheckID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SkuID

	// no validation rules for SystemQty

	// no validation rules for ActualQty

	if len(errors) > 0 {
		return UpdateCheckDetailByCheckIDRequestMultiError(errors)
	}

	return nil
}

// UpdateCheckDetailByCheckIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCheckDetailByCheckIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCheckDetailByCheckIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCheckDetailByCheckIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCheckDetailByCheckIDRequestMultiError) AllErrors() []error { return m }

// UpdateCheckDetailByCheckIDRequestValidationError is the validation error
// returned by UpdateCheckDetailByCheckIDRequest.Validate if the designated
// constraints aren't met.
type UpdateCheckDetailByCheckIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCheckDetailByCheckIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCheckDetailByCheckIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCheckDetailByCheckIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCheckDetailByCheckIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCheckDetailByCheckIDRequestValidationError) ErrorName() string {
	return "UpdateCheckDetailByCheckIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCheckDetailByCheckIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCheckDetailByCheckIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCheckDetailByCheckIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCheckDetailByCheckIDRequestValidationError{}

// Validate checks the field values on UpdateCheckDetailByCheckIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCheckDetailByCheckIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCheckDetailByCheckIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCheckDetailByCheckIDReplyMultiError, or nil if none found.
func (m *UpdateCheckDetailByCheckIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCheckDetailByCheckIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCheckDetailByCheckIDReplyMultiError(errors)
	}

	return nil
}

// UpdateCheckDetailByCheckIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateCheckDetailByCheckIDReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateCheckDetailByCheckIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCheckDetailByCheckIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCheckDetailByCheckIDReplyMultiError) AllErrors() []error { return m }

// UpdateCheckDetailByCheckIDReplyValidationError is the validation error
// returned by UpdateCheckDetailByCheckIDReply.Validate if the designated
// constraints aren't met.
type UpdateCheckDetailByCheckIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCheckDetailByCheckIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCheckDetailByCheckIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCheckDetailByCheckIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCheckDetailByCheckIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCheckDetailByCheckIDReplyValidationError) ErrorName() string {
	return "UpdateCheckDetailByCheckIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCheckDetailByCheckIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCheckDetailByCheckIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCheckDetailByCheckIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCheckDetailByCheckIDReplyValidationError{}

// Validate checks the field values on CheckDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CheckDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CheckDetailMultiError, or
// nil if none found.
func (m *CheckDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CheckID

	// no validation rules for SkuID

	// no validation rules for SystemQty

	// no validation rules for ActualQty

	if len(errors) > 0 {
		return CheckDetailMultiError(errors)
	}

	return nil
}

// CheckDetailMultiError is an error wrapping multiple validation errors
// returned by CheckDetail.ValidateAll() if the designated constraints aren't met.
type CheckDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckDetailMultiError) AllErrors() []error { return m }

// CheckDetailValidationError is the validation error returned by
// CheckDetail.Validate if the designated constraints aren't met.
type CheckDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckDetailValidationError) ErrorName() string { return "CheckDetailValidationError" }

// Error satisfies the builtin error interface
func (e CheckDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckDetailValidationError{}

// Validate checks the field values on GetCheckDetailByCheckIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckDetailByCheckIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckDetailByCheckIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCheckDetailByCheckIDRequestMultiError, or nil if none found.
func (m *GetCheckDetailByCheckIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckDetailByCheckIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCheckID()) < 1 {
		err := GetCheckDetailByCheckIDRequestValidationError{
			field:  "CheckID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCheckDetailByCheckIDRequestMultiError(errors)
	}

	return nil
}

// GetCheckDetailByCheckIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetCheckDetailByCheckIDRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCheckDetailByCheckIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckDetailByCheckIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckDetailByCheckIDRequestMultiError) AllErrors() []error { return m }

// GetCheckDetailByCheckIDRequestValidationError is the validation error
// returned by GetCheckDetailByCheckIDRequest.Validate if the designated
// constraints aren't met.
type GetCheckDetailByCheckIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckDetailByCheckIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckDetailByCheckIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckDetailByCheckIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckDetailByCheckIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckDetailByCheckIDRequestValidationError) ErrorName() string {
	return "GetCheckDetailByCheckIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckDetailByCheckIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckDetailByCheckIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckDetailByCheckIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckDetailByCheckIDRequestValidationError{}

// Validate checks the field values on GetCheckDetailByCheckIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCheckDetailByCheckIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCheckDetailByCheckIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCheckDetailByCheckIDReplyMultiError, or nil if none found.
func (m *GetCheckDetailByCheckIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCheckDetailByCheckIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCheckDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCheckDetailByCheckIDReplyValidationError{
					field:  "CheckDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCheckDetailByCheckIDReplyValidationError{
					field:  "CheckDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCheckDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCheckDetailByCheckIDReplyValidationError{
				field:  "CheckDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCheckDetailByCheckIDReplyMultiError(errors)
	}

	return nil
}

// GetCheckDetailByCheckIDReplyMultiError is an error wrapping multiple
// validation errors returned by GetCheckDetailByCheckIDReply.ValidateAll() if
// the designated constraints aren't met.
type GetCheckDetailByCheckIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCheckDetailByCheckIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCheckDetailByCheckIDReplyMultiError) AllErrors() []error { return m }

// GetCheckDetailByCheckIDReplyValidationError is the validation error returned
// by GetCheckDetailByCheckIDReply.Validate if the designated constraints
// aren't met.
type GetCheckDetailByCheckIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCheckDetailByCheckIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCheckDetailByCheckIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCheckDetailByCheckIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCheckDetailByCheckIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCheckDetailByCheckIDReplyValidationError) ErrorName() string {
	return "GetCheckDetailByCheckIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCheckDetailByCheckIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCheckDetailByCheckIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCheckDetailByCheckIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCheckDetailByCheckIDReplyValidationError{}

// Validate checks the field values on ListCheckDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCheckDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCheckDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCheckDetailRequestMultiError, or nil if none found.
func (m *ListCheckDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCheckDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCheckDetailRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCheckDetailRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCheckDetailRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCheckDetailRequestMultiError(errors)
	}

	return nil
}

// ListCheckDetailRequestMultiError is an error wrapping multiple validation
// errors returned by ListCheckDetailRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCheckDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCheckDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCheckDetailRequestMultiError) AllErrors() []error { return m }

// ListCheckDetailRequestValidationError is the validation error returned by
// ListCheckDetailRequest.Validate if the designated constraints aren't met.
type ListCheckDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCheckDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCheckDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCheckDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCheckDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCheckDetailRequestValidationError) ErrorName() string {
	return "ListCheckDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCheckDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCheckDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCheckDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCheckDetailRequestValidationError{}

// Validate checks the field values on ListCheckDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCheckDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCheckDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCheckDetailReplyMultiError, or nil if none found.
func (m *ListCheckDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCheckDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetCheckDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCheckDetailReplyValidationError{
						field:  fmt.Sprintf("CheckDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCheckDetailReplyValidationError{
						field:  fmt.Sprintf("CheckDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCheckDetailReplyValidationError{
					field:  fmt.Sprintf("CheckDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCheckDetailReplyMultiError(errors)
	}

	return nil
}

// ListCheckDetailReplyMultiError is an error wrapping multiple validation
// errors returned by ListCheckDetailReply.ValidateAll() if the designated
// constraints aren't met.
type ListCheckDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCheckDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCheckDetailReplyMultiError) AllErrors() []error { return m }

// ListCheckDetailReplyValidationError is the validation error returned by
// ListCheckDetailReply.Validate if the designated constraints aren't met.
type ListCheckDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCheckDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCheckDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCheckDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCheckDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCheckDetailReplyValidationError) ErrorName() string {
	return "ListCheckDetailReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCheckDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCheckDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCheckDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCheckDetailReplyValidationError{}
