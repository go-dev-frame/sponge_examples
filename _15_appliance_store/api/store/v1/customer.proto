syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service customer {
  // create customer
  rpc Create(CreateCustomerRequest) returns (CreateCustomerReply) {
    option (google.api.http) = {
      post: "/api/v1/customer"
      body: "*"
    };
  }

  // delete customer by id
  rpc DeleteByID(DeleteCustomerByIDRequest) returns (DeleteCustomerByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/customer/{id}"
    };
  }

  // update customer by id
  rpc UpdateByID(UpdateCustomerByIDRequest) returns (UpdateCustomerByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/customer/{id}"
      body: "*"
    };
  }

  // get customer by id
  rpc GetByID(GetCustomerByIDRequest) returns (GetCustomerByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/customer/{id}"
    };
  }

  // list of customer by query parameters
  rpc List(ListCustomerRequest) returns (ListCustomerReply) {
    option (google.api.http) = {
      post: "/api/v1/customer/list"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/customer/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getCustomer?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateCustomerRequest {
	string name = 1;  // 客户姓名
	string phone = 2;  // 手机号
	string email = 3;  // 客户邮箱
	string address = 4;  // 地址
	string birthday = 5;  // 生日
	int32 membershipLevel = 6;  // 会员等级(0普通客户)
	uint32 totalPoints = 7;  // 累计积分
}

message CreateCustomerReply {
  uint64 id = 1;
}

message DeleteCustomerByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeleteCustomerByIDReply {

}

message UpdateCustomerByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // 客户ID
	string name = 2;  // 客户姓名
	string phone = 3;  // 手机号
	string email = 4;  // 客户邮箱
	string address = 5;  // 地址
	string birthday = 6;  // 生日
	int32 membershipLevel = 7;  // 会员等级(0普通客户)
	uint32 totalPoints = 8;  // 累计积分
}

message UpdateCustomerByIDReply {

}

message Customer {
	uint64 id = 1;  // 客户ID
	string name = 2;  // 客户姓名
	string phone = 3;  // 手机号
	string email = 4;  // 客户邮箱
	string address = 5;  // 地址
	string birthday = 6;  // 生日
	int32 membershipLevel = 7;  // 会员等级(0普通客户)
	uint32 totalPoints = 8;  // 累计积分
	string createdAt = 9;  // 创建时间
	string updatedAt = 10;  // 更新时间
}

message GetCustomerByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetCustomerByIDReply {
  Customer customer = 1;
}

message ListCustomerRequest {
  api.types.Params params = 1;
}

message ListCustomerReply {
  int64 total = 1;
  repeated Customer customers = 2;
}


