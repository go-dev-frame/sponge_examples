// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/customer.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomerRequestMultiError, or nil if none found.
func (m *CreateCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Address

	// no validation rules for Birthday

	// no validation rules for MembershipLevel

	// no validation rules for TotalPoints

	if len(errors) > 0 {
		return CreateCustomerRequestMultiError(errors)
	}

	return nil
}

// CreateCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomerRequestMultiError) AllErrors() []error { return m }

// CreateCustomerRequestValidationError is the validation error returned by
// CreateCustomerRequest.Validate if the designated constraints aren't met.
type CreateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerRequestValidationError) ErrorName() string {
	return "CreateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerRequestValidationError{}

// Validate checks the field values on CreateCustomerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCustomerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCustomerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCustomerReplyMultiError, or nil if none found.
func (m *CreateCustomerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCustomerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCustomerReplyMultiError(errors)
	}

	return nil
}

// CreateCustomerReplyMultiError is an error wrapping multiple validation
// errors returned by CreateCustomerReply.ValidateAll() if the designated
// constraints aren't met.
type CreateCustomerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCustomerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCustomerReplyMultiError) AllErrors() []error { return m }

// CreateCustomerReplyValidationError is the validation error returned by
// CreateCustomerReply.Validate if the designated constraints aren't met.
type CreateCustomerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCustomerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCustomerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCustomerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCustomerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCustomerReplyValidationError) ErrorName() string {
	return "CreateCustomerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCustomerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCustomerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCustomerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCustomerReplyValidationError{}

// Validate checks the field values on DeleteCustomerByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomerByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomerByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomerByIDRequestMultiError, or nil if none found.
func (m *DeleteCustomerByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomerByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteCustomerByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCustomerByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteCustomerByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCustomerByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteCustomerByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomerByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomerByIDRequestMultiError) AllErrors() []error { return m }

// DeleteCustomerByIDRequestValidationError is the validation error returned by
// DeleteCustomerByIDRequest.Validate if the designated constraints aren't met.
type DeleteCustomerByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerByIDRequestValidationError) ErrorName() string {
	return "DeleteCustomerByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerByIDRequestValidationError{}

// Validate checks the field values on DeleteCustomerByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomerByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomerByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomerByIDReplyMultiError, or nil if none found.
func (m *DeleteCustomerByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomerByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCustomerByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteCustomerByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCustomerByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCustomerByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomerByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomerByIDReplyMultiError) AllErrors() []error { return m }

// DeleteCustomerByIDReplyValidationError is the validation error returned by
// DeleteCustomerByIDReply.Validate if the designated constraints aren't met.
type DeleteCustomerByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerByIDReplyValidationError) ErrorName() string {
	return "DeleteCustomerByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerByIDReplyValidationError{}

// Validate checks the field values on UpdateCustomerByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomerByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomerByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomerByIDRequestMultiError, or nil if none found.
func (m *UpdateCustomerByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomerByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateCustomerByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Address

	// no validation rules for Birthday

	// no validation rules for MembershipLevel

	// no validation rules for TotalPoints

	if len(errors) > 0 {
		return UpdateCustomerByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomerByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCustomerByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateCustomerByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomerByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomerByIDRequestMultiError) AllErrors() []error { return m }

// UpdateCustomerByIDRequestValidationError is the validation error returned by
// UpdateCustomerByIDRequest.Validate if the designated constraints aren't met.
type UpdateCustomerByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerByIDRequestValidationError) ErrorName() string {
	return "UpdateCustomerByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerByIDRequestValidationError{}

// Validate checks the field values on UpdateCustomerByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomerByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomerByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomerByIDReplyMultiError, or nil if none found.
func (m *UpdateCustomerByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomerByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCustomerByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateCustomerByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateCustomerByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomerByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomerByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomerByIDReplyMultiError) AllErrors() []error { return m }

// UpdateCustomerByIDReplyValidationError is the validation error returned by
// UpdateCustomerByIDReply.Validate if the designated constraints aren't met.
type UpdateCustomerByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerByIDReplyValidationError) ErrorName() string {
	return "UpdateCustomerByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerByIDReplyValidationError{}

// Validate checks the field values on Customer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Customer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Customer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CustomerMultiError, or nil
// if none found.
func (m *Customer) ValidateAll() error {
	return m.validate(true)
}

func (m *Customer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Address

	// no validation rules for Birthday

	// no validation rules for MembershipLevel

	// no validation rules for TotalPoints

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CustomerMultiError(errors)
	}

	return nil
}

// CustomerMultiError is an error wrapping multiple validation errors returned
// by Customer.ValidateAll() if the designated constraints aren't met.
type CustomerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerMultiError) AllErrors() []error { return m }

// CustomerValidationError is the validation error returned by
// Customer.Validate if the designated constraints aren't met.
type CustomerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerValidationError) ErrorName() string { return "CustomerValidationError" }

// Error satisfies the builtin error interface
func (e CustomerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerValidationError{}

// Validate checks the field values on GetCustomerByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerByIDRequestMultiError, or nil if none found.
func (m *GetCustomerByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCustomerByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCustomerByIDRequestMultiError(errors)
	}

	return nil
}

// GetCustomerByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomerByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCustomerByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerByIDRequestMultiError) AllErrors() []error { return m }

// GetCustomerByIDRequestValidationError is the validation error returned by
// GetCustomerByIDRequest.Validate if the designated constraints aren't met.
type GetCustomerByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerByIDRequestValidationError) ErrorName() string {
	return "GetCustomerByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerByIDRequestValidationError{}

// Validate checks the field values on GetCustomerByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerByIDReplyMultiError, or nil if none found.
func (m *GetCustomerByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCustomer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCustomerByIDReplyValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCustomerByIDReplyValidationError{
					field:  "Customer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCustomer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomerByIDReplyValidationError{
				field:  "Customer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCustomerByIDReplyMultiError(errors)
	}

	return nil
}

// GetCustomerByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetCustomerByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetCustomerByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerByIDReplyMultiError) AllErrors() []error { return m }

// GetCustomerByIDReplyValidationError is the validation error returned by
// GetCustomerByIDReply.Validate if the designated constraints aren't met.
type GetCustomerByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerByIDReplyValidationError) ErrorName() string {
	return "GetCustomerByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerByIDReplyValidationError{}

// Validate checks the field values on ListCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCustomerRequestMultiError, or nil if none found.
func (m *ListCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCustomerRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCustomerRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCustomerRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCustomerRequestMultiError(errors)
	}

	return nil
}

// ListCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by ListCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomerRequestMultiError) AllErrors() []error { return m }

// ListCustomerRequestValidationError is the validation error returned by
// ListCustomerRequest.Validate if the designated constraints aren't met.
type ListCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomerRequestValidationError) ErrorName() string {
	return "ListCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomerRequestValidationError{}

// Validate checks the field values on ListCustomerReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCustomerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCustomerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCustomerReplyMultiError, or nil if none found.
func (m *ListCustomerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCustomerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetCustomers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCustomerReplyValidationError{
						field:  fmt.Sprintf("Customers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCustomerReplyValidationError{
						field:  fmt.Sprintf("Customers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCustomerReplyValidationError{
					field:  fmt.Sprintf("Customers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCustomerReplyMultiError(errors)
	}

	return nil
}

// ListCustomerReplyMultiError is an error wrapping multiple validation errors
// returned by ListCustomerReply.ValidateAll() if the designated constraints
// aren't met.
type ListCustomerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCustomerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCustomerReplyMultiError) AllErrors() []error { return m }

// ListCustomerReplyValidationError is the validation error returned by
// ListCustomerReply.Validate if the designated constraints aren't met.
type ListCustomerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCustomerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCustomerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCustomerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCustomerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCustomerReplyValidationError) ErrorName() string {
	return "ListCustomerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCustomerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCustomerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCustomerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCustomerReplyValidationError{}
