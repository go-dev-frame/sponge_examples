syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service inventory {
  // create inventory
  rpc Create(CreateInventoryRequest) returns (CreateInventoryReply) {
    option (google.api.http) = {
      post: "/api/v1/inventory"
      body: "*"
    };
  }

  // delete inventory by id
  rpc DeleteByID(DeleteInventoryByIDRequest) returns (DeleteInventoryByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/inventory/{id}"
    };
  }

  // update inventory by id
  rpc UpdateByID(UpdateInventoryByIDRequest) returns (UpdateInventoryByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/inventory/{id}"
      body: "*"
    };
  }

  // get inventory by id
  rpc GetByID(GetInventoryByIDRequest) returns (GetInventoryByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/inventory/{id}"
    };
  }

  // list of inventory by query parameters
  rpc List(ListInventoryRequest) returns (ListInventoryReply) {
    option (google.api.http) = {
      post: "/api/v1/inventory/list"
      body: "*"
    };
  }

  // -------------------------------------------------------------

  // 执行跨仓库调拨操作
  // 实现逻辑：
  // 1. 校验源仓库库存是否充足
  // 2. 生成调拨单并锁定库存
  // 3. 触发物流系统通知
  // 4. 更新双方仓库库存记录
  rpc ExecuteTransfer(ExecuteTransferRequest) returns (ExecuteTransferReply) {
    option (google.api.http) = {
      post: "/api/v1/inventory/transfer"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/inventory/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getInventory?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateInventoryRequest {
	uint32 storeID = 1;  // 门店ID
	uint32 skuID = 2;  // SKU ID
	int32 quantity = 3;  // 当前库存
	int32 safetyStock = 4;  // 安全库存
}

message CreateInventoryReply {
  uint64 id = 1;
}

message DeleteInventoryByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeleteInventoryByIDReply {

}

message UpdateInventoryByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // 库存记录ID
	uint32 storeID = 2;  // 门店ID
	uint32 skuID = 3;  // SKU ID
	int32 quantity = 4;  // 当前库存
	int32 safetyStock = 5;  // 安全库存
}

message UpdateInventoryByIDReply {

}

message Inventory {
	uint64 id = 1;  // 库存记录ID
	uint32 storeID = 2;  // 门店ID
	uint32 skuID = 3;  // SKU ID
	int32 quantity = 4;  // 当前库存
	int32 safetyStock = 5;  // 安全库存
	string createdAt = 6;  // 创建时间
	string updatedAt = 7;  // 更新时间
}

message GetInventoryByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetInventoryByIDReply {
  Inventory inventory = 1;
}

message ListInventoryRequest {
  api.types.Params params = 1;
}

message ListInventoryReply {
  int64 total = 1;
  repeated Inventory inventorys = 2;
}

// -------------------------------------------------------------

message ExecuteTransferRequest {
  uint32 fromStoreID = 1; // 调出仓库ID
  uint32 toStoreID = 2; // 调入仓库ID
  message TransferItem {
    uint32 skuID = 1; // 商品SKU ID
    int32 quantity = 2 [(validate.rules).int32.gt = 0]; // 调拨数量
  }
  repeated TransferItem items = 3 [(validate.rules).repeated = {min_items: 1}]; // 调拨商品明细
}

message ExecuteTransferReply {
  string transferOrderID = 1; // 生成的调拨单号
}
