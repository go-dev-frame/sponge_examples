// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/auditLog.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAuditLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAuditLogRequestMultiError, or nil if none found.
func (m *CreateAuditLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAuditLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OperatorID

	// no validation rules for ActionType

	// no validation rules for TargetTable

	// no validation rules for TargetID

	// no validation rules for OldValue

	// no validation rules for NewValue

	// no validation rules for Remark

	// no validation rules for OperateTime

	if len(errors) > 0 {
		return CreateAuditLogRequestMultiError(errors)
	}

	return nil
}

// CreateAuditLogRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAuditLogRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAuditLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAuditLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAuditLogRequestMultiError) AllErrors() []error { return m }

// CreateAuditLogRequestValidationError is the validation error returned by
// CreateAuditLogRequest.Validate if the designated constraints aren't met.
type CreateAuditLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAuditLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAuditLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAuditLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAuditLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAuditLogRequestValidationError) ErrorName() string {
	return "CreateAuditLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAuditLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAuditLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAuditLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAuditLogRequestValidationError{}

// Validate checks the field values on CreateAuditLogReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAuditLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAuditLogReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAuditLogReplyMultiError, or nil if none found.
func (m *CreateAuditLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAuditLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAuditLogReplyMultiError(errors)
	}

	return nil
}

// CreateAuditLogReplyMultiError is an error wrapping multiple validation
// errors returned by CreateAuditLogReply.ValidateAll() if the designated
// constraints aren't met.
type CreateAuditLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAuditLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAuditLogReplyMultiError) AllErrors() []error { return m }

// CreateAuditLogReplyValidationError is the validation error returned by
// CreateAuditLogReply.Validate if the designated constraints aren't met.
type CreateAuditLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAuditLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAuditLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAuditLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAuditLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAuditLogReplyValidationError) ErrorName() string {
	return "CreateAuditLogReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAuditLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAuditLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAuditLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAuditLogReplyValidationError{}

// Validate checks the field values on DeleteAuditLogByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAuditLogByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuditLogByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAuditLogByIDRequestMultiError, or nil if none found.
func (m *DeleteAuditLogByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuditLogByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAuditLogByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAuditLogByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteAuditLogByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAuditLogByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteAuditLogByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuditLogByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuditLogByIDRequestMultiError) AllErrors() []error { return m }

// DeleteAuditLogByIDRequestValidationError is the validation error returned by
// DeleteAuditLogByIDRequest.Validate if the designated constraints aren't met.
type DeleteAuditLogByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuditLogByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuditLogByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuditLogByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuditLogByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuditLogByIDRequestValidationError) ErrorName() string {
	return "DeleteAuditLogByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAuditLogByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuditLogByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuditLogByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuditLogByIDRequestValidationError{}

// Validate checks the field values on DeleteAuditLogByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAuditLogByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAuditLogByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAuditLogByIDReplyMultiError, or nil if none found.
func (m *DeleteAuditLogByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAuditLogByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAuditLogByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteAuditLogByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteAuditLogByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteAuditLogByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAuditLogByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAuditLogByIDReplyMultiError) AllErrors() []error { return m }

// DeleteAuditLogByIDReplyValidationError is the validation error returned by
// DeleteAuditLogByIDReply.Validate if the designated constraints aren't met.
type DeleteAuditLogByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAuditLogByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAuditLogByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAuditLogByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAuditLogByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAuditLogByIDReplyValidationError) ErrorName() string {
	return "DeleteAuditLogByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAuditLogByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAuditLogByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAuditLogByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAuditLogByIDReplyValidationError{}

// Validate checks the field values on UpdateAuditLogByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuditLogByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuditLogByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuditLogByIDRequestMultiError, or nil if none found.
func (m *UpdateAuditLogByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuditLogByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAuditLogByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OperatorID

	// no validation rules for ActionType

	// no validation rules for TargetTable

	// no validation rules for TargetID

	// no validation rules for OldValue

	// no validation rules for NewValue

	// no validation rules for Remark

	// no validation rules for OperateTime

	if len(errors) > 0 {
		return UpdateAuditLogByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateAuditLogByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAuditLogByIDRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateAuditLogByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuditLogByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuditLogByIDRequestMultiError) AllErrors() []error { return m }

// UpdateAuditLogByIDRequestValidationError is the validation error returned by
// UpdateAuditLogByIDRequest.Validate if the designated constraints aren't met.
type UpdateAuditLogByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuditLogByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuditLogByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuditLogByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuditLogByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuditLogByIDRequestValidationError) ErrorName() string {
	return "UpdateAuditLogByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAuditLogByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuditLogByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuditLogByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuditLogByIDRequestValidationError{}

// Validate checks the field values on UpdateAuditLogByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAuditLogByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAuditLogByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAuditLogByIDReplyMultiError, or nil if none found.
func (m *UpdateAuditLogByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAuditLogByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAuditLogByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateAuditLogByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateAuditLogByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateAuditLogByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAuditLogByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAuditLogByIDReplyMultiError) AllErrors() []error { return m }

// UpdateAuditLogByIDReplyValidationError is the validation error returned by
// UpdateAuditLogByIDReply.Validate if the designated constraints aren't met.
type UpdateAuditLogByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAuditLogByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAuditLogByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAuditLogByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAuditLogByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAuditLogByIDReplyValidationError) ErrorName() string {
	return "UpdateAuditLogByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAuditLogByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAuditLogByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAuditLogByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAuditLogByIDReplyValidationError{}

// Validate checks the field values on AuditLog with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuditLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuditLog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuditLogMultiError, or nil
// if none found.
func (m *AuditLog) ValidateAll() error {
	return m.validate(true)
}

func (m *AuditLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OperatorID

	// no validation rules for ActionType

	// no validation rules for TargetTable

	// no validation rules for TargetID

	// no validation rules for OldValue

	// no validation rules for NewValue

	// no validation rules for Remark

	// no validation rules for OperateTime

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return AuditLogMultiError(errors)
	}

	return nil
}

// AuditLogMultiError is an error wrapping multiple validation errors returned
// by AuditLog.ValidateAll() if the designated constraints aren't met.
type AuditLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuditLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuditLogMultiError) AllErrors() []error { return m }

// AuditLogValidationError is the validation error returned by
// AuditLog.Validate if the designated constraints aren't met.
type AuditLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditLogValidationError) ErrorName() string { return "AuditLogValidationError" }

// Error satisfies the builtin error interface
func (e AuditLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditLogValidationError{}

// Validate checks the field values on GetAuditLogByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditLogByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditLogByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditLogByIDRequestMultiError, or nil if none found.
func (m *GetAuditLogByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditLogByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetAuditLogByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAuditLogByIDRequestMultiError(errors)
	}

	return nil
}

// GetAuditLogByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetAuditLogByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAuditLogByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditLogByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditLogByIDRequestMultiError) AllErrors() []error { return m }

// GetAuditLogByIDRequestValidationError is the validation error returned by
// GetAuditLogByIDRequest.Validate if the designated constraints aren't met.
type GetAuditLogByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditLogByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditLogByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditLogByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditLogByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditLogByIDRequestValidationError) ErrorName() string {
	return "GetAuditLogByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditLogByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditLogByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditLogByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditLogByIDRequestValidationError{}

// Validate checks the field values on GetAuditLogByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuditLogByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuditLogByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuditLogByIDReplyMultiError, or nil if none found.
func (m *GetAuditLogByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuditLogByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAuditLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuditLogByIDReplyValidationError{
					field:  "AuditLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuditLogByIDReplyValidationError{
					field:  "AuditLog",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuditLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuditLogByIDReplyValidationError{
				field:  "AuditLog",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAuditLogByIDReplyMultiError(errors)
	}

	return nil
}

// GetAuditLogByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetAuditLogByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetAuditLogByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuditLogByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuditLogByIDReplyMultiError) AllErrors() []error { return m }

// GetAuditLogByIDReplyValidationError is the validation error returned by
// GetAuditLogByIDReply.Validate if the designated constraints aren't met.
type GetAuditLogByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuditLogByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuditLogByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuditLogByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuditLogByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuditLogByIDReplyValidationError) ErrorName() string {
	return "GetAuditLogByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuditLogByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuditLogByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuditLogByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuditLogByIDReplyValidationError{}

// Validate checks the field values on ListAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogRequestMultiError, or nil if none found.
func (m *ListAuditLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAuditLogRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAuditLogRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAuditLogRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAuditLogRequestMultiError(errors)
	}

	return nil
}

// ListAuditLogRequestMultiError is an error wrapping multiple validation
// errors returned by ListAuditLogRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAuditLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogRequestMultiError) AllErrors() []error { return m }

// ListAuditLogRequestValidationError is the validation error returned by
// ListAuditLogRequest.Validate if the designated constraints aren't met.
type ListAuditLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogRequestValidationError) ErrorName() string {
	return "ListAuditLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogRequestValidationError{}

// Validate checks the field values on ListAuditLogReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAuditLogReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAuditLogReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAuditLogReplyMultiError, or nil if none found.
func (m *ListAuditLogReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAuditLogReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetAuditLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAuditLogReplyValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAuditLogReplyValidationError{
						field:  fmt.Sprintf("AuditLogs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAuditLogReplyValidationError{
					field:  fmt.Sprintf("AuditLogs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAuditLogReplyMultiError(errors)
	}

	return nil
}

// ListAuditLogReplyMultiError is an error wrapping multiple validation errors
// returned by ListAuditLogReply.ValidateAll() if the designated constraints
// aren't met.
type ListAuditLogReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAuditLogReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAuditLogReplyMultiError) AllErrors() []error { return m }

// ListAuditLogReplyValidationError is the validation error returned by
// ListAuditLogReply.Validate if the designated constraints aren't met.
type ListAuditLogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAuditLogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAuditLogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAuditLogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAuditLogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAuditLogReplyValidationError) ErrorName() string {
	return "ListAuditLogReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListAuditLogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAuditLogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAuditLogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAuditLogReplyValidationError{}
