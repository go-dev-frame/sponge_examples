syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service productSku {
  // create productSku
  rpc Create(CreateProductSkuRequest) returns (CreateProductSkuReply) {
    option (google.api.http) = {
      post: "/api/v1/productSku"
      body: "*"
    };
  }

  // delete productSku by id
  rpc DeleteByID(DeleteProductSkuByIDRequest) returns (DeleteProductSkuByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/productSku/{id}"
    };
  }

  // update productSku by id
  rpc UpdateByID(UpdateProductSkuByIDRequest) returns (UpdateProductSkuByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/productSku/{id}"
      body: "*"
    };
  }

  // get productSku by id
  rpc GetByID(GetProductSkuByIDRequest) returns (GetProductSkuByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/productSku/{id}"
    };
  }

  // list of productSku by query parameters
  rpc List(ListProductSkuRequest) returns (ListProductSkuReply) {
    option (google.api.http) = {
      post: "/api/v1/productSku/list"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/productSku/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getProductSku?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateProductSkuRequest {
	uint32 productID = 1;  // 产品ID
	string skuCode = 2;  // SKU编码
	string attributes = 3;  // 规格属性(JSON格式，如{"color":"白","capacity":"10L"})
	string price = 4;  // 实际售价
	int32 stock = 5;  // 库存数量
}

message CreateProductSkuReply {
  uint64 id = 1;
}

message DeleteProductSkuByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeleteProductSkuByIDReply {

}

message UpdateProductSkuByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // SKU ID
	uint32 productID = 2;  // 产品ID
	string skuCode = 3;  // SKU编码
	string attributes = 4;  // 规格属性(JSON格式，如{"color":"白","capacity":"10L"})
	string price = 5;  // 实际售价
	int32 stock = 6;  // 库存数量
}

message UpdateProductSkuByIDReply {

}

message ProductSku {
	uint64 id = 1;  // SKU ID
	uint32 productID = 2;  // 产品ID
	string skuCode = 3;  // SKU编码
	string attributes = 4;  // 规格属性(JSON格式，如{"color":"白","capacity":"10L"})
	string price = 5;  // 实际售价
	int32 stock = 6;  // 库存数量
	string createdAt = 7;  // 创建时间
	string updatedAt = 8;  // 更新时间
}

message GetProductSkuByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetProductSkuByIDReply {
  ProductSku productSku = 1;
}

message ListProductSkuRequest {
  api.types.Params params = 1;
}

message ListProductSkuReply {
  int64 total = 1;
  repeated ProductSku productSkus = 2;
}


