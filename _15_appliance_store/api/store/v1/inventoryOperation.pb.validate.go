// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/inventoryOperation.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateInventoryOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInventoryOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInventoryOperationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateInventoryOperationRequestMultiError, or nil if none found.
func (m *CreateInventoryOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInventoryOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InventoryID

	// no validation rules for StoreID

	// no validation rules for SkuID

	// no validation rules for Type

	// no validation rules for Quantity

	// no validation rules for RelatedOrder

	// no validation rules for Remark

	// no validation rules for Operator

	// no validation rules for OperateTime

	if len(errors) > 0 {
		return CreateInventoryOperationRequestMultiError(errors)
	}

	return nil
}

// CreateInventoryOperationRequestMultiError is an error wrapping multiple
// validation errors returned by CreateInventoryOperationRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateInventoryOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInventoryOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInventoryOperationRequestMultiError) AllErrors() []error { return m }

// CreateInventoryOperationRequestValidationError is the validation error
// returned by CreateInventoryOperationRequest.Validate if the designated
// constraints aren't met.
type CreateInventoryOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInventoryOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInventoryOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInventoryOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInventoryOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInventoryOperationRequestValidationError) ErrorName() string {
	return "CreateInventoryOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInventoryOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInventoryOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInventoryOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInventoryOperationRequestValidationError{}

// Validate checks the field values on CreateInventoryOperationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInventoryOperationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInventoryOperationReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateInventoryOperationReplyMultiError, or nil if none found.
func (m *CreateInventoryOperationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInventoryOperationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateInventoryOperationReplyMultiError(errors)
	}

	return nil
}

// CreateInventoryOperationReplyMultiError is an error wrapping multiple
// validation errors returned by CreateInventoryOperationReply.ValidateAll()
// if the designated constraints aren't met.
type CreateInventoryOperationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInventoryOperationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInventoryOperationReplyMultiError) AllErrors() []error { return m }

// CreateInventoryOperationReplyValidationError is the validation error
// returned by CreateInventoryOperationReply.Validate if the designated
// constraints aren't met.
type CreateInventoryOperationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInventoryOperationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInventoryOperationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInventoryOperationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInventoryOperationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInventoryOperationReplyValidationError) ErrorName() string {
	return "CreateInventoryOperationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInventoryOperationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInventoryOperationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInventoryOperationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInventoryOperationReplyValidationError{}

// Validate checks the field values on DeleteInventoryOperationByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteInventoryOperationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInventoryOperationByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteInventoryOperationByIDRequestMultiError, or nil if none found.
func (m *DeleteInventoryOperationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInventoryOperationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteInventoryOperationByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteInventoryOperationByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteInventoryOperationByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteInventoryOperationByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInventoryOperationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInventoryOperationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInventoryOperationByIDRequestMultiError) AllErrors() []error { return m }

// DeleteInventoryOperationByIDRequestValidationError is the validation error
// returned by DeleteInventoryOperationByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteInventoryOperationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInventoryOperationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInventoryOperationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInventoryOperationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInventoryOperationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInventoryOperationByIDRequestValidationError) ErrorName() string {
	return "DeleteInventoryOperationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInventoryOperationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInventoryOperationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInventoryOperationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInventoryOperationByIDRequestValidationError{}

// Validate checks the field values on DeleteInventoryOperationByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteInventoryOperationByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInventoryOperationByIDReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteInventoryOperationByIDReplyMultiError, or nil if none found.
func (m *DeleteInventoryOperationByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInventoryOperationByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInventoryOperationByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteInventoryOperationByIDReplyMultiError is an error wrapping multiple
// validation errors returned by
// DeleteInventoryOperationByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteInventoryOperationByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInventoryOperationByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInventoryOperationByIDReplyMultiError) AllErrors() []error { return m }

// DeleteInventoryOperationByIDReplyValidationError is the validation error
// returned by DeleteInventoryOperationByIDReply.Validate if the designated
// constraints aren't met.
type DeleteInventoryOperationByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInventoryOperationByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInventoryOperationByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInventoryOperationByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInventoryOperationByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInventoryOperationByIDReplyValidationError) ErrorName() string {
	return "DeleteInventoryOperationByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInventoryOperationByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInventoryOperationByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInventoryOperationByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInventoryOperationByIDReplyValidationError{}

// Validate checks the field values on UpdateInventoryOperationByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateInventoryOperationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInventoryOperationByIDRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateInventoryOperationByIDRequestMultiError, or nil if none found.
func (m *UpdateInventoryOperationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInventoryOperationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateInventoryOperationByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InventoryID

	// no validation rules for StoreID

	// no validation rules for SkuID

	// no validation rules for Type

	// no validation rules for Quantity

	// no validation rules for RelatedOrder

	// no validation rules for Remark

	// no validation rules for Operator

	// no validation rules for OperateTime

	if len(errors) > 0 {
		return UpdateInventoryOperationByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateInventoryOperationByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateInventoryOperationByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateInventoryOperationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInventoryOperationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInventoryOperationByIDRequestMultiError) AllErrors() []error { return m }

// UpdateInventoryOperationByIDRequestValidationError is the validation error
// returned by UpdateInventoryOperationByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateInventoryOperationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInventoryOperationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInventoryOperationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInventoryOperationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInventoryOperationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInventoryOperationByIDRequestValidationError) ErrorName() string {
	return "UpdateInventoryOperationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInventoryOperationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInventoryOperationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInventoryOperationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInventoryOperationByIDRequestValidationError{}

// Validate checks the field values on UpdateInventoryOperationByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateInventoryOperationByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInventoryOperationByIDReply
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateInventoryOperationByIDReplyMultiError, or nil if none found.
func (m *UpdateInventoryOperationByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInventoryOperationByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInventoryOperationByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateInventoryOperationByIDReplyMultiError is an error wrapping multiple
// validation errors returned by
// UpdateInventoryOperationByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateInventoryOperationByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInventoryOperationByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInventoryOperationByIDReplyMultiError) AllErrors() []error { return m }

// UpdateInventoryOperationByIDReplyValidationError is the validation error
// returned by UpdateInventoryOperationByIDReply.Validate if the designated
// constraints aren't met.
type UpdateInventoryOperationByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInventoryOperationByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInventoryOperationByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInventoryOperationByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInventoryOperationByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInventoryOperationByIDReplyValidationError) ErrorName() string {
	return "UpdateInventoryOperationByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInventoryOperationByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInventoryOperationByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInventoryOperationByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInventoryOperationByIDReplyValidationError{}

// Validate checks the field values on InventoryOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InventoryOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InventoryOperation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InventoryOperationMultiError, or nil if none found.
func (m *InventoryOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *InventoryOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for InventoryID

	// no validation rules for StoreID

	// no validation rules for SkuID

	// no validation rules for Type

	// no validation rules for Quantity

	// no validation rules for RelatedOrder

	// no validation rules for Remark

	// no validation rules for Operator

	// no validation rules for OperateTime

	if len(errors) > 0 {
		return InventoryOperationMultiError(errors)
	}

	return nil
}

// InventoryOperationMultiError is an error wrapping multiple validation errors
// returned by InventoryOperation.ValidateAll() if the designated constraints
// aren't met.
type InventoryOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InventoryOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InventoryOperationMultiError) AllErrors() []error { return m }

// InventoryOperationValidationError is the validation error returned by
// InventoryOperation.Validate if the designated constraints aren't met.
type InventoryOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InventoryOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InventoryOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InventoryOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InventoryOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InventoryOperationValidationError) ErrorName() string {
	return "InventoryOperationValidationError"
}

// Error satisfies the builtin error interface
func (e InventoryOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInventoryOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InventoryOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InventoryOperationValidationError{}

// Validate checks the field values on GetInventoryOperationByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetInventoryOperationByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInventoryOperationByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetInventoryOperationByIDRequestMultiError, or nil if none found.
func (m *GetInventoryOperationByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInventoryOperationByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetInventoryOperationByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetInventoryOperationByIDRequestMultiError(errors)
	}

	return nil
}

// GetInventoryOperationByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetInventoryOperationByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInventoryOperationByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInventoryOperationByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInventoryOperationByIDRequestMultiError) AllErrors() []error { return m }

// GetInventoryOperationByIDRequestValidationError is the validation error
// returned by GetInventoryOperationByIDRequest.Validate if the designated
// constraints aren't met.
type GetInventoryOperationByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInventoryOperationByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInventoryOperationByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInventoryOperationByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInventoryOperationByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInventoryOperationByIDRequestValidationError) ErrorName() string {
	return "GetInventoryOperationByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInventoryOperationByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInventoryOperationByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInventoryOperationByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInventoryOperationByIDRequestValidationError{}

// Validate checks the field values on GetInventoryOperationByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInventoryOperationByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInventoryOperationByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetInventoryOperationByIDReplyMultiError, or nil if none found.
func (m *GetInventoryOperationByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInventoryOperationByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInventoryOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInventoryOperationByIDReplyValidationError{
					field:  "InventoryOperation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInventoryOperationByIDReplyValidationError{
					field:  "InventoryOperation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInventoryOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInventoryOperationByIDReplyValidationError{
				field:  "InventoryOperation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInventoryOperationByIDReplyMultiError(errors)
	}

	return nil
}

// GetInventoryOperationByIDReplyMultiError is an error wrapping multiple
// validation errors returned by GetInventoryOperationByIDReply.ValidateAll()
// if the designated constraints aren't met.
type GetInventoryOperationByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInventoryOperationByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInventoryOperationByIDReplyMultiError) AllErrors() []error { return m }

// GetInventoryOperationByIDReplyValidationError is the validation error
// returned by GetInventoryOperationByIDReply.Validate if the designated
// constraints aren't met.
type GetInventoryOperationByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInventoryOperationByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInventoryOperationByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInventoryOperationByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInventoryOperationByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInventoryOperationByIDReplyValidationError) ErrorName() string {
	return "GetInventoryOperationByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetInventoryOperationByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInventoryOperationByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInventoryOperationByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInventoryOperationByIDReplyValidationError{}

// Validate checks the field values on ListInventoryOperationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInventoryOperationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInventoryOperationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListInventoryOperationRequestMultiError, or nil if none found.
func (m *ListInventoryOperationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInventoryOperationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInventoryOperationRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInventoryOperationRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInventoryOperationRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInventoryOperationRequestMultiError(errors)
	}

	return nil
}

// ListInventoryOperationRequestMultiError is an error wrapping multiple
// validation errors returned by ListInventoryOperationRequest.ValidateAll()
// if the designated constraints aren't met.
type ListInventoryOperationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInventoryOperationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInventoryOperationRequestMultiError) AllErrors() []error { return m }

// ListInventoryOperationRequestValidationError is the validation error
// returned by ListInventoryOperationRequest.Validate if the designated
// constraints aren't met.
type ListInventoryOperationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInventoryOperationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInventoryOperationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInventoryOperationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInventoryOperationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInventoryOperationRequestValidationError) ErrorName() string {
	return "ListInventoryOperationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInventoryOperationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInventoryOperationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInventoryOperationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInventoryOperationRequestValidationError{}

// Validate checks the field values on ListInventoryOperationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInventoryOperationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInventoryOperationReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInventoryOperationReplyMultiError, or nil if none found.
func (m *ListInventoryOperationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInventoryOperationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetInventoryOperations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInventoryOperationReplyValidationError{
						field:  fmt.Sprintf("InventoryOperations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInventoryOperationReplyValidationError{
						field:  fmt.Sprintf("InventoryOperations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInventoryOperationReplyValidationError{
					field:  fmt.Sprintf("InventoryOperations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInventoryOperationReplyMultiError(errors)
	}

	return nil
}

// ListInventoryOperationReplyMultiError is an error wrapping multiple
// validation errors returned by ListInventoryOperationReply.ValidateAll() if
// the designated constraints aren't met.
type ListInventoryOperationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInventoryOperationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInventoryOperationReplyMultiError) AllErrors() []error { return m }

// ListInventoryOperationReplyValidationError is the validation error returned
// by ListInventoryOperationReply.Validate if the designated constraints
// aren't met.
type ListInventoryOperationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInventoryOperationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInventoryOperationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInventoryOperationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInventoryOperationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInventoryOperationReplyValidationError) ErrorName() string {
	return "ListInventoryOperationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListInventoryOperationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInventoryOperationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInventoryOperationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInventoryOperationReplyValidationError{}
