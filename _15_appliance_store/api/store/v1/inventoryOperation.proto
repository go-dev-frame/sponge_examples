syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service inventoryOperation {
  // create inventoryOperation
  rpc Create(CreateInventoryOperationRequest) returns (CreateInventoryOperationReply) {
    option (google.api.http) = {
      post: "/api/v1/inventoryOperation"
      body: "*"
    };
  }

  // delete inventoryOperation by id
  rpc DeleteByID(DeleteInventoryOperationByIDRequest) returns (DeleteInventoryOperationByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/inventoryOperation/{id}"
    };
  }

  // update inventoryOperation by id
  rpc UpdateByID(UpdateInventoryOperationByIDRequest) returns (UpdateInventoryOperationByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/inventoryOperation/{id}"
      body: "*"
    };
  }

  // get inventoryOperation by id
  rpc GetByID(GetInventoryOperationByIDRequest) returns (GetInventoryOperationByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/inventoryOperation/{id}"
    };
  }

  // list of inventoryOperation by query parameters
  rpc List(ListInventoryOperationRequest) returns (ListInventoryOperationReply) {
    option (google.api.http) = {
      post: "/api/v1/inventoryOperation/list"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/inventoryOperation/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getInventoryOperation?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateInventoryOperationRequest {
	int64 inventoryID = 1;  // 库存记录ID
	uint32 storeID = 2;  // 门店ID
	uint32 skuID = 3;  // SKU ID
	int32 type = 4;  // 操作类型(1采购入库/2退货入库/3销售出库/4调拨出库/5调拨入库)
	int32 quantity = 5;  // 操作数量
	string relatedOrder = 6;  // 关联订单号
	string remark = 7;  // 备注
	uint32 operator = 8;  // 操作人ID
	string operateTime = 9;  // 操作时间
}

message CreateInventoryOperationReply {
  uint64 id = 1;
}

message DeleteInventoryOperationByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeleteInventoryOperationByIDReply {

}

message UpdateInventoryOperationByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // 操作ID
	int64 inventoryID = 2;  // 库存记录ID
	uint32 storeID = 3;  // 门店ID
	uint32 skuID = 4;  // SKU ID
	int32 type = 5;  // 操作类型(1采购入库/2退货入库/3销售出库/4调拨出库/5调拨入库)
	int32 quantity = 6;  // 操作数量
	string relatedOrder = 7;  // 关联订单号
	string remark = 8;  // 备注
	uint32 operator = 9;  // 操作人ID
	string operateTime = 10;  // 操作时间
}

message UpdateInventoryOperationByIDReply {

}

message InventoryOperation {
	uint64 id = 1;  // 操作ID
	int64 inventoryID = 2;  // 库存记录ID
	uint32 storeID = 3;  // 门店ID
	uint32 skuID = 4;  // SKU ID
	int32 type = 5;  // 操作类型(1采购入库/2退货入库/3销售出库/4调拨出库/5调拨入库)
	int32 quantity = 6;  // 操作数量
	string relatedOrder = 7;  // 关联订单号
	string remark = 8;  // 备注
	uint32 operator = 9;  // 操作人ID
	string operateTime = 10;  // 操作时间
}

message GetInventoryOperationByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetInventoryOperationByIDReply {
  InventoryOperation inventoryOperation = 1;
}

message ListInventoryOperationRequest {
  api.types.Params params = 1;
}

message ListInventoryOperationReply {
  int64 total = 1;
  repeated InventoryOperation inventoryOperations = 2;
}


