// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/productSku.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProductSkuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductSkuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductSkuRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductSkuRequestMultiError, or nil if none found.
func (m *CreateProductSkuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductSkuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductID

	// no validation rules for SkuCode

	// no validation rules for Attributes

	// no validation rules for Price

	// no validation rules for Stock

	if len(errors) > 0 {
		return CreateProductSkuRequestMultiError(errors)
	}

	return nil
}

// CreateProductSkuRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductSkuRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductSkuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductSkuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductSkuRequestMultiError) AllErrors() []error { return m }

// CreateProductSkuRequestValidationError is the validation error returned by
// CreateProductSkuRequest.Validate if the designated constraints aren't met.
type CreateProductSkuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductSkuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductSkuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductSkuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductSkuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductSkuRequestValidationError) ErrorName() string {
	return "CreateProductSkuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductSkuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductSkuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductSkuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductSkuRequestValidationError{}

// Validate checks the field values on CreateProductSkuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductSkuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductSkuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductSkuReplyMultiError, or nil if none found.
func (m *CreateProductSkuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductSkuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProductSkuReplyMultiError(errors)
	}

	return nil
}

// CreateProductSkuReplyMultiError is an error wrapping multiple validation
// errors returned by CreateProductSkuReply.ValidateAll() if the designated
// constraints aren't met.
type CreateProductSkuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductSkuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductSkuReplyMultiError) AllErrors() []error { return m }

// CreateProductSkuReplyValidationError is the validation error returned by
// CreateProductSkuReply.Validate if the designated constraints aren't met.
type CreateProductSkuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductSkuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductSkuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductSkuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductSkuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductSkuReplyValidationError) ErrorName() string {
	return "CreateProductSkuReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductSkuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductSkuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductSkuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductSkuReplyValidationError{}

// Validate checks the field values on DeleteProductSkuByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductSkuByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductSkuByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductSkuByIDRequestMultiError, or nil if none found.
func (m *DeleteProductSkuByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductSkuByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteProductSkuByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProductSkuByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteProductSkuByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProductSkuByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteProductSkuByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductSkuByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductSkuByIDRequestMultiError) AllErrors() []error { return m }

// DeleteProductSkuByIDRequestValidationError is the validation error returned
// by DeleteProductSkuByIDRequest.Validate if the designated constraints
// aren't met.
type DeleteProductSkuByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductSkuByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductSkuByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductSkuByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductSkuByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductSkuByIDRequestValidationError) ErrorName() string {
	return "DeleteProductSkuByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductSkuByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductSkuByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductSkuByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductSkuByIDRequestValidationError{}

// Validate checks the field values on DeleteProductSkuByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductSkuByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductSkuByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductSkuByIDReplyMultiError, or nil if none found.
func (m *DeleteProductSkuByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductSkuByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductSkuByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteProductSkuByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteProductSkuByIDReply.ValidateAll() if the
// designated constraints aren't met.
type DeleteProductSkuByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductSkuByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductSkuByIDReplyMultiError) AllErrors() []error { return m }

// DeleteProductSkuByIDReplyValidationError is the validation error returned by
// DeleteProductSkuByIDReply.Validate if the designated constraints aren't met.
type DeleteProductSkuByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductSkuByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductSkuByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductSkuByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductSkuByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductSkuByIDReplyValidationError) ErrorName() string {
	return "DeleteProductSkuByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductSkuByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductSkuByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductSkuByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductSkuByIDReplyValidationError{}

// Validate checks the field values on UpdateProductSkuByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductSkuByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductSkuByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductSkuByIDRequestMultiError, or nil if none found.
func (m *UpdateProductSkuByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductSkuByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductSkuByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductID

	// no validation rules for SkuCode

	// no validation rules for Attributes

	// no validation rules for Price

	// no validation rules for Stock

	if len(errors) > 0 {
		return UpdateProductSkuByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateProductSkuByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProductSkuByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductSkuByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductSkuByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductSkuByIDRequestMultiError) AllErrors() []error { return m }

// UpdateProductSkuByIDRequestValidationError is the validation error returned
// by UpdateProductSkuByIDRequest.Validate if the designated constraints
// aren't met.
type UpdateProductSkuByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductSkuByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductSkuByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductSkuByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductSkuByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductSkuByIDRequestValidationError) ErrorName() string {
	return "UpdateProductSkuByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductSkuByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductSkuByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductSkuByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductSkuByIDRequestValidationError{}

// Validate checks the field values on UpdateProductSkuByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductSkuByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductSkuByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductSkuByIDReplyMultiError, or nil if none found.
func (m *UpdateProductSkuByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductSkuByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProductSkuByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateProductSkuByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateProductSkuByIDReply.ValidateAll() if the
// designated constraints aren't met.
type UpdateProductSkuByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductSkuByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductSkuByIDReplyMultiError) AllErrors() []error { return m }

// UpdateProductSkuByIDReplyValidationError is the validation error returned by
// UpdateProductSkuByIDReply.Validate if the designated constraints aren't met.
type UpdateProductSkuByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductSkuByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductSkuByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductSkuByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductSkuByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductSkuByIDReplyValidationError) ErrorName() string {
	return "UpdateProductSkuByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductSkuByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductSkuByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductSkuByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductSkuByIDReplyValidationError{}

// Validate checks the field values on ProductSku with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductSku) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductSku with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductSkuMultiError, or
// nil if none found.
func (m *ProductSku) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductSku) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductID

	// no validation rules for SkuCode

	// no validation rules for Attributes

	// no validation rules for Price

	// no validation rules for Stock

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ProductSkuMultiError(errors)
	}

	return nil
}

// ProductSkuMultiError is an error wrapping multiple validation errors
// returned by ProductSku.ValidateAll() if the designated constraints aren't met.
type ProductSkuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductSkuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductSkuMultiError) AllErrors() []error { return m }

// ProductSkuValidationError is the validation error returned by
// ProductSku.Validate if the designated constraints aren't met.
type ProductSkuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductSkuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductSkuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductSkuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductSkuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductSkuValidationError) ErrorName() string { return "ProductSkuValidationError" }

// Error satisfies the builtin error interface
func (e ProductSkuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductSku.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductSkuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductSkuValidationError{}

// Validate checks the field values on GetProductSkuByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductSkuByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductSkuByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductSkuByIDRequestMultiError, or nil if none found.
func (m *GetProductSkuByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductSkuByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductSkuByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductSkuByIDRequestMultiError(errors)
	}

	return nil
}

// GetProductSkuByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductSkuByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductSkuByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductSkuByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductSkuByIDRequestMultiError) AllErrors() []error { return m }

// GetProductSkuByIDRequestValidationError is the validation error returned by
// GetProductSkuByIDRequest.Validate if the designated constraints aren't met.
type GetProductSkuByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductSkuByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductSkuByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductSkuByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductSkuByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductSkuByIDRequestValidationError) ErrorName() string {
	return "GetProductSkuByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductSkuByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductSkuByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductSkuByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductSkuByIDRequestValidationError{}

// Validate checks the field values on GetProductSkuByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductSkuByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductSkuByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductSkuByIDReplyMultiError, or nil if none found.
func (m *GetProductSkuByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductSkuByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProductSku()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductSkuByIDReplyValidationError{
					field:  "ProductSku",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductSkuByIDReplyValidationError{
					field:  "ProductSku",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductSku()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductSkuByIDReplyValidationError{
				field:  "ProductSku",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductSkuByIDReplyMultiError(errors)
	}

	return nil
}

// GetProductSkuByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetProductSkuByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetProductSkuByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductSkuByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductSkuByIDReplyMultiError) AllErrors() []error { return m }

// GetProductSkuByIDReplyValidationError is the validation error returned by
// GetProductSkuByIDReply.Validate if the designated constraints aren't met.
type GetProductSkuByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductSkuByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductSkuByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductSkuByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductSkuByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductSkuByIDReplyValidationError) ErrorName() string {
	return "GetProductSkuByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductSkuByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductSkuByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductSkuByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductSkuByIDReplyValidationError{}

// Validate checks the field values on ListProductSkuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductSkuRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductSkuRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductSkuRequestMultiError, or nil if none found.
func (m *ListProductSkuRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductSkuRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProductSkuRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProductSkuRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductSkuRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListProductSkuRequestMultiError(errors)
	}

	return nil
}

// ListProductSkuRequestMultiError is an error wrapping multiple validation
// errors returned by ListProductSkuRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProductSkuRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductSkuRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductSkuRequestMultiError) AllErrors() []error { return m }

// ListProductSkuRequestValidationError is the validation error returned by
// ListProductSkuRequest.Validate if the designated constraints aren't met.
type ListProductSkuRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductSkuRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductSkuRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductSkuRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductSkuRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductSkuRequestValidationError) ErrorName() string {
	return "ListProductSkuRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductSkuRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductSkuRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductSkuRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductSkuRequestValidationError{}

// Validate checks the field values on ListProductSkuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductSkuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductSkuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductSkuReplyMultiError, or nil if none found.
func (m *ListProductSkuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductSkuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetProductSkus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductSkuReplyValidationError{
						field:  fmt.Sprintf("ProductSkus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductSkuReplyValidationError{
						field:  fmt.Sprintf("ProductSkus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductSkuReplyValidationError{
					field:  fmt.Sprintf("ProductSkus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductSkuReplyMultiError(errors)
	}

	return nil
}

// ListProductSkuReplyMultiError is an error wrapping multiple validation
// errors returned by ListProductSkuReply.ValidateAll() if the designated
// constraints aren't met.
type ListProductSkuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductSkuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductSkuReplyMultiError) AllErrors() []error { return m }

// ListProductSkuReplyValidationError is the validation error returned by
// ListProductSkuReply.Validate if the designated constraints aren't met.
type ListProductSkuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductSkuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductSkuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductSkuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductSkuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductSkuReplyValidationError) ErrorName() string {
	return "ListProductSkuReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductSkuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductSkuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductSkuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductSkuReplyValidationError{}
