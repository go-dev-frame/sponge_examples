// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/inventory.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateInventoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInventoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInventoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInventoryRequestMultiError, or nil if none found.
func (m *CreateInventoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInventoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StoreID

	// no validation rules for SkuID

	// no validation rules for Quantity

	// no validation rules for SafetyStock

	if len(errors) > 0 {
		return CreateInventoryRequestMultiError(errors)
	}

	return nil
}

// CreateInventoryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInventoryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInventoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInventoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInventoryRequestMultiError) AllErrors() []error { return m }

// CreateInventoryRequestValidationError is the validation error returned by
// CreateInventoryRequest.Validate if the designated constraints aren't met.
type CreateInventoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInventoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInventoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInventoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInventoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInventoryRequestValidationError) ErrorName() string {
	return "CreateInventoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInventoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInventoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInventoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInventoryRequestValidationError{}

// Validate checks the field values on CreateInventoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInventoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInventoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInventoryReplyMultiError, or nil if none found.
func (m *CreateInventoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInventoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateInventoryReplyMultiError(errors)
	}

	return nil
}

// CreateInventoryReplyMultiError is an error wrapping multiple validation
// errors returned by CreateInventoryReply.ValidateAll() if the designated
// constraints aren't met.
type CreateInventoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInventoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInventoryReplyMultiError) AllErrors() []error { return m }

// CreateInventoryReplyValidationError is the validation error returned by
// CreateInventoryReply.Validate if the designated constraints aren't met.
type CreateInventoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInventoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInventoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInventoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInventoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInventoryReplyValidationError) ErrorName() string {
	return "CreateInventoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInventoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInventoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInventoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInventoryReplyValidationError{}

// Validate checks the field values on DeleteInventoryByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInventoryByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInventoryByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInventoryByIDRequestMultiError, or nil if none found.
func (m *DeleteInventoryByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInventoryByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteInventoryByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteInventoryByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteInventoryByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteInventoryByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteInventoryByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInventoryByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInventoryByIDRequestMultiError) AllErrors() []error { return m }

// DeleteInventoryByIDRequestValidationError is the validation error returned
// by DeleteInventoryByIDRequest.Validate if the designated constraints aren't met.
type DeleteInventoryByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInventoryByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInventoryByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInventoryByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInventoryByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInventoryByIDRequestValidationError) ErrorName() string {
	return "DeleteInventoryByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInventoryByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInventoryByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInventoryByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInventoryByIDRequestValidationError{}

// Validate checks the field values on DeleteInventoryByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInventoryByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInventoryByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInventoryByIDReplyMultiError, or nil if none found.
func (m *DeleteInventoryByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInventoryByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInventoryByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteInventoryByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteInventoryByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteInventoryByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInventoryByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInventoryByIDReplyMultiError) AllErrors() []error { return m }

// DeleteInventoryByIDReplyValidationError is the validation error returned by
// DeleteInventoryByIDReply.Validate if the designated constraints aren't met.
type DeleteInventoryByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInventoryByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInventoryByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInventoryByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInventoryByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInventoryByIDReplyValidationError) ErrorName() string {
	return "DeleteInventoryByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInventoryByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInventoryByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInventoryByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInventoryByIDReplyValidationError{}

// Validate checks the field values on UpdateInventoryByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInventoryByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInventoryByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInventoryByIDRequestMultiError, or nil if none found.
func (m *UpdateInventoryByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInventoryByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateInventoryByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StoreID

	// no validation rules for SkuID

	// no validation rules for Quantity

	// no validation rules for SafetyStock

	if len(errors) > 0 {
		return UpdateInventoryByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateInventoryByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateInventoryByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateInventoryByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInventoryByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInventoryByIDRequestMultiError) AllErrors() []error { return m }

// UpdateInventoryByIDRequestValidationError is the validation error returned
// by UpdateInventoryByIDRequest.Validate if the designated constraints aren't met.
type UpdateInventoryByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInventoryByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInventoryByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInventoryByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInventoryByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInventoryByIDRequestValidationError) ErrorName() string {
	return "UpdateInventoryByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInventoryByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInventoryByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInventoryByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInventoryByIDRequestValidationError{}

// Validate checks the field values on UpdateInventoryByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInventoryByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInventoryByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInventoryByIDReplyMultiError, or nil if none found.
func (m *UpdateInventoryByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInventoryByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateInventoryByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateInventoryByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateInventoryByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateInventoryByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInventoryByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInventoryByIDReplyMultiError) AllErrors() []error { return m }

// UpdateInventoryByIDReplyValidationError is the validation error returned by
// UpdateInventoryByIDReply.Validate if the designated constraints aren't met.
type UpdateInventoryByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInventoryByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInventoryByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInventoryByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInventoryByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInventoryByIDReplyValidationError) ErrorName() string {
	return "UpdateInventoryByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInventoryByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInventoryByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInventoryByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInventoryByIDReplyValidationError{}

// Validate checks the field values on Inventory with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Inventory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Inventory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InventoryMultiError, or nil
// if none found.
func (m *Inventory) ValidateAll() error {
	return m.validate(true)
}

func (m *Inventory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StoreID

	// no validation rules for SkuID

	// no validation rules for Quantity

	// no validation rules for SafetyStock

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return InventoryMultiError(errors)
	}

	return nil
}

// InventoryMultiError is an error wrapping multiple validation errors returned
// by Inventory.ValidateAll() if the designated constraints aren't met.
type InventoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InventoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InventoryMultiError) AllErrors() []error { return m }

// InventoryValidationError is the validation error returned by
// Inventory.Validate if the designated constraints aren't met.
type InventoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InventoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InventoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InventoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InventoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InventoryValidationError) ErrorName() string { return "InventoryValidationError" }

// Error satisfies the builtin error interface
func (e InventoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInventory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InventoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InventoryValidationError{}

// Validate checks the field values on GetInventoryByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInventoryByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInventoryByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInventoryByIDRequestMultiError, or nil if none found.
func (m *GetInventoryByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInventoryByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetInventoryByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetInventoryByIDRequestMultiError(errors)
	}

	return nil
}

// GetInventoryByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetInventoryByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetInventoryByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInventoryByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInventoryByIDRequestMultiError) AllErrors() []error { return m }

// GetInventoryByIDRequestValidationError is the validation error returned by
// GetInventoryByIDRequest.Validate if the designated constraints aren't met.
type GetInventoryByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInventoryByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInventoryByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInventoryByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInventoryByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInventoryByIDRequestValidationError) ErrorName() string {
	return "GetInventoryByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInventoryByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInventoryByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInventoryByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInventoryByIDRequestValidationError{}

// Validate checks the field values on GetInventoryByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInventoryByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInventoryByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInventoryByIDReplyMultiError, or nil if none found.
func (m *GetInventoryByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInventoryByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInventory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInventoryByIDReplyValidationError{
					field:  "Inventory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInventoryByIDReplyValidationError{
					field:  "Inventory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInventory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInventoryByIDReplyValidationError{
				field:  "Inventory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInventoryByIDReplyMultiError(errors)
	}

	return nil
}

// GetInventoryByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetInventoryByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetInventoryByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInventoryByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInventoryByIDReplyMultiError) AllErrors() []error { return m }

// GetInventoryByIDReplyValidationError is the validation error returned by
// GetInventoryByIDReply.Validate if the designated constraints aren't met.
type GetInventoryByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInventoryByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInventoryByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInventoryByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInventoryByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInventoryByIDReplyValidationError) ErrorName() string {
	return "GetInventoryByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetInventoryByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInventoryByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInventoryByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInventoryByIDReplyValidationError{}

// Validate checks the field values on ListInventoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInventoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInventoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInventoryRequestMultiError, or nil if none found.
func (m *ListInventoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInventoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInventoryRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInventoryRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInventoryRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInventoryRequestMultiError(errors)
	}

	return nil
}

// ListInventoryRequestMultiError is an error wrapping multiple validation
// errors returned by ListInventoryRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInventoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInventoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInventoryRequestMultiError) AllErrors() []error { return m }

// ListInventoryRequestValidationError is the validation error returned by
// ListInventoryRequest.Validate if the designated constraints aren't met.
type ListInventoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInventoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInventoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInventoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInventoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInventoryRequestValidationError) ErrorName() string {
	return "ListInventoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInventoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInventoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInventoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInventoryRequestValidationError{}

// Validate checks the field values on ListInventoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInventoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInventoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInventoryReplyMultiError, or nil if none found.
func (m *ListInventoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInventoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetInventorys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInventoryReplyValidationError{
						field:  fmt.Sprintf("Inventorys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInventoryReplyValidationError{
						field:  fmt.Sprintf("Inventorys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInventoryReplyValidationError{
					field:  fmt.Sprintf("Inventorys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInventoryReplyMultiError(errors)
	}

	return nil
}

// ListInventoryReplyMultiError is an error wrapping multiple validation errors
// returned by ListInventoryReply.ValidateAll() if the designated constraints
// aren't met.
type ListInventoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInventoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInventoryReplyMultiError) AllErrors() []error { return m }

// ListInventoryReplyValidationError is the validation error returned by
// ListInventoryReply.Validate if the designated constraints aren't met.
type ListInventoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInventoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInventoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInventoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInventoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInventoryReplyValidationError) ErrorName() string {
	return "ListInventoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListInventoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInventoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInventoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInventoryReplyValidationError{}

// Validate checks the field values on ExecuteTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteTransferRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteTransferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteTransferRequestMultiError, or nil if none found.
func (m *ExecuteTransferRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteTransferRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromStoreID

	// no validation rules for ToStoreID

	if len(m.GetItems()) < 1 {
		err := ExecuteTransferRequestValidationError{
			field:  "Items",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecuteTransferRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecuteTransferRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecuteTransferRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ExecuteTransferRequestMultiError(errors)
	}

	return nil
}

// ExecuteTransferRequestMultiError is an error wrapping multiple validation
// errors returned by ExecuteTransferRequest.ValidateAll() if the designated
// constraints aren't met.
type ExecuteTransferRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteTransferRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteTransferRequestMultiError) AllErrors() []error { return m }

// ExecuteTransferRequestValidationError is the validation error returned by
// ExecuteTransferRequest.Validate if the designated constraints aren't met.
type ExecuteTransferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteTransferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteTransferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteTransferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteTransferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteTransferRequestValidationError) ErrorName() string {
	return "ExecuteTransferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteTransferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteTransferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteTransferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteTransferRequestValidationError{}

// Validate checks the field values on ExecuteTransferReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExecuteTransferReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteTransferReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExecuteTransferReplyMultiError, or nil if none found.
func (m *ExecuteTransferReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteTransferReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransferOrderID

	if len(errors) > 0 {
		return ExecuteTransferReplyMultiError(errors)
	}

	return nil
}

// ExecuteTransferReplyMultiError is an error wrapping multiple validation
// errors returned by ExecuteTransferReply.ValidateAll() if the designated
// constraints aren't met.
type ExecuteTransferReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteTransferReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteTransferReplyMultiError) AllErrors() []error { return m }

// ExecuteTransferReplyValidationError is the validation error returned by
// ExecuteTransferReply.Validate if the designated constraints aren't met.
type ExecuteTransferReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteTransferReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteTransferReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteTransferReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteTransferReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteTransferReplyValidationError) ErrorName() string {
	return "ExecuteTransferReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteTransferReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteTransferReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteTransferReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteTransferReplyValidationError{}

// Validate checks the field values on ExecuteTransferRequest_TransferItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ExecuteTransferRequest_TransferItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecuteTransferRequest_TransferItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ExecuteTransferRequest_TransferItemMultiError, or nil if none found.
func (m *ExecuteTransferRequest_TransferItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecuteTransferRequest_TransferItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SkuID

	if m.GetQuantity() <= 0 {
		err := ExecuteTransferRequest_TransferItemValidationError{
			field:  "Quantity",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExecuteTransferRequest_TransferItemMultiError(errors)
	}

	return nil
}

// ExecuteTransferRequest_TransferItemMultiError is an error wrapping multiple
// validation errors returned by
// ExecuteTransferRequest_TransferItem.ValidateAll() if the designated
// constraints aren't met.
type ExecuteTransferRequest_TransferItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecuteTransferRequest_TransferItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecuteTransferRequest_TransferItemMultiError) AllErrors() []error { return m }

// ExecuteTransferRequest_TransferItemValidationError is the validation error
// returned by ExecuteTransferRequest_TransferItem.Validate if the designated
// constraints aren't met.
type ExecuteTransferRequest_TransferItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecuteTransferRequest_TransferItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecuteTransferRequest_TransferItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecuteTransferRequest_TransferItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecuteTransferRequest_TransferItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecuteTransferRequest_TransferItemValidationError) ErrorName() string {
	return "ExecuteTransferRequest_TransferItemValidationError"
}

// Error satisfies the builtin error interface
func (e ExecuteTransferRequest_TransferItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecuteTransferRequest_TransferItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecuteTransferRequest_TransferItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecuteTransferRequest_TransferItemValidationError{}
