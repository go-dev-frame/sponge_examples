// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/product.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CategoryID

	// no validation rules for Brand

	// no validation rules for Model

	// no validation rules for Spec

	// no validation rules for Description

	// no validation rules for Price

	// no validation rules for WarrantyMonths

	// no validation rules for ServiceTerms

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductReplyMultiError, or nil if none found.
func (m *CreateProductReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProductReplyMultiError(errors)
	}

	return nil
}

// CreateProductReplyMultiError is an error wrapping multiple validation errors
// returned by CreateProductReply.ValidateAll() if the designated constraints
// aren't met.
type CreateProductReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductReplyMultiError) AllErrors() []error { return m }

// CreateProductReplyValidationError is the validation error returned by
// CreateProductReply.Validate if the designated constraints aren't met.
type CreateProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductReplyValidationError) ErrorName() string {
	return "CreateProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductReplyValidationError{}

// Validate checks the field values on DeleteProductByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIDRequestMultiError, or nil if none found.
func (m *DeleteProductByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteProductByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProductByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteProductByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIDRequestMultiError) AllErrors() []error { return m }

// DeleteProductByIDRequestValidationError is the validation error returned by
// DeleteProductByIDRequest.Validate if the designated constraints aren't met.
type DeleteProductByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIDRequestValidationError) ErrorName() string {
	return "DeleteProductByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIDRequestValidationError{}

// Validate checks the field values on DeleteProductByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIDReplyMultiError, or nil if none found.
func (m *DeleteProductByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteProductByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIDReplyMultiError) AllErrors() []error { return m }

// DeleteProductByIDReplyValidationError is the validation error returned by
// DeleteProductByIDReply.Validate if the designated constraints aren't met.
type DeleteProductByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIDReplyValidationError) ErrorName() string {
	return "DeleteProductByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIDReplyValidationError{}

// Validate checks the field values on UpdateProductByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductByIDRequestMultiError, or nil if none found.
func (m *UpdateProductByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for CategoryID

	// no validation rules for Brand

	// no validation rules for Model

	// no validation rules for Spec

	// no validation rules for Description

	// no validation rules for Price

	// no validation rules for WarrantyMonths

	// no validation rules for ServiceTerms

	if len(errors) > 0 {
		return UpdateProductByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateProductByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductByIDRequestMultiError) AllErrors() []error { return m }

// UpdateProductByIDRequestValidationError is the validation error returned by
// UpdateProductByIDRequest.Validate if the designated constraints aren't met.
type UpdateProductByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductByIDRequestValidationError) ErrorName() string {
	return "UpdateProductByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductByIDRequestValidationError{}

// Validate checks the field values on UpdateProductByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductByIDReplyMultiError, or nil if none found.
func (m *UpdateProductByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProductByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateProductByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateProductByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductByIDReplyMultiError) AllErrors() []error { return m }

// UpdateProductByIDReplyValidationError is the validation error returned by
// UpdateProductByIDReply.Validate if the designated constraints aren't met.
type UpdateProductByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductByIDReplyValidationError) ErrorName() string {
	return "UpdateProductByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductByIDReplyValidationError{}

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CategoryID

	// no validation rules for Brand

	// no validation rules for Model

	// no validation rules for Spec

	// no validation rules for Description

	// no validation rules for Price

	// no validation rules for WarrantyMonths

	// no validation rules for ServiceTerms

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on GetProductByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIDRequestMultiError, or nil if none found.
func (m *GetProductByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductByIDRequestMultiError(errors)
	}

	return nil
}

// GetProductByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetProductByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetProductByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIDRequestMultiError) AllErrors() []error { return m }

// GetProductByIDRequestValidationError is the validation error returned by
// GetProductByIDRequest.Validate if the designated constraints aren't met.
type GetProductByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIDRequestValidationError) ErrorName() string {
	return "GetProductByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIDRequestValidationError{}

// Validate checks the field values on GetProductByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductByIDReplyMultiError, or nil if none found.
func (m *GetProductByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProduct()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductByIDReplyValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductByIDReplyValidationError{
					field:  "Product",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProduct()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductByIDReplyValidationError{
				field:  "Product",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductByIDReplyMultiError(errors)
	}

	return nil
}

// GetProductByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetProductByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetProductByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductByIDReplyMultiError) AllErrors() []error { return m }

// GetProductByIDReplyValidationError is the validation error returned by
// GetProductByIDReply.Validate if the designated constraints aren't met.
type GetProductByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductByIDReplyValidationError) ErrorName() string {
	return "GetProductByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductByIDReplyValidationError{}

// Validate checks the field values on ListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductRequestMultiError, or nil if none found.
func (m *ListProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProductRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProductRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListProductRequestMultiError(errors)
	}

	return nil
}

// ListProductRequestMultiError is an error wrapping multiple validation errors
// returned by ListProductRequest.ValidateAll() if the designated constraints
// aren't met.
type ListProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductRequestMultiError) AllErrors() []error { return m }

// ListProductRequestValidationError is the validation error returned by
// ListProductRequest.Validate if the designated constraints aren't met.
type ListProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductRequestValidationError) ErrorName() string {
	return "ListProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductRequestValidationError{}

// Validate checks the field values on ListProductReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListProductReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductReplyMultiError, or nil if none found.
func (m *ListProductReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetProducts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductReplyValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductReplyValidationError{
						field:  fmt.Sprintf("Products[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductReplyValidationError{
					field:  fmt.Sprintf("Products[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductReplyMultiError(errors)
	}

	return nil
}

// ListProductReplyMultiError is an error wrapping multiple validation errors
// returned by ListProductReply.ValidateAll() if the designated constraints
// aren't met.
type ListProductReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductReplyMultiError) AllErrors() []error { return m }

// ListProductReplyValidationError is the validation error returned by
// ListProductReply.Validate if the designated constraints aren't met.
type ListProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductReplyValidationError) ErrorName() string { return "ListProductReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductReplyValidationError{}
