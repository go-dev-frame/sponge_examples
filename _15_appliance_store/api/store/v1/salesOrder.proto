syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service salesOrder {
  // create salesOrder
  rpc Create(CreateSalesOrderRequest) returns (CreateSalesOrderReply) {
    option (google.api.http) = {
      post: "/api/v1/salesOrder"
      body: "*"
    };
  }

  // delete salesOrder by id
  rpc DeleteByID(DeleteSalesOrderByIDRequest) returns (DeleteSalesOrderByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/salesOrder/{id}"
    };
  }

  // update salesOrder by id
  rpc UpdateByID(UpdateSalesOrderByIDRequest) returns (UpdateSalesOrderByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/salesOrder/{id}"
      body: "*"
    };
  }

  // get salesOrder by id
  rpc GetByID(GetSalesOrderByIDRequest) returns (GetSalesOrderByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/salesOrder/{id}"
    };
  }

  // list of salesOrder by query parameters
  rpc List(ListSalesOrderRequest) returns (ListSalesOrderReply) {
    option (google.api.http) = {
      post: "/api/v1/salesOrder/list"
      body: "*"
    };
  }

  // --------------------------------------------

  // 生成热销商品分析报告
  // 实现逻辑：
  // 1. 按指定时间范围统计销量
  // 2. 计算商品销售增长率
  // 3. 关联库存数据标记滞销风险
  // 4. 生成可视化数据格式（JSON/CSV）
  rpc GenerateHotSalesReport(GenerateHotSalesReportRequest) returns (GenerateHotSalesReportReply) {
    option (google.api.http) = {
      get: "/api/v1/salesOrder/hot-sales"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/salesOrder/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getSalesOrder?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateSalesOrderRequest {
	uint32 storeID = 1;  // 门店ID
	uint32 customerID = 2;  // 客户ID
	string totalAmount = 3;  // 订单总额
	int32 status = 4;  // 状态(0待支付/1已支付/2配送中/3已完成/4已退货)
	int32 paymentMethod = 5;  // 支付方式(1现金/2微信/3支付宝/4刷卡)
}

message CreateSalesOrderReply {
  string id = 1;
}

message DeleteSalesOrderByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message DeleteSalesOrderByIDReply {

}

message UpdateSalesOrderByIDRequest {
	string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];  // 订单号（规则：YYYYMMDDHHMMSSmmm+6位序列）
	uint32 storeID = 2;  // 门店ID
	uint32 customerID = 3;  // 客户ID
	string totalAmount = 4;  // 订单总额
	int32 status = 5;  // 状态(0待支付/1已支付/2配送中/3已完成/4已退货)
	int32 paymentMethod = 6;  // 支付方式(1现金/2微信/3支付宝/4刷卡)
}

message UpdateSalesOrderByIDReply {

}

message SalesOrder {
	string id = 1;  // 订单号（规则：YYYYMMDDHHMMSSmmm+6位序列）
	uint32 storeID = 2;  // 门店ID
	uint32 customerID = 3;  // 客户ID
	string totalAmount = 4;  // 订单总额
	int32 status = 5;  // 状态(0待支付/1已支付/2配送中/3已完成/4已退货)
	int32 paymentMethod = 6;  // 支付方式(1现金/2微信/3支付宝/4刷卡)
	string createdAt = 7;  // 创建时间
	string updatedAt = 8;  // 更新时间
}

message GetSalesOrderByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message GetSalesOrderByIDReply {
  SalesOrder salesOrder = 1;
}

message ListSalesOrderRequest {
  api.types.Params params = 1;
}

message ListSalesOrderReply {
  int64 total = 1;
  repeated SalesOrder salesOrders = 2;
}

// ---------------------------------------------------------------

message GenerateHotSalesReportRequest {
  string startTime = 1 [(validate.rules).string = {pattern: "^\\d{4}-\\d{2}-\\d{2}$"}]; // 开始日期YYYY-MM-DD
  string endTime = 2 [(validate.rules).string = {pattern: "^\\d{4}-\\d{2}-\\d{2}$"}]; // 结束日期YYYY-MM-DD
  uint32 topN = 3 [(validate.rules).uint32 = {gte:5, lte:100}]; // 排名前N的热销商品
}

message GenerateHotSalesReportReply {
  message HotSaleItem {
    uint32 skuID = 1; // 商品SKU ID
    string skuName = 2; // 商品名称
    int64 totalSold = 3; // 总销量
    double growthRate = 4; // 环比增长率
    bool overstockRisk = 5; // 滞销风险标记
  }
  repeated HotSaleItem items = 1; // 热销商品列表
  string reportTime = 2; // 报告生成时间
}
