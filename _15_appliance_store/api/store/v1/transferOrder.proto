syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service transferOrder {
  // create transferOrder
  rpc Create(CreateTransferOrderRequest) returns (CreateTransferOrderReply) {
    option (google.api.http) = {
      post: "/api/v1/transferOrder"
      body: "*"
    };
  }

  // delete transferOrder by id
  rpc DeleteByID(DeleteTransferOrderByIDRequest) returns (DeleteTransferOrderByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/transferOrder/{id}"
    };
  }

  // update transferOrder by id
  rpc UpdateByID(UpdateTransferOrderByIDRequest) returns (UpdateTransferOrderByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/transferOrder/{id}"
      body: "*"
    };
  }

  // get transferOrder by id
  rpc GetByID(GetTransferOrderByIDRequest) returns (GetTransferOrderByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/transferOrder/{id}"
    };
  }

  // list of transferOrder by query parameters
  rpc List(ListTransferOrderRequest) returns (ListTransferOrderReply) {
    option (google.api.http) = {
      post: "/api/v1/transferOrder/list"
      body: "*"
    };
  }

  // -------------------------------------------

  // 库存调拨预检查
  rpc PrecheckTransfer(PrecheckTransferRequest) returns (PrecheckTransferReply) {
    option (google.api.http) = {
      post: "/api/v1/transferOrder/precheck"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/transferOrder/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getTransferOrder?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreateTransferOrderRequest {
	uint32 fromStore = 1;  // 调出门店
	uint32 toStore = 2;  // 调入门店
	int32 totalQuantity = 3;  // 总调拨数量
	int32 status = 4;  // 状态(0待处理/1已完成)
	string completeTime = 5;  // 完成时间
}

message CreateTransferOrderReply {
  string id = 1;
}

message DeleteTransferOrderByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message DeleteTransferOrderByIDReply {

}

message UpdateTransferOrderByIDRequest {
	string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];  // 调拨单号
	uint32 fromStore = 2;  // 调出门店
	uint32 toStore = 3;  // 调入门店
	int32 totalQuantity = 4;  // 总调拨数量
	int32 status = 5;  // 状态(0待处理/1已完成)
	string completeTime = 6;  // 完成时间
}

message UpdateTransferOrderByIDReply {

}

message TransferOrder {
	string id = 1;  // 调拨单号
	uint32 fromStore = 2;  // 调出门店
	uint32 toStore = 3;  // 调入门店
	int32 totalQuantity = 4;  // 总调拨数量
	int32 status = 5;  // 状态(0待处理/1已完成)
	string createdAt = 6;  // 创建时间
	string completeTime = 7;  // 完成时间
}

message GetTransferOrderByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message GetTransferOrderByIDReply {
  TransferOrder transferOrder = 1;
}

message ListTransferOrderRequest {
  api.types.Params params = 1;
}

message ListTransferOrderReply {
  int64 total = 1;
  repeated TransferOrder transferOrders = 2;
}

// ------------------------------------------

message PrecheckTransferRequest {
  uint32 fromStore = 1;  // 调出店铺
  uint32 toStore = 2;    // 调入店铺
  repeated TransferItem items = 3; // 调拨商品清单
}

message TransferItem {
  uint32 skuID = 1;     // SKU编号
  uint32 quantity = 2;   // 调拨数量
}

message PrecheckTransferReply {
  message StockStatus {
    uint32 skuID = 1;
    bool available = 2;  // 是否可调拨
    int32 availableQty = 3; // 可用库存量
  }
  repeated StockStatus status = 1; // 各SKU预检结果
}
