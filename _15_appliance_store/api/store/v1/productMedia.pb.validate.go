// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/productMedia.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProductMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductMediaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductMediaRequestMultiError, or nil if none found.
func (m *CreateProductMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductID

	// no validation rules for Type

	// no validation rules for Url

	// no validation rules for SortOrder

	if len(errors) > 0 {
		return CreateProductMediaRequestMultiError(errors)
	}

	return nil
}

// CreateProductMediaRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductMediaRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateProductMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductMediaRequestMultiError) AllErrors() []error { return m }

// CreateProductMediaRequestValidationError is the validation error returned by
// CreateProductMediaRequest.Validate if the designated constraints aren't met.
type CreateProductMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductMediaRequestValidationError) ErrorName() string {
	return "CreateProductMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductMediaRequestValidationError{}

// Validate checks the field values on CreateProductMediaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductMediaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductMediaReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductMediaReplyMultiError, or nil if none found.
func (m *CreateProductMediaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductMediaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProductMediaReplyMultiError(errors)
	}

	return nil
}

// CreateProductMediaReplyMultiError is an error wrapping multiple validation
// errors returned by CreateProductMediaReply.ValidateAll() if the designated
// constraints aren't met.
type CreateProductMediaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductMediaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductMediaReplyMultiError) AllErrors() []error { return m }

// CreateProductMediaReplyValidationError is the validation error returned by
// CreateProductMediaReply.Validate if the designated constraints aren't met.
type CreateProductMediaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductMediaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductMediaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductMediaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductMediaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductMediaReplyValidationError) ErrorName() string {
	return "CreateProductMediaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductMediaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductMediaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductMediaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductMediaReplyValidationError{}

// Validate checks the field values on DeleteProductMediaByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductMediaByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductMediaByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProductMediaByIDRequestMultiError, or nil if none found.
func (m *DeleteProductMediaByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductMediaByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteProductMediaByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProductMediaByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteProductMediaByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteProductMediaByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteProductMediaByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductMediaByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductMediaByIDRequestMultiError) AllErrors() []error { return m }

// DeleteProductMediaByIDRequestValidationError is the validation error
// returned by DeleteProductMediaByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteProductMediaByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductMediaByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductMediaByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductMediaByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductMediaByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductMediaByIDRequestValidationError) ErrorName() string {
	return "DeleteProductMediaByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductMediaByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductMediaByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductMediaByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductMediaByIDRequestValidationError{}

// Validate checks the field values on DeleteProductMediaByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductMediaByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductMediaByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductMediaByIDReplyMultiError, or nil if none found.
func (m *DeleteProductMediaByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductMediaByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductMediaByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteProductMediaByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteProductMediaByIDReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteProductMediaByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductMediaByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductMediaByIDReplyMultiError) AllErrors() []error { return m }

// DeleteProductMediaByIDReplyValidationError is the validation error returned
// by DeleteProductMediaByIDReply.Validate if the designated constraints
// aren't met.
type DeleteProductMediaByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductMediaByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductMediaByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductMediaByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductMediaByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductMediaByIDReplyValidationError) ErrorName() string {
	return "DeleteProductMediaByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductMediaByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductMediaByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductMediaByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductMediaByIDReplyValidationError{}

// Validate checks the field values on UpdateProductMediaByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductMediaByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductMediaByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProductMediaByIDRequestMultiError, or nil if none found.
func (m *UpdateProductMediaByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductMediaByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductMediaByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ProductID

	// no validation rules for Type

	// no validation rules for Url

	// no validation rules for SortOrder

	if len(errors) > 0 {
		return UpdateProductMediaByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateProductMediaByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProductMediaByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProductMediaByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductMediaByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductMediaByIDRequestMultiError) AllErrors() []error { return m }

// UpdateProductMediaByIDRequestValidationError is the validation error
// returned by UpdateProductMediaByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateProductMediaByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductMediaByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductMediaByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductMediaByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductMediaByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductMediaByIDRequestValidationError) ErrorName() string {
	return "UpdateProductMediaByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductMediaByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductMediaByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductMediaByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductMediaByIDRequestValidationError{}

// Validate checks the field values on UpdateProductMediaByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductMediaByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductMediaByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductMediaByIDReplyMultiError, or nil if none found.
func (m *UpdateProductMediaByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductMediaByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProductMediaByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateProductMediaByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateProductMediaByIDReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateProductMediaByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductMediaByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductMediaByIDReplyMultiError) AllErrors() []error { return m }

// UpdateProductMediaByIDReplyValidationError is the validation error returned
// by UpdateProductMediaByIDReply.Validate if the designated constraints
// aren't met.
type UpdateProductMediaByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductMediaByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductMediaByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductMediaByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductMediaByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductMediaByIDReplyValidationError) ErrorName() string {
	return "UpdateProductMediaByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductMediaByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductMediaByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductMediaByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductMediaByIDReplyValidationError{}

// Validate checks the field values on ProductMedia with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProductMedia) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductMedia with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProductMediaMultiError, or
// nil if none found.
func (m *ProductMedia) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductMedia) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductID

	// no validation rules for Type

	// no validation rules for Url

	// no validation rules for SortOrder

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ProductMediaMultiError(errors)
	}

	return nil
}

// ProductMediaMultiError is an error wrapping multiple validation errors
// returned by ProductMedia.ValidateAll() if the designated constraints aren't met.
type ProductMediaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMediaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMediaMultiError) AllErrors() []error { return m }

// ProductMediaValidationError is the validation error returned by
// ProductMedia.Validate if the designated constraints aren't met.
type ProductMediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductMediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductMediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductMediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductMediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductMediaValidationError) ErrorName() string { return "ProductMediaValidationError" }

// Error satisfies the builtin error interface
func (e ProductMediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductMedia.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductMediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductMediaValidationError{}

// Validate checks the field values on GetProductMediaByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductMediaByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductMediaByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductMediaByIDRequestMultiError, or nil if none found.
func (m *GetProductMediaByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductMediaByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductMediaByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductMediaByIDRequestMultiError(errors)
	}

	return nil
}

// GetProductMediaByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetProductMediaByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProductMediaByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductMediaByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductMediaByIDRequestMultiError) AllErrors() []error { return m }

// GetProductMediaByIDRequestValidationError is the validation error returned
// by GetProductMediaByIDRequest.Validate if the designated constraints aren't met.
type GetProductMediaByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductMediaByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductMediaByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductMediaByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductMediaByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductMediaByIDRequestValidationError) ErrorName() string {
	return "GetProductMediaByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductMediaByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductMediaByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductMediaByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductMediaByIDRequestValidationError{}

// Validate checks the field values on GetProductMediaByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductMediaByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductMediaByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductMediaByIDReplyMultiError, or nil if none found.
func (m *GetProductMediaByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductMediaByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProductMedia()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductMediaByIDReplyValidationError{
					field:  "ProductMedia",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductMediaByIDReplyValidationError{
					field:  "ProductMedia",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductMediaByIDReplyValidationError{
				field:  "ProductMedia",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductMediaByIDReplyMultiError(errors)
	}

	return nil
}

// GetProductMediaByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetProductMediaByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetProductMediaByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductMediaByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductMediaByIDReplyMultiError) AllErrors() []error { return m }

// GetProductMediaByIDReplyValidationError is the validation error returned by
// GetProductMediaByIDReply.Validate if the designated constraints aren't met.
type GetProductMediaByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductMediaByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductMediaByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductMediaByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductMediaByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductMediaByIDReplyValidationError) ErrorName() string {
	return "GetProductMediaByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductMediaByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductMediaByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductMediaByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductMediaByIDReplyValidationError{}

// Validate checks the field values on ListProductMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductMediaRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductMediaRequestMultiError, or nil if none found.
func (m *ListProductMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProductMediaRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProductMediaRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductMediaRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListProductMediaRequestMultiError(errors)
	}

	return nil
}

// ListProductMediaRequestMultiError is an error wrapping multiple validation
// errors returned by ListProductMediaRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProductMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductMediaRequestMultiError) AllErrors() []error { return m }

// ListProductMediaRequestValidationError is the validation error returned by
// ListProductMediaRequest.Validate if the designated constraints aren't met.
type ListProductMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductMediaRequestValidationError) ErrorName() string {
	return "ListProductMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductMediaRequestValidationError{}

// Validate checks the field values on ListProductMediaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductMediaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductMediaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductMediaReplyMultiError, or nil if none found.
func (m *ListProductMediaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductMediaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetProductMedias() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductMediaReplyValidationError{
						field:  fmt.Sprintf("ProductMedias[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductMediaReplyValidationError{
						field:  fmt.Sprintf("ProductMedias[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductMediaReplyValidationError{
					field:  fmt.Sprintf("ProductMedias[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductMediaReplyMultiError(errors)
	}

	return nil
}

// ListProductMediaReplyMultiError is an error wrapping multiple validation
// errors returned by ListProductMediaReply.ValidateAll() if the designated
// constraints aren't met.
type ListProductMediaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductMediaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductMediaReplyMultiError) AllErrors() []error { return m }

// ListProductMediaReplyValidationError is the validation error returned by
// ListProductMediaReply.Validate if the designated constraints aren't met.
type ListProductMediaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductMediaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductMediaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductMediaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductMediaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductMediaReplyValidationError) ErrorName() string {
	return "ListProductMediaReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductMediaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductMediaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductMediaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductMediaReplyValidationError{}

// Validate checks the field values on UploadMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadMediaRequestMultiError, or nil if none found.
func (m *UploadMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductID

	switch m.Data.(type) {

	case *UploadMediaRequest_Metadata:

		if all {
			switch v := interface{}(m.GetMetadata()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UploadMediaRequestValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UploadMediaRequestValidationError{
						field:  "Metadata",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UploadMediaRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UploadMediaRequest_Chunk:
		// no validation rules for Chunk

	}

	if len(errors) > 0 {
		return UploadMediaRequestMultiError(errors)
	}

	return nil
}

// UploadMediaRequestMultiError is an error wrapping multiple validation errors
// returned by UploadMediaRequest.ValidateAll() if the designated constraints
// aren't met.
type UploadMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadMediaRequestMultiError) AllErrors() []error { return m }

// UploadMediaRequestValidationError is the validation error returned by
// UploadMediaRequest.Validate if the designated constraints aren't met.
type UploadMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadMediaRequestValidationError) ErrorName() string {
	return "UploadMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadMediaRequestValidationError{}

// Validate checks the field values on MediaMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MediaMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MediaMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MediaMetadataMultiError, or
// nil if none found.
func (m *MediaMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *MediaMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Filename

	// no validation rules for MimeType

	// no validation rules for FileType

	if len(errors) > 0 {
		return MediaMetadataMultiError(errors)
	}

	return nil
}

// MediaMetadataMultiError is an error wrapping multiple validation errors
// returned by MediaMetadata.ValidateAll() if the designated constraints
// aren't met.
type MediaMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaMetadataMultiError) AllErrors() []error { return m }

// MediaMetadataValidationError is the validation error returned by
// MediaMetadata.Validate if the designated constraints aren't met.
type MediaMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaMetadataValidationError) ErrorName() string { return "MediaMetadataValidationError" }

// Error satisfies the builtin error interface
func (e MediaMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMediaMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaMetadataValidationError{}

// Validate checks the field values on UploadMediaReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UploadMediaReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadMediaReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadMediaReplyMultiError, or nil if none found.
func (m *UploadMediaReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadMediaReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaURL

	if len(errors) > 0 {
		return UploadMediaReplyMultiError(errors)
	}

	return nil
}

// UploadMediaReplyMultiError is an error wrapping multiple validation errors
// returned by UploadMediaReply.ValidateAll() if the designated constraints
// aren't met.
type UploadMediaReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadMediaReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadMediaReplyMultiError) AllErrors() []error { return m }

// UploadMediaReplyValidationError is the validation error returned by
// UploadMediaReply.Validate if the designated constraints aren't met.
type UploadMediaReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadMediaReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadMediaReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadMediaReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadMediaReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadMediaReplyValidationError) ErrorName() string { return "UploadMediaReplyValidationError" }

// Error satisfies the builtin error interface
func (e UploadMediaReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadMediaReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadMediaReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadMediaReplyValidationError{}
