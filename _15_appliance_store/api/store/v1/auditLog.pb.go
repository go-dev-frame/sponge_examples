// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.2
// source: api/store/v1/auditLog.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	types "store/api/types"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateAuditLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorID  uint32 `protobuf:"varint,1,opt,name=operatorID,proto3" json:"operatorID"`  // 操作人ID
	ActionType  string `protobuf:"bytes,2,opt,name=actionType,proto3" json:"actionType"`   // 操作类型
	TargetTable string `protobuf:"bytes,3,opt,name=targetTable,proto3" json:"targetTable"` // 目标表名
	TargetID    string `protobuf:"bytes,4,opt,name=targetID,proto3" json:"targetID"`       // 目标记录ID
	OldValue    string `protobuf:"bytes,5,opt,name=oldValue,proto3" json:"oldValue"`       // 旧值
	NewValue    string `protobuf:"bytes,6,opt,name=newValue,proto3" json:"newValue"`       // 新值
	Remark      string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark"`           // 备注
	OperateTime string `protobuf:"bytes,8,opt,name=operateTime,proto3" json:"operateTime"` // 操作时间
}

func (x *CreateAuditLogRequest) Reset() {
	*x = CreateAuditLogRequest{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAuditLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuditLogRequest) ProtoMessage() {}

func (x *CreateAuditLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuditLogRequest.ProtoReflect.Descriptor instead.
func (*CreateAuditLogRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAuditLogRequest) GetOperatorID() uint32 {
	if x != nil {
		return x.OperatorID
	}
	return 0
}

func (x *CreateAuditLogRequest) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *CreateAuditLogRequest) GetTargetTable() string {
	if x != nil {
		return x.TargetTable
	}
	return ""
}

func (x *CreateAuditLogRequest) GetTargetID() string {
	if x != nil {
		return x.TargetID
	}
	return ""
}

func (x *CreateAuditLogRequest) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *CreateAuditLogRequest) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *CreateAuditLogRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateAuditLogRequest) GetOperateTime() string {
	if x != nil {
		return x.OperateTime
	}
	return ""
}

type CreateAuditLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *CreateAuditLogReply) Reset() {
	*x = CreateAuditLogReply{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAuditLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAuditLogReply) ProtoMessage() {}

func (x *CreateAuditLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAuditLogReply.ProtoReflect.Descriptor instead.
func (*CreateAuditLogReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAuditLogReply) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAuditLogByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" uri:"id"`
}

func (x *DeleteAuditLogByIDRequest) Reset() {
	*x = DeleteAuditLogByIDRequest{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAuditLogByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuditLogByIDRequest) ProtoMessage() {}

func (x *DeleteAuditLogByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuditLogByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteAuditLogByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteAuditLogByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteAuditLogByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAuditLogByIDReply) Reset() {
	*x = DeleteAuditLogByIDReply{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAuditLogByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAuditLogByIDReply) ProtoMessage() {}

func (x *DeleteAuditLogByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAuditLogByIDReply.ProtoReflect.Descriptor instead.
func (*DeleteAuditLogByIDReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{3}
}

type UpdateAuditLogByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" uri:"id"`         // 日志ID
	OperatorID  uint32 `protobuf:"varint,2,opt,name=operatorID,proto3" json:"operatorID"`  // 操作人ID
	ActionType  string `protobuf:"bytes,3,opt,name=actionType,proto3" json:"actionType"`   // 操作类型
	TargetTable string `protobuf:"bytes,4,opt,name=targetTable,proto3" json:"targetTable"` // 目标表名
	TargetID    string `protobuf:"bytes,5,opt,name=targetID,proto3" json:"targetID"`       // 目标记录ID
	OldValue    string `protobuf:"bytes,6,opt,name=oldValue,proto3" json:"oldValue"`       // 旧值
	NewValue    string `protobuf:"bytes,7,opt,name=newValue,proto3" json:"newValue"`       // 新值
	Remark      string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark"`           // 备注
	OperateTime string `protobuf:"bytes,9,opt,name=operateTime,proto3" json:"operateTime"` // 操作时间
}

func (x *UpdateAuditLogByIDRequest) Reset() {
	*x = UpdateAuditLogByIDRequest{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAuditLogByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuditLogByIDRequest) ProtoMessage() {}

func (x *UpdateAuditLogByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuditLogByIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateAuditLogByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateAuditLogByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAuditLogByIDRequest) GetOperatorID() uint32 {
	if x != nil {
		return x.OperatorID
	}
	return 0
}

func (x *UpdateAuditLogByIDRequest) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *UpdateAuditLogByIDRequest) GetTargetTable() string {
	if x != nil {
		return x.TargetTable
	}
	return ""
}

func (x *UpdateAuditLogByIDRequest) GetTargetID() string {
	if x != nil {
		return x.TargetID
	}
	return ""
}

func (x *UpdateAuditLogByIDRequest) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *UpdateAuditLogByIDRequest) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *UpdateAuditLogByIDRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *UpdateAuditLogByIDRequest) GetOperateTime() string {
	if x != nil {
		return x.OperateTime
	}
	return ""
}

type UpdateAuditLogByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateAuditLogByIDReply) Reset() {
	*x = UpdateAuditLogByIDReply{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateAuditLogByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAuditLogByIDReply) ProtoMessage() {}

func (x *UpdateAuditLogByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAuditLogByIDReply.ProtoReflect.Descriptor instead.
func (*UpdateAuditLogByIDReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{5}
}

type AuditLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                  // 日志ID
	OperatorID  uint32 `protobuf:"varint,2,opt,name=operatorID,proto3" json:"operatorID"`  // 操作人ID
	ActionType  string `protobuf:"bytes,3,opt,name=actionType,proto3" json:"actionType"`   // 操作类型
	TargetTable string `protobuf:"bytes,4,opt,name=targetTable,proto3" json:"targetTable"` // 目标表名
	TargetID    string `protobuf:"bytes,5,opt,name=targetID,proto3" json:"targetID"`       // 目标记录ID
	OldValue    string `protobuf:"bytes,6,opt,name=oldValue,proto3" json:"oldValue"`       // 旧值
	NewValue    string `protobuf:"bytes,7,opt,name=newValue,proto3" json:"newValue"`       // 新值
	Remark      string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark"`           // 备注
	OperateTime string `protobuf:"bytes,9,opt,name=operateTime,proto3" json:"operateTime"` // 操作时间
	CreatedAt   string `protobuf:"bytes,10,opt,name=createdAt,proto3" json:"createdAt"`    // 创建时间
}

func (x *AuditLog) Reset() {
	*x = AuditLog{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLog) ProtoMessage() {}

func (x *AuditLog) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLog.ProtoReflect.Descriptor instead.
func (*AuditLog) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{6}
}

func (x *AuditLog) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AuditLog) GetOperatorID() uint32 {
	if x != nil {
		return x.OperatorID
	}
	return 0
}

func (x *AuditLog) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *AuditLog) GetTargetTable() string {
	if x != nil {
		return x.TargetTable
	}
	return ""
}

func (x *AuditLog) GetTargetID() string {
	if x != nil {
		return x.TargetID
	}
	return ""
}

func (x *AuditLog) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *AuditLog) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

func (x *AuditLog) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AuditLog) GetOperateTime() string {
	if x != nil {
		return x.OperateTime
	}
	return ""
}

func (x *AuditLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type GetAuditLogByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" uri:"id"`
}

func (x *GetAuditLogByIDRequest) Reset() {
	*x = GetAuditLogByIDRequest{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditLogByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLogByIDRequest) ProtoMessage() {}

func (x *GetAuditLogByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLogByIDRequest.ProtoReflect.Descriptor instead.
func (*GetAuditLogByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{7}
}

func (x *GetAuditLogByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAuditLogByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuditLog *AuditLog `protobuf:"bytes,1,opt,name=auditLog,proto3" json:"auditLog"`
}

func (x *GetAuditLogByIDReply) Reset() {
	*x = GetAuditLogByIDReply{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditLogByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLogByIDReply) ProtoMessage() {}

func (x *GetAuditLogByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLogByIDReply.ProtoReflect.Descriptor instead.
func (*GetAuditLogByIDReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{8}
}

func (x *GetAuditLogByIDReply) GetAuditLog() *AuditLog {
	if x != nil {
		return x.AuditLog
	}
	return nil
}

type ListAuditLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *types.Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (x *ListAuditLogRequest) Reset() {
	*x = ListAuditLogRequest{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogRequest) ProtoMessage() {}

func (x *ListAuditLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogRequest.ProtoReflect.Descriptor instead.
func (*ListAuditLogRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{9}
}

func (x *ListAuditLogRequest) GetParams() *types.Params {
	if x != nil {
		return x.Params
	}
	return nil
}

type ListAuditLogReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total     int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	AuditLogs []*AuditLog `protobuf:"bytes,2,rep,name=auditLogs,proto3" json:"auditLogs"`
}

func (x *ListAuditLogReply) Reset() {
	*x = ListAuditLogReply{}
	mi := &file_api_store_v1_auditLog_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAuditLogReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAuditLogReply) ProtoMessage() {}

func (x *ListAuditLogReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_auditLog_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAuditLogReply.ProtoReflect.Descriptor instead.
func (*ListAuditLogReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_auditLog_proto_rawDescGZIP(), []int{10}
}

func (x *ListAuditLogReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAuditLogReply) GetAuditLogs() []*AuditLog {
	if x != nil {
		return x.AuditLogs
	}
	return nil
}

var File_api_store_v1_auditLog_proto protoreflect.FileDescriptor

var file_api_store_v1_auditLog_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87,
	0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x41, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x14, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20,
	0x00, 0x9a, 0x84, 0x9e, 0x03, 0x08, 0x75, 0x72, 0x69, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xb1, 0x02,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x14, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00,
	0x9a, 0x84, 0x9e, 0x03, 0x08, 0x75, 0x72, 0x69, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xa8, 0x02, 0x0a,
	0x08, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x14, 0xfa,
	0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x9a, 0x84, 0x9e, 0x03, 0x08, 0x75, 0x72, 0x69, 0x3a, 0x22,
	0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x32, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x22, 0x40, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5f, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x34, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x09, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x32, 0xd8, 0x04, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x12, 0x6d, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a,
	0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x12, 0x7b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x7e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x64, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x1a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x72, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x6c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0xb4, 0x01, 0x92, 0x41, 0x99, 0x01, 0x12, 0x15, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x70, 0x69, 0x20, 0x64, 0x6f, 0x63, 0x73, 0x32, 0x03, 0x32, 0x2e, 0x30, 0x1a,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38, 0x30, 0x38, 0x30, 0x2a,
	0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x48, 0x0a, 0x46, 0x0a, 0x0a, 0x42, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12, 0x38, 0x08, 0x02, 0x12, 0x23, 0x54, 0x79, 0x70,
	0x65, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x2d, 0x6a, 0x77,
	0x74, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x02, 0x5a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_store_v1_auditLog_proto_rawDescOnce sync.Once
	file_api_store_v1_auditLog_proto_rawDescData = file_api_store_v1_auditLog_proto_rawDesc
)

func file_api_store_v1_auditLog_proto_rawDescGZIP() []byte {
	file_api_store_v1_auditLog_proto_rawDescOnce.Do(func() {
		file_api_store_v1_auditLog_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_store_v1_auditLog_proto_rawDescData)
	})
	return file_api_store_v1_auditLog_proto_rawDescData
}

var file_api_store_v1_auditLog_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_store_v1_auditLog_proto_goTypes = []any{
	(*CreateAuditLogRequest)(nil),     // 0: api.store.v1.CreateAuditLogRequest
	(*CreateAuditLogReply)(nil),       // 1: api.store.v1.CreateAuditLogReply
	(*DeleteAuditLogByIDRequest)(nil), // 2: api.store.v1.DeleteAuditLogByIDRequest
	(*DeleteAuditLogByIDReply)(nil),   // 3: api.store.v1.DeleteAuditLogByIDReply
	(*UpdateAuditLogByIDRequest)(nil), // 4: api.store.v1.UpdateAuditLogByIDRequest
	(*UpdateAuditLogByIDReply)(nil),   // 5: api.store.v1.UpdateAuditLogByIDReply
	(*AuditLog)(nil),                  // 6: api.store.v1.AuditLog
	(*GetAuditLogByIDRequest)(nil),    // 7: api.store.v1.GetAuditLogByIDRequest
	(*GetAuditLogByIDReply)(nil),      // 8: api.store.v1.GetAuditLogByIDReply
	(*ListAuditLogRequest)(nil),       // 9: api.store.v1.ListAuditLogRequest
	(*ListAuditLogReply)(nil),         // 10: api.store.v1.ListAuditLogReply
	(*types.Params)(nil),              // 11: api.types.Params
}
var file_api_store_v1_auditLog_proto_depIdxs = []int32{
	6,  // 0: api.store.v1.GetAuditLogByIDReply.auditLog:type_name -> api.store.v1.AuditLog
	11, // 1: api.store.v1.ListAuditLogRequest.params:type_name -> api.types.Params
	6,  // 2: api.store.v1.ListAuditLogReply.auditLogs:type_name -> api.store.v1.AuditLog
	0,  // 3: api.store.v1.auditLog.Create:input_type -> api.store.v1.CreateAuditLogRequest
	2,  // 4: api.store.v1.auditLog.DeleteByID:input_type -> api.store.v1.DeleteAuditLogByIDRequest
	4,  // 5: api.store.v1.auditLog.UpdateByID:input_type -> api.store.v1.UpdateAuditLogByIDRequest
	7,  // 6: api.store.v1.auditLog.GetByID:input_type -> api.store.v1.GetAuditLogByIDRequest
	9,  // 7: api.store.v1.auditLog.List:input_type -> api.store.v1.ListAuditLogRequest
	1,  // 8: api.store.v1.auditLog.Create:output_type -> api.store.v1.CreateAuditLogReply
	3,  // 9: api.store.v1.auditLog.DeleteByID:output_type -> api.store.v1.DeleteAuditLogByIDReply
	5,  // 10: api.store.v1.auditLog.UpdateByID:output_type -> api.store.v1.UpdateAuditLogByIDReply
	8,  // 11: api.store.v1.auditLog.GetByID:output_type -> api.store.v1.GetAuditLogByIDReply
	10, // 12: api.store.v1.auditLog.List:output_type -> api.store.v1.ListAuditLogReply
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_store_v1_auditLog_proto_init() }
func file_api_store_v1_auditLog_proto_init() {
	if File_api_store_v1_auditLog_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_store_v1_auditLog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_store_v1_auditLog_proto_goTypes,
		DependencyIndexes: file_api_store_v1_auditLog_proto_depIdxs,
		MessageInfos:      file_api_store_v1_auditLog_proto_msgTypes,
	}.Build()
	File_api_store_v1_auditLog_proto = out.File
	file_api_store_v1_auditLog_proto_rawDesc = nil
	file_api_store_v1_auditLog_proto_goTypes = nil
	file_api_store_v1_auditLog_proto_depIdxs = nil
}
