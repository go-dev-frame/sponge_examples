// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.2
// source: api/store/v1/serviceOrder.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	types "store/api/types"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateServiceOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerID     uint32 `protobuf:"varint,1,opt,name=customerID,proto3" json:"customerID"`        // 客户ID
	ProductID      uint32 `protobuf:"varint,2,opt,name=productID,proto3" json:"productID"`          // 产品ID
	FaultDesc      string `protobuf:"bytes,3,opt,name=faultDesc,proto3" json:"faultDesc"`           // 故障描述
	Status         int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status"`                // 状态(0待处理/1维修中/2已完成/3已关闭)
	TechnicianID   uint32 `protobuf:"varint,5,opt,name=technicianID,proto3" json:"technicianID"`    // 维修人员ID
	CompletionTime string `protobuf:"bytes,6,opt,name=completionTime,proto3" json:"completionTime"` // 完成时间
}

func (x *CreateServiceOrderRequest) Reset() {
	*x = CreateServiceOrderRequest{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceOrderRequest) ProtoMessage() {}

func (x *CreateServiceOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServiceOrderRequest) GetCustomerID() uint32 {
	if x != nil {
		return x.CustomerID
	}
	return 0
}

func (x *CreateServiceOrderRequest) GetProductID() uint32 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *CreateServiceOrderRequest) GetFaultDesc() string {
	if x != nil {
		return x.FaultDesc
	}
	return ""
}

func (x *CreateServiceOrderRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CreateServiceOrderRequest) GetTechnicianID() uint32 {
	if x != nil {
		return x.TechnicianID
	}
	return 0
}

func (x *CreateServiceOrderRequest) GetCompletionTime() string {
	if x != nil {
		return x.CompletionTime
	}
	return ""
}

type CreateServiceOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
}

func (x *CreateServiceOrderReply) Reset() {
	*x = CreateServiceOrderReply{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateServiceOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceOrderReply) ProtoMessage() {}

func (x *CreateServiceOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceOrderReply.ProtoReflect.Descriptor instead.
func (*CreateServiceOrderReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServiceOrderReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteServiceOrderByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" uri:"id"`
}

func (x *DeleteServiceOrderByIDRequest) Reset() {
	*x = DeleteServiceOrderByIDRequest{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceOrderByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceOrderByIDRequest) ProtoMessage() {}

func (x *DeleteServiceOrderByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceOrderByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceOrderByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteServiceOrderByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteServiceOrderByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServiceOrderByIDReply) Reset() {
	*x = DeleteServiceOrderByIDReply{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteServiceOrderByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceOrderByIDReply) ProtoMessage() {}

func (x *DeleteServiceOrderByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceOrderByIDReply.ProtoReflect.Descriptor instead.
func (*DeleteServiceOrderByIDReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{3}
}

type UpdateServiceOrderByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" uri:"id"`                // 工单号
	CustomerID     uint32 `protobuf:"varint,2,opt,name=customerID,proto3" json:"customerID"`        // 客户ID
	ProductID      uint32 `protobuf:"varint,3,opt,name=productID,proto3" json:"productID"`          // 产品ID
	FaultDesc      string `protobuf:"bytes,4,opt,name=faultDesc,proto3" json:"faultDesc"`           // 故障描述
	Status         int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status"`                // 状态(0待处理/1维修中/2已完成/3已关闭)
	TechnicianID   uint32 `protobuf:"varint,6,opt,name=technicianID,proto3" json:"technicianID"`    // 维修人员ID
	CompletionTime string `protobuf:"bytes,7,opt,name=completionTime,proto3" json:"completionTime"` // 完成时间
}

func (x *UpdateServiceOrderByIDRequest) Reset() {
	*x = UpdateServiceOrderByIDRequest{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceOrderByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceOrderByIDRequest) ProtoMessage() {}

func (x *UpdateServiceOrderByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceOrderByIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceOrderByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateServiceOrderByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateServiceOrderByIDRequest) GetCustomerID() uint32 {
	if x != nil {
		return x.CustomerID
	}
	return 0
}

func (x *UpdateServiceOrderByIDRequest) GetProductID() uint32 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *UpdateServiceOrderByIDRequest) GetFaultDesc() string {
	if x != nil {
		return x.FaultDesc
	}
	return ""
}

func (x *UpdateServiceOrderByIDRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UpdateServiceOrderByIDRequest) GetTechnicianID() uint32 {
	if x != nil {
		return x.TechnicianID
	}
	return 0
}

func (x *UpdateServiceOrderByIDRequest) GetCompletionTime() string {
	if x != nil {
		return x.CompletionTime
	}
	return ""
}

type UpdateServiceOrderByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateServiceOrderByIDReply) Reset() {
	*x = UpdateServiceOrderByIDReply{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceOrderByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceOrderByIDReply) ProtoMessage() {}

func (x *UpdateServiceOrderByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceOrderByIDReply.ProtoReflect.Descriptor instead.
func (*UpdateServiceOrderByIDReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{5}
}

type ServiceOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`                         // 工单号
	CustomerID     uint32 `protobuf:"varint,2,opt,name=customerID,proto3" json:"customerID"`        // 客户ID
	ProductID      uint32 `protobuf:"varint,3,opt,name=productID,proto3" json:"productID"`          // 产品ID
	FaultDesc      string `protobuf:"bytes,4,opt,name=faultDesc,proto3" json:"faultDesc"`           // 故障描述
	Status         int32  `protobuf:"varint,5,opt,name=status,proto3" json:"status"`                // 状态(0待处理/1维修中/2已完成/3已关闭)
	TechnicianID   uint32 `protobuf:"varint,6,opt,name=technicianID,proto3" json:"technicianID"`    // 维修人员ID
	CompletionTime string `protobuf:"bytes,7,opt,name=completionTime,proto3" json:"completionTime"` // 完成时间
	CreatedAt      string `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt"`           // 创建时间
	UpdatedAt      string `protobuf:"bytes,9,opt,name=updatedAt,proto3" json:"updatedAt"`           // 更新时间
}

func (x *ServiceOrder) Reset() {
	*x = ServiceOrder{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceOrder) ProtoMessage() {}

func (x *ServiceOrder) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceOrder.ProtoReflect.Descriptor instead.
func (*ServiceOrder) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{6}
}

func (x *ServiceOrder) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceOrder) GetCustomerID() uint32 {
	if x != nil {
		return x.CustomerID
	}
	return 0
}

func (x *ServiceOrder) GetProductID() uint32 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

func (x *ServiceOrder) GetFaultDesc() string {
	if x != nil {
		return x.FaultDesc
	}
	return ""
}

func (x *ServiceOrder) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ServiceOrder) GetTechnicianID() uint32 {
	if x != nil {
		return x.TechnicianID
	}
	return 0
}

func (x *ServiceOrder) GetCompletionTime() string {
	if x != nil {
		return x.CompletionTime
	}
	return ""
}

func (x *ServiceOrder) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ServiceOrder) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetServiceOrderByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id" uri:"id"`
}

func (x *GetServiceOrderByIDRequest) Reset() {
	*x = GetServiceOrderByIDRequest{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceOrderByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceOrderByIDRequest) ProtoMessage() {}

func (x *GetServiceOrderByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceOrderByIDRequest.ProtoReflect.Descriptor instead.
func (*GetServiceOrderByIDRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{7}
}

func (x *GetServiceOrderByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetServiceOrderByIDReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceOrder *ServiceOrder `protobuf:"bytes,1,opt,name=serviceOrder,proto3" json:"serviceOrder"`
}

func (x *GetServiceOrderByIDReply) Reset() {
	*x = GetServiceOrderByIDReply{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceOrderByIDReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceOrderByIDReply) ProtoMessage() {}

func (x *GetServiceOrderByIDReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceOrderByIDReply.ProtoReflect.Descriptor instead.
func (*GetServiceOrderByIDReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{8}
}

func (x *GetServiceOrderByIDReply) GetServiceOrder() *ServiceOrder {
	if x != nil {
		return x.ServiceOrder
	}
	return nil
}

type ListServiceOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params *types.Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (x *ListServiceOrderRequest) Reset() {
	*x = ListServiceOrderRequest{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceOrderRequest) ProtoMessage() {}

func (x *ListServiceOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceOrderRequest.ProtoReflect.Descriptor instead.
func (*ListServiceOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{9}
}

func (x *ListServiceOrderRequest) GetParams() *types.Params {
	if x != nil {
		return x.Params
	}
	return nil
}

type ListServiceOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	ServiceOrders []*ServiceOrder `protobuf:"bytes,2,rep,name=serviceOrders,proto3" json:"serviceOrders"`
}

func (x *ListServiceOrderReply) Reset() {
	*x = ListServiceOrderReply{}
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListServiceOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServiceOrderReply) ProtoMessage() {}

func (x *ListServiceOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_store_v1_serviceOrder_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServiceOrderReply.ProtoReflect.Descriptor instead.
func (*ListServiceOrderReply) Descriptor() ([]byte, []int) {
	return file_api_store_v1_serviceOrder_proto_rawDescGZIP(), []int{10}
}

func (x *ListServiceOrderReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListServiceOrderReply) GetServiceOrders() []*ServiceOrder {
	if x != nil {
		return x.ServiceOrders
	}
	return nil
}

var File_api_store_v1_serviceOrder_proto protoreflect.FileDescriptor

var file_api_store_v1_serviceOrder_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x15, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x74, 0x61, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdb, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x29, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x45, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x9a, 0x84, 0x9e, 0x03, 0x08, 0x75, 0x72, 0x69, 0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x85, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x9a, 0x84, 0x9e, 0x03, 0x08, 0x75, 0x72, 0x69,
	0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x9a, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x42, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x9a, 0x84, 0x9e, 0x03, 0x08, 0x75, 0x72, 0x69,
	0x3a, 0x22, 0x69, 0x64, 0x22, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x6f, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x32, 0x9a, 0x05, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x79, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a,
	0x01, 0x2a, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x3a, 0x01, 0x2a, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x7e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x78, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0xb4, 0x01, 0x92, 0x41, 0x99, 0x01,
	0x12, 0x15, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x70, 0x69, 0x20, 0x64, 0x6f,
	0x63, 0x73, 0x32, 0x03, 0x32, 0x2e, 0x30, 0x1a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f,
	0x73, 0x74, 0x3a, 0x38, 0x30, 0x38, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a,
	0x48, 0x0a, 0x46, 0x0a, 0x0a, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x38, 0x08, 0x02, 0x12, 0x23, 0x54, 0x79, 0x70, 0x65, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x20, 0x79, 0x6f, 0x75, 0x72, 0x2d, 0x6a, 0x77, 0x74, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x74, 0x6f, 0x20, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x5a, 0x15, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_store_v1_serviceOrder_proto_rawDescOnce sync.Once
	file_api_store_v1_serviceOrder_proto_rawDescData = file_api_store_v1_serviceOrder_proto_rawDesc
)

func file_api_store_v1_serviceOrder_proto_rawDescGZIP() []byte {
	file_api_store_v1_serviceOrder_proto_rawDescOnce.Do(func() {
		file_api_store_v1_serviceOrder_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_store_v1_serviceOrder_proto_rawDescData)
	})
	return file_api_store_v1_serviceOrder_proto_rawDescData
}

var file_api_store_v1_serviceOrder_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_store_v1_serviceOrder_proto_goTypes = []any{
	(*CreateServiceOrderRequest)(nil),     // 0: api.store.v1.CreateServiceOrderRequest
	(*CreateServiceOrderReply)(nil),       // 1: api.store.v1.CreateServiceOrderReply
	(*DeleteServiceOrderByIDRequest)(nil), // 2: api.store.v1.DeleteServiceOrderByIDRequest
	(*DeleteServiceOrderByIDReply)(nil),   // 3: api.store.v1.DeleteServiceOrderByIDReply
	(*UpdateServiceOrderByIDRequest)(nil), // 4: api.store.v1.UpdateServiceOrderByIDRequest
	(*UpdateServiceOrderByIDReply)(nil),   // 5: api.store.v1.UpdateServiceOrderByIDReply
	(*ServiceOrder)(nil),                  // 6: api.store.v1.ServiceOrder
	(*GetServiceOrderByIDRequest)(nil),    // 7: api.store.v1.GetServiceOrderByIDRequest
	(*GetServiceOrderByIDReply)(nil),      // 8: api.store.v1.GetServiceOrderByIDReply
	(*ListServiceOrderRequest)(nil),       // 9: api.store.v1.ListServiceOrderRequest
	(*ListServiceOrderReply)(nil),         // 10: api.store.v1.ListServiceOrderReply
	(*types.Params)(nil),                  // 11: api.types.Params
}
var file_api_store_v1_serviceOrder_proto_depIdxs = []int32{
	6,  // 0: api.store.v1.GetServiceOrderByIDReply.serviceOrder:type_name -> api.store.v1.ServiceOrder
	11, // 1: api.store.v1.ListServiceOrderRequest.params:type_name -> api.types.Params
	6,  // 2: api.store.v1.ListServiceOrderReply.serviceOrders:type_name -> api.store.v1.ServiceOrder
	0,  // 3: api.store.v1.serviceOrder.Create:input_type -> api.store.v1.CreateServiceOrderRequest
	2,  // 4: api.store.v1.serviceOrder.DeleteByID:input_type -> api.store.v1.DeleteServiceOrderByIDRequest
	4,  // 5: api.store.v1.serviceOrder.UpdateByID:input_type -> api.store.v1.UpdateServiceOrderByIDRequest
	7,  // 6: api.store.v1.serviceOrder.GetByID:input_type -> api.store.v1.GetServiceOrderByIDRequest
	9,  // 7: api.store.v1.serviceOrder.List:input_type -> api.store.v1.ListServiceOrderRequest
	1,  // 8: api.store.v1.serviceOrder.Create:output_type -> api.store.v1.CreateServiceOrderReply
	3,  // 9: api.store.v1.serviceOrder.DeleteByID:output_type -> api.store.v1.DeleteServiceOrderByIDReply
	5,  // 10: api.store.v1.serviceOrder.UpdateByID:output_type -> api.store.v1.UpdateServiceOrderByIDReply
	8,  // 11: api.store.v1.serviceOrder.GetByID:output_type -> api.store.v1.GetServiceOrderByIDReply
	10, // 12: api.store.v1.serviceOrder.List:output_type -> api.store.v1.ListServiceOrderReply
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_store_v1_serviceOrder_proto_init() }
func file_api_store_v1_serviceOrder_proto_init() {
	if File_api_store_v1_serviceOrder_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_store_v1_serviceOrder_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_store_v1_serviceOrder_proto_goTypes,
		DependencyIndexes: file_api_store_v1_serviceOrder_proto_depIdxs,
		MessageInfos:      file_api_store_v1_serviceOrder_proto_msgTypes,
	}.Build()
	File_api_store_v1_serviceOrder_proto = out.File
	file_api_store_v1_serviceOrder_proto_rawDesc = nil
	file_api_store_v1_serviceOrder_proto_goTypes = nil
	file_api_store_v1_serviceOrder_proto_depIdxs = nil
}
