syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service purchaseOrder {
  // 创建销售订单
  // 实现逻辑：
  // 1. 验证客户是否存在
  // 2. 检查库存可用性
  // 3. 计算订单总金额（含促销优惠）
  // 4. 生成唯一订单号
  // 5. 扣减库存
  // 6. 记录财务流水
  rpc Create(CreatePurchaseOrderRequest) returns (CreatePurchaseOrderReply) {
    option (google.api.http) = {
      post: "/api/v1/purchaseOrder"
      body: "*"
    };
  }

  // delete purchaseOrder by id
  rpc DeleteByID(DeletePurchaseOrderByIDRequest) returns (DeletePurchaseOrderByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/purchaseOrder/{id}"
    };
  }

  // update purchaseOrder by id
  rpc UpdateByID(UpdatePurchaseOrderByIDRequest) returns (UpdatePurchaseOrderByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/purchaseOrder/{id}"
      body: "*"
    };
  }

  // get purchaseOrder by id
  rpc GetByID(GetPurchaseOrderByIDRequest) returns (GetPurchaseOrderByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/purchaseOrder/{id}"
    };
  }

  // list of purchaseOrder by query parameters
  rpc List(ListPurchaseOrderRequest) returns (ListPurchaseOrderReply) {
    option (google.api.http) = {
      post: "/api/v1/purchaseOrder/list"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/purchaseOrder/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getPurchaseOrder?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreatePurchaseOrderRequest {
	uint32 supplierID = 1;  // 供应商ID
	string totalAmount = 2;  // 总金额
	int32 status = 3;  // 状态(0待审批/1已批准/2已到货)
	string expectedDate = 4;  // 预计到货日期
}

message CreatePurchaseOrderReply {
  string id = 1;
}

message DeletePurchaseOrderByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message DeletePurchaseOrderByIDReply {

}

message UpdatePurchaseOrderByIDRequest {
	string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];  // 采购单号（规则：YYYYMMDDHHMMSSmmm+6位序列）
	uint32 supplierID = 2;  // 供应商ID
	string totalAmount = 3;  // 总金额
	int32 status = 4;  // 状态(0待审批/1已批准/2已到货)
	string expectedDate = 5;  // 预计到货日期
}

message UpdatePurchaseOrderByIDReply {

}

message PurchaseOrder {
	string id = 1;  // 采购单号（规则：YYYYMMDDHHMMSSmmm+6位序列）
	uint32 supplierID = 2;  // 供应商ID
	string totalAmount = 3;  // 总金额
	int32 status = 4;  // 状态(0待审批/1已批准/2已到货)
	string expectedDate = 5;  // 预计到货日期
	string createdAt = 6;  // 创建时间
	string updatedAt = 7;  // 更新时间
}

message GetPurchaseOrderByIDRequest {
  string id = 1 [(validate.rules).string.min_len = 1, (tagger.tags) = "uri:\"id\""];
}

message GetPurchaseOrderByIDReply {
  PurchaseOrder purchaseOrder = 1;
}

message ListPurchaseOrderRequest {
  api.types.Params params = 1;
}

message ListPurchaseOrderReply {
  int64 total = 1;
  repeated PurchaseOrder purchaseOrders = 2;
}


