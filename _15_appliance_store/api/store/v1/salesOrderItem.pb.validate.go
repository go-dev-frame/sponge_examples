// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/salesOrderItem.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSalesOrderItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSalesOrderItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSalesOrderItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSalesOrderItemRequestMultiError, or nil if none found.
func (m *CreateSalesOrderItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSalesOrderItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	// no validation rules for SkuID

	// no validation rules for Quantity

	// no validation rules for Price

	// no validation rules for UnitPrice

	if len(errors) > 0 {
		return CreateSalesOrderItemRequestMultiError(errors)
	}

	return nil
}

// CreateSalesOrderItemRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSalesOrderItemRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateSalesOrderItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSalesOrderItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSalesOrderItemRequestMultiError) AllErrors() []error { return m }

// CreateSalesOrderItemRequestValidationError is the validation error returned
// by CreateSalesOrderItemRequest.Validate if the designated constraints
// aren't met.
type CreateSalesOrderItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSalesOrderItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSalesOrderItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSalesOrderItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSalesOrderItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSalesOrderItemRequestValidationError) ErrorName() string {
	return "CreateSalesOrderItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSalesOrderItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSalesOrderItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSalesOrderItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSalesOrderItemRequestValidationError{}

// Validate checks the field values on CreateSalesOrderItemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSalesOrderItemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSalesOrderItemReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSalesOrderItemReplyMultiError, or nil if none found.
func (m *CreateSalesOrderItemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSalesOrderItemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateSalesOrderItemReplyMultiError(errors)
	}

	return nil
}

// CreateSalesOrderItemReplyMultiError is an error wrapping multiple validation
// errors returned by CreateSalesOrderItemReply.ValidateAll() if the
// designated constraints aren't met.
type CreateSalesOrderItemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSalesOrderItemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSalesOrderItemReplyMultiError) AllErrors() []error { return m }

// CreateSalesOrderItemReplyValidationError is the validation error returned by
// CreateSalesOrderItemReply.Validate if the designated constraints aren't met.
type CreateSalesOrderItemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSalesOrderItemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSalesOrderItemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSalesOrderItemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSalesOrderItemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSalesOrderItemReplyValidationError) ErrorName() string {
	return "CreateSalesOrderItemReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSalesOrderItemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSalesOrderItemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSalesOrderItemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSalesOrderItemReplyValidationError{}

// Validate checks the field values on DeleteSalesOrderItemByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSalesOrderItemByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSalesOrderItemByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteSalesOrderItemByIDRequestMultiError, or nil if none found.
func (m *DeleteSalesOrderItemByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSalesOrderItemByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteSalesOrderItemByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSalesOrderItemByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteSalesOrderItemByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteSalesOrderItemByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteSalesOrderItemByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSalesOrderItemByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSalesOrderItemByIDRequestMultiError) AllErrors() []error { return m }

// DeleteSalesOrderItemByIDRequestValidationError is the validation error
// returned by DeleteSalesOrderItemByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteSalesOrderItemByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSalesOrderItemByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSalesOrderItemByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSalesOrderItemByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSalesOrderItemByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSalesOrderItemByIDRequestValidationError) ErrorName() string {
	return "DeleteSalesOrderItemByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSalesOrderItemByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSalesOrderItemByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSalesOrderItemByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSalesOrderItemByIDRequestValidationError{}

// Validate checks the field values on DeleteSalesOrderItemByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSalesOrderItemByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSalesOrderItemByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteSalesOrderItemByIDReplyMultiError, or nil if none found.
func (m *DeleteSalesOrderItemByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSalesOrderItemByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSalesOrderItemByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteSalesOrderItemByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteSalesOrderItemByIDReply.ValidateAll()
// if the designated constraints aren't met.
type DeleteSalesOrderItemByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSalesOrderItemByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSalesOrderItemByIDReplyMultiError) AllErrors() []error { return m }

// DeleteSalesOrderItemByIDReplyValidationError is the validation error
// returned by DeleteSalesOrderItemByIDReply.Validate if the designated
// constraints aren't met.
type DeleteSalesOrderItemByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSalesOrderItemByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSalesOrderItemByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSalesOrderItemByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSalesOrderItemByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSalesOrderItemByIDReplyValidationError) ErrorName() string {
	return "DeleteSalesOrderItemByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSalesOrderItemByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSalesOrderItemByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSalesOrderItemByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSalesOrderItemByIDReplyValidationError{}

// Validate checks the field values on UpdateSalesOrderItemByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSalesOrderItemByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSalesOrderItemByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSalesOrderItemByIDRequestMultiError, or nil if none found.
func (m *UpdateSalesOrderItemByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSalesOrderItemByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateSalesOrderItemByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrderID

	// no validation rules for SkuID

	// no validation rules for Quantity

	// no validation rules for Price

	// no validation rules for UnitPrice

	if len(errors) > 0 {
		return UpdateSalesOrderItemByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateSalesOrderItemByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSalesOrderItemByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateSalesOrderItemByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSalesOrderItemByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSalesOrderItemByIDRequestMultiError) AllErrors() []error { return m }

// UpdateSalesOrderItemByIDRequestValidationError is the validation error
// returned by UpdateSalesOrderItemByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateSalesOrderItemByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSalesOrderItemByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSalesOrderItemByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSalesOrderItemByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSalesOrderItemByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSalesOrderItemByIDRequestValidationError) ErrorName() string {
	return "UpdateSalesOrderItemByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSalesOrderItemByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSalesOrderItemByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSalesOrderItemByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSalesOrderItemByIDRequestValidationError{}

// Validate checks the field values on UpdateSalesOrderItemByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSalesOrderItemByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSalesOrderItemByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateSalesOrderItemByIDReplyMultiError, or nil if none found.
func (m *UpdateSalesOrderItemByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSalesOrderItemByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSalesOrderItemByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateSalesOrderItemByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateSalesOrderItemByIDReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateSalesOrderItemByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSalesOrderItemByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSalesOrderItemByIDReplyMultiError) AllErrors() []error { return m }

// UpdateSalesOrderItemByIDReplyValidationError is the validation error
// returned by UpdateSalesOrderItemByIDReply.Validate if the designated
// constraints aren't met.
type UpdateSalesOrderItemByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSalesOrderItemByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSalesOrderItemByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSalesOrderItemByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSalesOrderItemByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSalesOrderItemByIDReplyValidationError) ErrorName() string {
	return "UpdateSalesOrderItemByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSalesOrderItemByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSalesOrderItemByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSalesOrderItemByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSalesOrderItemByIDReplyValidationError{}

// Validate checks the field values on SalesOrderItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SalesOrderItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SalesOrderItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SalesOrderItemMultiError,
// or nil if none found.
func (m *SalesOrderItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SalesOrderItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrderID

	// no validation rules for SkuID

	// no validation rules for Quantity

	// no validation rules for Price

	// no validation rules for UnitPrice

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return SalesOrderItemMultiError(errors)
	}

	return nil
}

// SalesOrderItemMultiError is an error wrapping multiple validation errors
// returned by SalesOrderItem.ValidateAll() if the designated constraints
// aren't met.
type SalesOrderItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SalesOrderItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SalesOrderItemMultiError) AllErrors() []error { return m }

// SalesOrderItemValidationError is the validation error returned by
// SalesOrderItem.Validate if the designated constraints aren't met.
type SalesOrderItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SalesOrderItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SalesOrderItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SalesOrderItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SalesOrderItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SalesOrderItemValidationError) ErrorName() string { return "SalesOrderItemValidationError" }

// Error satisfies the builtin error interface
func (e SalesOrderItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSalesOrderItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SalesOrderItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SalesOrderItemValidationError{}

// Validate checks the field values on GetSalesOrderItemByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSalesOrderItemByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSalesOrderItemByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSalesOrderItemByIDRequestMultiError, or nil if none found.
func (m *GetSalesOrderItemByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSalesOrderItemByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetSalesOrderItemByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSalesOrderItemByIDRequestMultiError(errors)
	}

	return nil
}

// GetSalesOrderItemByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetSalesOrderItemByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSalesOrderItemByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSalesOrderItemByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSalesOrderItemByIDRequestMultiError) AllErrors() []error { return m }

// GetSalesOrderItemByIDRequestValidationError is the validation error returned
// by GetSalesOrderItemByIDRequest.Validate if the designated constraints
// aren't met.
type GetSalesOrderItemByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSalesOrderItemByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSalesOrderItemByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSalesOrderItemByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSalesOrderItemByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSalesOrderItemByIDRequestValidationError) ErrorName() string {
	return "GetSalesOrderItemByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSalesOrderItemByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSalesOrderItemByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSalesOrderItemByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSalesOrderItemByIDRequestValidationError{}

// Validate checks the field values on GetSalesOrderItemByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSalesOrderItemByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSalesOrderItemByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSalesOrderItemByIDReplyMultiError, or nil if none found.
func (m *GetSalesOrderItemByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSalesOrderItemByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSalesOrderItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSalesOrderItemByIDReplyValidationError{
					field:  "SalesOrderItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSalesOrderItemByIDReplyValidationError{
					field:  "SalesOrderItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSalesOrderItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSalesOrderItemByIDReplyValidationError{
				field:  "SalesOrderItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSalesOrderItemByIDReplyMultiError(errors)
	}

	return nil
}

// GetSalesOrderItemByIDReplyMultiError is an error wrapping multiple
// validation errors returned by GetSalesOrderItemByIDReply.ValidateAll() if
// the designated constraints aren't met.
type GetSalesOrderItemByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSalesOrderItemByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSalesOrderItemByIDReplyMultiError) AllErrors() []error { return m }

// GetSalesOrderItemByIDReplyValidationError is the validation error returned
// by GetSalesOrderItemByIDReply.Validate if the designated constraints aren't met.
type GetSalesOrderItemByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSalesOrderItemByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSalesOrderItemByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSalesOrderItemByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSalesOrderItemByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSalesOrderItemByIDReplyValidationError) ErrorName() string {
	return "GetSalesOrderItemByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSalesOrderItemByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSalesOrderItemByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSalesOrderItemByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSalesOrderItemByIDReplyValidationError{}

// Validate checks the field values on ListSalesOrderItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSalesOrderItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSalesOrderItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSalesOrderItemRequestMultiError, or nil if none found.
func (m *ListSalesOrderItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSalesOrderItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSalesOrderItemRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSalesOrderItemRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSalesOrderItemRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSalesOrderItemRequestMultiError(errors)
	}

	return nil
}

// ListSalesOrderItemRequestMultiError is an error wrapping multiple validation
// errors returned by ListSalesOrderItemRequest.ValidateAll() if the
// designated constraints aren't met.
type ListSalesOrderItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSalesOrderItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSalesOrderItemRequestMultiError) AllErrors() []error { return m }

// ListSalesOrderItemRequestValidationError is the validation error returned by
// ListSalesOrderItemRequest.Validate if the designated constraints aren't met.
type ListSalesOrderItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSalesOrderItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSalesOrderItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSalesOrderItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSalesOrderItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSalesOrderItemRequestValidationError) ErrorName() string {
	return "ListSalesOrderItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSalesOrderItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSalesOrderItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSalesOrderItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSalesOrderItemRequestValidationError{}

// Validate checks the field values on ListSalesOrderItemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSalesOrderItemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSalesOrderItemReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSalesOrderItemReplyMultiError, or nil if none found.
func (m *ListSalesOrderItemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSalesOrderItemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetSalesOrderItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSalesOrderItemReplyValidationError{
						field:  fmt.Sprintf("SalesOrderItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSalesOrderItemReplyValidationError{
						field:  fmt.Sprintf("SalesOrderItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSalesOrderItemReplyValidationError{
					field:  fmt.Sprintf("SalesOrderItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSalesOrderItemReplyMultiError(errors)
	}

	return nil
}

// ListSalesOrderItemReplyMultiError is an error wrapping multiple validation
// errors returned by ListSalesOrderItemReply.ValidateAll() if the designated
// constraints aren't met.
type ListSalesOrderItemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSalesOrderItemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSalesOrderItemReplyMultiError) AllErrors() []error { return m }

// ListSalesOrderItemReplyValidationError is the validation error returned by
// ListSalesOrderItemReply.Validate if the designated constraints aren't met.
type ListSalesOrderItemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSalesOrderItemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSalesOrderItemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSalesOrderItemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSalesOrderItemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSalesOrderItemReplyValidationError) ErrorName() string {
	return "ListSalesOrderItemReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSalesOrderItemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSalesOrderItemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSalesOrderItemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSalesOrderItemReplyValidationError{}
