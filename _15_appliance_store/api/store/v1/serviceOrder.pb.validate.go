// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/serviceOrder.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateServiceOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceOrderRequestMultiError, or nil if none found.
func (m *CreateServiceOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CustomerID

	// no validation rules for ProductID

	// no validation rules for FaultDesc

	// no validation rules for Status

	// no validation rules for TechnicianID

	// no validation rules for CompletionTime

	if len(errors) > 0 {
		return CreateServiceOrderRequestMultiError(errors)
	}

	return nil
}

// CreateServiceOrderRequestMultiError is an error wrapping multiple validation
// errors returned by CreateServiceOrderRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateServiceOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceOrderRequestMultiError) AllErrors() []error { return m }

// CreateServiceOrderRequestValidationError is the validation error returned by
// CreateServiceOrderRequest.Validate if the designated constraints aren't met.
type CreateServiceOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceOrderRequestValidationError) ErrorName() string {
	return "CreateServiceOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceOrderRequestValidationError{}

// Validate checks the field values on CreateServiceOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateServiceOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateServiceOrderReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateServiceOrderReplyMultiError, or nil if none found.
func (m *CreateServiceOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateServiceOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateServiceOrderReplyMultiError(errors)
	}

	return nil
}

// CreateServiceOrderReplyMultiError is an error wrapping multiple validation
// errors returned by CreateServiceOrderReply.ValidateAll() if the designated
// constraints aren't met.
type CreateServiceOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateServiceOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateServiceOrderReplyMultiError) AllErrors() []error { return m }

// CreateServiceOrderReplyValidationError is the validation error returned by
// CreateServiceOrderReply.Validate if the designated constraints aren't met.
type CreateServiceOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServiceOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServiceOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServiceOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServiceOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServiceOrderReplyValidationError) ErrorName() string {
	return "CreateServiceOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServiceOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServiceOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServiceOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServiceOrderReplyValidationError{}

// Validate checks the field values on DeleteServiceOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceOrderByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteServiceOrderByIDRequestMultiError, or nil if none found.
func (m *DeleteServiceOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteServiceOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteServiceOrderByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteServiceOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceOrderByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteServiceOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceOrderByIDRequestMultiError) AllErrors() []error { return m }

// DeleteServiceOrderByIDRequestValidationError is the validation error
// returned by DeleteServiceOrderByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteServiceOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceOrderByIDRequestValidationError) ErrorName() string {
	return "DeleteServiceOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceOrderByIDRequestValidationError{}

// Validate checks the field values on DeleteServiceOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteServiceOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteServiceOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteServiceOrderByIDReplyMultiError, or nil if none found.
func (m *DeleteServiceOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteServiceOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteServiceOrderByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteServiceOrderByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteServiceOrderByIDReply.ValidateAll() if
// the designated constraints aren't met.
type DeleteServiceOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteServiceOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteServiceOrderByIDReplyMultiError) AllErrors() []error { return m }

// DeleteServiceOrderByIDReplyValidationError is the validation error returned
// by DeleteServiceOrderByIDReply.Validate if the designated constraints
// aren't met.
type DeleteServiceOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceOrderByIDReplyValidationError) ErrorName() string {
	return "DeleteServiceOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceOrderByIDReplyValidationError{}

// Validate checks the field values on UpdateServiceOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceOrderByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateServiceOrderByIDRequestMultiError, or nil if none found.
func (m *UpdateServiceOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateServiceOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CustomerID

	// no validation rules for ProductID

	// no validation rules for FaultDesc

	// no validation rules for Status

	// no validation rules for TechnicianID

	// no validation rules for CompletionTime

	if len(errors) > 0 {
		return UpdateServiceOrderByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateServiceOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateServiceOrderByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateServiceOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceOrderByIDRequestMultiError) AllErrors() []error { return m }

// UpdateServiceOrderByIDRequestValidationError is the validation error
// returned by UpdateServiceOrderByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateServiceOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceOrderByIDRequestValidationError) ErrorName() string {
	return "UpdateServiceOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceOrderByIDRequestValidationError{}

// Validate checks the field values on UpdateServiceOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateServiceOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateServiceOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateServiceOrderByIDReplyMultiError, or nil if none found.
func (m *UpdateServiceOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateServiceOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateServiceOrderByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateServiceOrderByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateServiceOrderByIDReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateServiceOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateServiceOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateServiceOrderByIDReplyMultiError) AllErrors() []error { return m }

// UpdateServiceOrderByIDReplyValidationError is the validation error returned
// by UpdateServiceOrderByIDReply.Validate if the designated constraints
// aren't met.
type UpdateServiceOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateServiceOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateServiceOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateServiceOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateServiceOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateServiceOrderByIDReplyValidationError) ErrorName() string {
	return "UpdateServiceOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateServiceOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateServiceOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateServiceOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateServiceOrderByIDReplyValidationError{}

// Validate checks the field values on ServiceOrder with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceOrder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceOrder with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceOrderMultiError, or
// nil if none found.
func (m *ServiceOrder) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceOrder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CustomerID

	// no validation rules for ProductID

	// no validation rules for FaultDesc

	// no validation rules for Status

	// no validation rules for TechnicianID

	// no validation rules for CompletionTime

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ServiceOrderMultiError(errors)
	}

	return nil
}

// ServiceOrderMultiError is an error wrapping multiple validation errors
// returned by ServiceOrder.ValidateAll() if the designated constraints aren't met.
type ServiceOrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceOrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceOrderMultiError) AllErrors() []error { return m }

// ServiceOrderValidationError is the validation error returned by
// ServiceOrder.Validate if the designated constraints aren't met.
type ServiceOrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceOrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceOrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceOrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceOrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceOrderValidationError) ErrorName() string { return "ServiceOrderValidationError" }

// Error satisfies the builtin error interface
func (e ServiceOrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceOrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceOrderValidationError{}

// Validate checks the field values on GetServiceOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceOrderByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceOrderByIDRequestMultiError, or nil if none found.
func (m *GetServiceOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetServiceOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetServiceOrderByIDRequestMultiError(errors)
	}

	return nil
}

// GetServiceOrderByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetServiceOrderByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetServiceOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceOrderByIDRequestMultiError) AllErrors() []error { return m }

// GetServiceOrderByIDRequestValidationError is the validation error returned
// by GetServiceOrderByIDRequest.Validate if the designated constraints aren't met.
type GetServiceOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceOrderByIDRequestValidationError) ErrorName() string {
	return "GetServiceOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceOrderByIDRequestValidationError{}

// Validate checks the field values on GetServiceOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceOrderByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceOrderByIDReplyMultiError, or nil if none found.
func (m *GetServiceOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServiceOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetServiceOrderByIDReplyValidationError{
					field:  "ServiceOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetServiceOrderByIDReplyValidationError{
					field:  "ServiceOrder",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetServiceOrderByIDReplyValidationError{
				field:  "ServiceOrder",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetServiceOrderByIDReplyMultiError(errors)
	}

	return nil
}

// GetServiceOrderByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetServiceOrderByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetServiceOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceOrderByIDReplyMultiError) AllErrors() []error { return m }

// GetServiceOrderByIDReplyValidationError is the validation error returned by
// GetServiceOrderByIDReply.Validate if the designated constraints aren't met.
type GetServiceOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceOrderByIDReplyValidationError) ErrorName() string {
	return "GetServiceOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceOrderByIDReplyValidationError{}

// Validate checks the field values on ListServiceOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceOrderRequestMultiError, or nil if none found.
func (m *ListServiceOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListServiceOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListServiceOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListServiceOrderRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListServiceOrderRequestMultiError(errors)
	}

	return nil
}

// ListServiceOrderRequestMultiError is an error wrapping multiple validation
// errors returned by ListServiceOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServiceOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceOrderRequestMultiError) AllErrors() []error { return m }

// ListServiceOrderRequestValidationError is the validation error returned by
// ListServiceOrderRequest.Validate if the designated constraints aren't met.
type ListServiceOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceOrderRequestValidationError) ErrorName() string {
	return "ListServiceOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceOrderRequestValidationError{}

// Validate checks the field values on ListServiceOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServiceOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServiceOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServiceOrderReplyMultiError, or nil if none found.
func (m *ListServiceOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServiceOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetServiceOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServiceOrderReplyValidationError{
						field:  fmt.Sprintf("ServiceOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServiceOrderReplyValidationError{
						field:  fmt.Sprintf("ServiceOrders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServiceOrderReplyValidationError{
					field:  fmt.Sprintf("ServiceOrders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListServiceOrderReplyMultiError(errors)
	}

	return nil
}

// ListServiceOrderReplyMultiError is an error wrapping multiple validation
// errors returned by ListServiceOrderReply.ValidateAll() if the designated
// constraints aren't met.
type ListServiceOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServiceOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServiceOrderReplyMultiError) AllErrors() []error { return m }

// ListServiceOrderReplyValidationError is the validation error returned by
// ListServiceOrderReply.Validate if the designated constraints aren't met.
type ListServiceOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceOrderReplyValidationError) ErrorName() string {
	return "ListServiceOrderReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceOrderReplyValidationError{}
