syntax = "proto3";

package api.store.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "store/api/store/v1;v1";

/*
Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto
Default settings for generating swagger documents
NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
Tips: add swagger option to rpc method, example:
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get user by id",
      description: "get user by id",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
*/
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "store api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Type Bearer your-jwt-token to Value";
      }
    }
  }
};

service promotion {
  // create promotion
  rpc Create(CreatePromotionRequest) returns (CreatePromotionReply) {
    option (google.api.http) = {
      post: "/api/v1/promotion"
      body: "*"
    };
  }

  // delete promotion by id
  rpc DeleteByID(DeletePromotionByIDRequest) returns (DeletePromotionByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/promotion/{id}"
    };
  }

  // update promotion by id
  rpc UpdateByID(UpdatePromotionByIDRequest) returns (UpdatePromotionByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/promotion/{id}"
      body: "*"
    };
  }

  // get promotion by id
  rpc GetByID(GetPromotionByIDRequest) returns (GetPromotionByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/promotion/{id}"
    };
  }

  // list of promotion by query parameters
  rpc List(ListPromotionRequest) returns (ListPromotionReply) {
    option (google.api.http) = {
      post: "/api/v1/promotion/list"
      body: "*"
    };
  }

  // ---------------------------------------------------------

  // 创建促销活动与优惠券绑定关系
  // 实现逻辑：
  // 1. 验证促销活动是否存在且处于可编辑状态
  // 2. 检查优惠券模板是否有效（类型匹配、有效期覆盖）
  // 3. 建立促销活动与优惠券的绑定关系
  rpc BindCouponTemplate(BindCouponTemplateRequest) returns (BindCouponTemplateReply) {
    option (google.api.http) = {
      post: "/api/v1/promotion/{promotionID}/coupons"
      body: "*"
    };
  }
}


/*
Notes for defining message fields:
    1. Suggest using camel case style naming for message field names, such as firstName, lastName, etc.
    2. If the message field name ending in 'id', it is recommended to use xxxID naming format, such as userID, orderID, etc.
    3. Add validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules, such as:
        uint64 id = 1 [(validate.rules).uint64.gte  = 1];

If used to generate code that supports the HTTP protocol, notes for defining message fields:
    1. If the route contains the path parameter, such as /api/v1/promotion/{id}, the defined
        message must contain the name of the path parameter and the name should be added
        with a new tag, such as int64 id = 1 [(tagger.tags) = "uri:\"id\""];
    2. If the request url is followed by a query parameter, such as /api/v1/getPromotion?name=Tom,
        a form tag must be added when defining the query parameter in the message, such as:
        string name = 1 [(tagger.tags) = "form:\"name\""].
    3. If the message field name contain underscores(such as 'field_name'), it will cause a problem
        where the JSON field names of the Swagger request parameters are different from those of the
        GRPC JSON tag names. There are two solutions: Solution 1, remove the underline from the
         message field name. Option 2, use the tool 'protoc-go-inject-tag' to modify the JSON tag name,
         such as: string first_name = 1 ; // @gotags: json:"firstName"
*/


message CreatePromotionRequest {
	string name = 1;  // 活动名称
	int32 type = 2;  // 类型(1满减/2折扣/3赠品/4组合优惠)
	string rule = 3;  // 活动规则（JSON格式）
	string startTime = 4;  // 开始时间
	string endTime = 5;  // 结束时间
}

message CreatePromotionReply {
  uint64 id = 1;
}

message DeletePromotionByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];
}

message DeletePromotionByIDReply {

}

message UpdatePromotionByIDRequest {
	uint64 id = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\""];  // 活动ID
	string name = 2;  // 活动名称
	int32 type = 3;  // 类型(1满减/2折扣/3赠品/4组合优惠)
	string rule = 4;  // 活动规则（JSON格式）
	string startTime = 5;  // 开始时间
	string endTime = 6;  // 结束时间
}

message UpdatePromotionByIDReply {

}

message Promotion {
	uint64 id = 1;  // 活动ID
	string name = 2;  // 活动名称
	int32 type = 3;  // 类型(1满减/2折扣/3赠品/4组合优惠)
	string rule = 4;  // 活动规则（JSON格式）
	string startTime = 5;  // 开始时间
	string endTime = 6;  // 结束时间
	string createdAt = 7;  // 创建时间
	string updatedAt = 8;  // 更新时间
}

message GetPromotionByIDRequest {
  uint64 id =1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"id\"" ];
}

message GetPromotionByIDReply {
  Promotion promotion = 1;
}

message ListPromotionRequest {
  api.types.Params params = 1;
}

message ListPromotionReply {
  int64 total = 1;
  repeated Promotion promotions = 2;
}

// --------------------------------------------------------

message BindCouponTemplateRequest {
  uint64 promotionID = 1 [(validate.rules).uint64.gt = 0, (tagger.tags) = "uri:\"promotionID\""]; // 促销活动ID
  repeated string couponIDs = 2 [(validate.rules).repeated = {min_items: 1}]; // 需要绑定的优惠券ID列表
}

message BindCouponTemplateReply {
  int32 boundCount = 1; // 成功绑定的优惠券数量
}
