// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/store/v1/productCategory.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductCategoryRequestMultiError, or nil if none found.
func (m *CreateProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ParentID

	// no validation rules for Name

	// no validation rules for Level

	if len(errors) > 0 {
		return CreateProductCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryRequestMultiError) AllErrors() []error { return m }

// CreateProductCategoryRequestValidationError is the validation error returned
// by CreateProductCategoryRequest.Validate if the designated constraints
// aren't met.
type CreateProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryRequestValidationError) ErrorName() string {
	return "CreateProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryRequestValidationError{}

// Validate checks the field values on CreateProductCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductCategoryReplyMultiError, or nil if none found.
func (m *CreateProductCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProductCategoryReplyMultiError(errors)
	}

	return nil
}

// CreateProductCategoryReplyMultiError is an error wrapping multiple
// validation errors returned by CreateProductCategoryReply.ValidateAll() if
// the designated constraints aren't met.
type CreateProductCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductCategoryReplyMultiError) AllErrors() []error { return m }

// CreateProductCategoryReplyValidationError is the validation error returned
// by CreateProductCategoryReply.Validate if the designated constraints aren't met.
type CreateProductCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductCategoryReplyValidationError) ErrorName() string {
	return "CreateProductCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductCategoryReplyValidationError{}

// Validate checks the field values on DeleteProductCategoryByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteProductCategoryByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductCategoryByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProductCategoryByIDRequestMultiError, or nil if none found.
func (m *DeleteProductCategoryByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductCategoryByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteProductCategoryByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProductCategoryByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteProductCategoryByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteProductCategoryByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductCategoryByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductCategoryByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductCategoryByIDRequestMultiError) AllErrors() []error { return m }

// DeleteProductCategoryByIDRequestValidationError is the validation error
// returned by DeleteProductCategoryByIDRequest.Validate if the designated
// constraints aren't met.
type DeleteProductCategoryByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductCategoryByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductCategoryByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductCategoryByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductCategoryByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductCategoryByIDRequestValidationError) ErrorName() string {
	return "DeleteProductCategoryByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductCategoryByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductCategoryByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductCategoryByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductCategoryByIDRequestValidationError{}

// Validate checks the field values on DeleteProductCategoryByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductCategoryByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductCategoryByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteProductCategoryByIDReplyMultiError, or nil if none found.
func (m *DeleteProductCategoryByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductCategoryByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductCategoryByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteProductCategoryByIDReplyMultiError is an error wrapping multiple
// validation errors returned by DeleteProductCategoryByIDReply.ValidateAll()
// if the designated constraints aren't met.
type DeleteProductCategoryByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductCategoryByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductCategoryByIDReplyMultiError) AllErrors() []error { return m }

// DeleteProductCategoryByIDReplyValidationError is the validation error
// returned by DeleteProductCategoryByIDReply.Validate if the designated
// constraints aren't met.
type DeleteProductCategoryByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductCategoryByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductCategoryByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductCategoryByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductCategoryByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductCategoryByIDReplyValidationError) ErrorName() string {
	return "DeleteProductCategoryByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductCategoryByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductCategoryByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductCategoryByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductCategoryByIDReplyValidationError{}

// Validate checks the field values on UpdateProductCategoryByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateProductCategoryByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategoryByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryByIDRequestMultiError, or nil if none found.
func (m *UpdateProductCategoryByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategoryByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateProductCategoryByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ParentID

	// no validation rules for Name

	// no validation rules for Level

	if len(errors) > 0 {
		return UpdateProductCategoryByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryByIDRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateProductCategoryByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductCategoryByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryByIDRequestMultiError) AllErrors() []error { return m }

// UpdateProductCategoryByIDRequestValidationError is the validation error
// returned by UpdateProductCategoryByIDRequest.Validate if the designated
// constraints aren't met.
type UpdateProductCategoryByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryByIDRequestValidationError) ErrorName() string {
	return "UpdateProductCategoryByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategoryByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryByIDRequestValidationError{}

// Validate checks the field values on UpdateProductCategoryByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductCategoryByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductCategoryByIDReply with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProductCategoryByIDReplyMultiError, or nil if none found.
func (m *UpdateProductCategoryByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductCategoryByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProductCategoryByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateProductCategoryByIDReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateProductCategoryByIDReply.ValidateAll()
// if the designated constraints aren't met.
type UpdateProductCategoryByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductCategoryByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductCategoryByIDReplyMultiError) AllErrors() []error { return m }

// UpdateProductCategoryByIDReplyValidationError is the validation error
// returned by UpdateProductCategoryByIDReply.Validate if the designated
// constraints aren't met.
type UpdateProductCategoryByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductCategoryByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductCategoryByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductCategoryByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductCategoryByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductCategoryByIDReplyValidationError) ErrorName() string {
	return "UpdateProductCategoryByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductCategoryByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductCategoryByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductCategoryByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductCategoryByIDReplyValidationError{}

// Validate checks the field values on ProductCategory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductCategoryMultiError, or nil if none found.
func (m *ProductCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentID

	// no validation rules for Name

	// no validation rules for Level

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ProductCategoryMultiError(errors)
	}

	return nil
}

// ProductCategoryMultiError is an error wrapping multiple validation errors
// returned by ProductCategory.ValidateAll() if the designated constraints
// aren't met.
type ProductCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductCategoryMultiError) AllErrors() []error { return m }

// ProductCategoryValidationError is the validation error returned by
// ProductCategory.Validate if the designated constraints aren't met.
type ProductCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductCategoryValidationError) ErrorName() string { return "ProductCategoryValidationError" }

// Error satisfies the builtin error interface
func (e ProductCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductCategoryValidationError{}

// Validate checks the field values on GetProductCategoryByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryByIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetProductCategoryByIDRequestMultiError, or nil if none found.
func (m *GetProductCategoryByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetProductCategoryByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProductCategoryByIDRequestMultiError(errors)
	}

	return nil
}

// GetProductCategoryByIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetProductCategoryByIDRequest.ValidateAll()
// if the designated constraints aren't met.
type GetProductCategoryByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryByIDRequestMultiError) AllErrors() []error { return m }

// GetProductCategoryByIDRequestValidationError is the validation error
// returned by GetProductCategoryByIDRequest.Validate if the designated
// constraints aren't met.
type GetProductCategoryByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryByIDRequestValidationError) ErrorName() string {
	return "GetProductCategoryByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryByIDRequestValidationError{}

// Validate checks the field values on GetProductCategoryByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProductCategoryByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProductCategoryByIDReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProductCategoryByIDReplyMultiError, or nil if none found.
func (m *GetProductCategoryByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProductCategoryByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProductCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProductCategoryByIDReplyValidationError{
					field:  "ProductCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProductCategoryByIDReplyValidationError{
					field:  "ProductCategory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProductCategoryByIDReplyValidationError{
				field:  "ProductCategory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProductCategoryByIDReplyMultiError(errors)
	}

	return nil
}

// GetProductCategoryByIDReplyMultiError is an error wrapping multiple
// validation errors returned by GetProductCategoryByIDReply.ValidateAll() if
// the designated constraints aren't met.
type GetProductCategoryByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProductCategoryByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProductCategoryByIDReplyMultiError) AllErrors() []error { return m }

// GetProductCategoryByIDReplyValidationError is the validation error returned
// by GetProductCategoryByIDReply.Validate if the designated constraints
// aren't met.
type GetProductCategoryByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductCategoryByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductCategoryByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductCategoryByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductCategoryByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductCategoryByIDReplyValidationError) ErrorName() string {
	return "GetProductCategoryByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductCategoryByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductCategoryByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductCategoryByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductCategoryByIDReplyValidationError{}

// Validate checks the field values on ListProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductCategoryRequestMultiError, or nil if none found.
func (m *ListProductCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListProductCategoryRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListProductCategoryRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProductCategoryRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListProductCategoryRequestMultiError(errors)
	}

	return nil
}

// ListProductCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by ListProductCategoryRequest.ValidateAll() if
// the designated constraints aren't met.
type ListProductCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductCategoryRequestMultiError) AllErrors() []error { return m }

// ListProductCategoryRequestValidationError is the validation error returned
// by ListProductCategoryRequest.Validate if the designated constraints aren't met.
type ListProductCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductCategoryRequestValidationError) ErrorName() string {
	return "ListProductCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductCategoryRequestValidationError{}

// Validate checks the field values on ListProductCategoryReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductCategoryReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductCategoryReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductCategoryReplyMultiError, or nil if none found.
func (m *ListProductCategoryReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductCategoryReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetProductCategorys() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductCategoryReplyValidationError{
						field:  fmt.Sprintf("ProductCategorys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductCategoryReplyValidationError{
						field:  fmt.Sprintf("ProductCategorys[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductCategoryReplyValidationError{
					field:  fmt.Sprintf("ProductCategorys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListProductCategoryReplyMultiError(errors)
	}

	return nil
}

// ListProductCategoryReplyMultiError is an error wrapping multiple validation
// errors returned by ListProductCategoryReply.ValidateAll() if the designated
// constraints aren't met.
type ListProductCategoryReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductCategoryReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductCategoryReplyMultiError) AllErrors() []error { return m }

// ListProductCategoryReplyValidationError is the validation error returned by
// ListProductCategoryReply.Validate if the designated constraints aren't met.
type ListProductCategoryReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductCategoryReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductCategoryReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductCategoryReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductCategoryReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductCategoryReplyValidationError) ErrorName() string {
	return "ListProductCategoryReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductCategoryReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductCategoryReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductCategoryReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductCategoryReplyValidationError{}
