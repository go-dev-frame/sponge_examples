// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/teach.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTeachRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeachRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeachRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeachRequestMultiError, or nil if none found.
func (m *CreateTeachRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeachRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeacherId

	// no validation rules for TeacherName

	// no validation rules for CourseId

	// no validation rules for CourseName

	// no validation rules for Score

	if len(errors) > 0 {
		return CreateTeachRequestMultiError(errors)
	}

	return nil
}

// CreateTeachRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTeachRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTeachRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeachRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeachRequestMultiError) AllErrors() []error { return m }

// CreateTeachRequestValidationError is the validation error returned by
// CreateTeachRequest.Validate if the designated constraints aren't met.
type CreateTeachRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeachRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeachRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeachRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeachRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeachRequestValidationError) ErrorName() string {
	return "CreateTeachRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeachRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeachRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeachRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeachRequestValidationError{}

// Validate checks the field values on CreateTeachReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTeachReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeachReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeachReplyMultiError, or nil if none found.
func (m *CreateTeachReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeachReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTeachReplyMultiError(errors)
	}

	return nil
}

// CreateTeachReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTeachReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTeachReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeachReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeachReplyMultiError) AllErrors() []error { return m }

// CreateTeachReplyValidationError is the validation error returned by
// CreateTeachReply.Validate if the designated constraints aren't met.
type CreateTeachReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeachReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeachReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeachReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeachReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeachReplyValidationError) ErrorName() string { return "CreateTeachReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateTeachReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeachReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeachReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeachReplyValidationError{}

// Validate checks the field values on DeleteTeachByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeachByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeachByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeachByIDRequestMultiError, or nil if none found.
func (m *DeleteTeachByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeachByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTeachByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteTeachByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTeachByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTeachByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeachByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeachByIDRequestMultiError) AllErrors() []error { return m }

// DeleteTeachByIDRequestValidationError is the validation error returned by
// DeleteTeachByIDRequest.Validate if the designated constraints aren't met.
type DeleteTeachByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeachByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeachByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeachByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeachByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeachByIDRequestValidationError) ErrorName() string {
	return "DeleteTeachByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeachByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeachByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeachByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeachByIDRequestValidationError{}

// Validate checks the field values on DeleteTeachByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeachByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeachByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeachByIDReplyMultiError, or nil if none found.
func (m *DeleteTeachByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeachByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTeachByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteTeachByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTeachByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTeachByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeachByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeachByIDReplyMultiError) AllErrors() []error { return m }

// DeleteTeachByIDReplyValidationError is the validation error returned by
// DeleteTeachByIDReply.Validate if the designated constraints aren't met.
type DeleteTeachByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeachByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeachByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeachByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeachByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeachByIDReplyValidationError) ErrorName() string {
	return "DeleteTeachByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeachByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeachByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeachByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeachByIDReplyValidationError{}

// Validate checks the field values on DeleteTeachByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeachByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeachByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeachByIDsRequestMultiError, or nil if none found.
func (m *DeleteTeachByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeachByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTeachByIDsRequestMultiError(errors)
	}

	return nil
}

// DeleteTeachByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTeachByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTeachByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeachByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeachByIDsRequestMultiError) AllErrors() []error { return m }

// DeleteTeachByIDsRequestValidationError is the validation error returned by
// DeleteTeachByIDsRequest.Validate if the designated constraints aren't met.
type DeleteTeachByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeachByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeachByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeachByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeachByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeachByIDsRequestValidationError) ErrorName() string {
	return "DeleteTeachByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeachByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeachByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeachByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeachByIDsRequestValidationError{}

// Validate checks the field values on DeleteTeachByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeachByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeachByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeachByIDsReplyMultiError, or nil if none found.
func (m *DeleteTeachByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeachByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTeachByIDsReplyMultiError(errors)
	}

	return nil
}

// DeleteTeachByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTeachByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTeachByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeachByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeachByIDsReplyMultiError) AllErrors() []error { return m }

// DeleteTeachByIDsReplyValidationError is the validation error returned by
// DeleteTeachByIDsReply.Validate if the designated constraints aren't met.
type DeleteTeachByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeachByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeachByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeachByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeachByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeachByIDsReplyValidationError) ErrorName() string {
	return "DeleteTeachByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeachByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeachByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeachByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeachByIDsReplyValidationError{}

// Validate checks the field values on UpdateTeachByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeachByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeachByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeachByIDRequestMultiError, or nil if none found.
func (m *UpdateTeachByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeachByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TeacherId

	// no validation rules for TeacherName

	// no validation rules for CourseId

	// no validation rules for CourseName

	// no validation rules for Score

	if len(errors) > 0 {
		return UpdateTeachByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateTeachByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTeachByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTeachByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeachByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeachByIDRequestMultiError) AllErrors() []error { return m }

// UpdateTeachByIDRequestValidationError is the validation error returned by
// UpdateTeachByIDRequest.Validate if the designated constraints aren't met.
type UpdateTeachByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeachByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeachByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeachByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeachByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeachByIDRequestValidationError) ErrorName() string {
	return "UpdateTeachByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeachByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeachByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeachByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeachByIDRequestValidationError{}

// Validate checks the field values on UpdateTeachByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeachByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeachByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeachByIDReplyMultiError, or nil if none found.
func (m *UpdateTeachByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeachByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTeachByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateTeachByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTeachByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateTeachByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeachByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeachByIDReplyMultiError) AllErrors() []error { return m }

// UpdateTeachByIDReplyValidationError is the validation error returned by
// UpdateTeachByIDReply.Validate if the designated constraints aren't met.
type UpdateTeachByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeachByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeachByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeachByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeachByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeachByIDReplyValidationError) ErrorName() string {
	return "UpdateTeachByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeachByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeachByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeachByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeachByIDReplyValidationError{}

// Validate checks the field values on Teach with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Teach) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Teach with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TeachMultiError, or nil if none found.
func (m *Teach) ValidateAll() error {
	return m.validate(true)
}

func (m *Teach) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for TeacherId

	// no validation rules for TeacherName

	// no validation rules for CourseId

	// no validation rules for CourseName

	// no validation rules for Score

	if len(errors) > 0 {
		return TeachMultiError(errors)
	}

	return nil
}

// TeachMultiError is an error wrapping multiple validation errors returned by
// Teach.ValidateAll() if the designated constraints aren't met.
type TeachMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeachMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeachMultiError) AllErrors() []error { return m }

// TeachValidationError is the validation error returned by Teach.Validate if
// the designated constraints aren't met.
type TeachValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeachValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeachValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeachValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeachValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeachValidationError) ErrorName() string { return "TeachValidationError" }

// Error satisfies the builtin error interface
func (e TeachValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeach.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeachValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeachValidationError{}

// Validate checks the field values on GetTeachByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeachByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeachByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeachByIDRequestMultiError, or nil if none found.
func (m *GetTeachByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeachByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTeachByIDRequestMultiError(errors)
	}

	return nil
}

// GetTeachByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetTeachByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTeachByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeachByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeachByIDRequestMultiError) AllErrors() []error { return m }

// GetTeachByIDRequestValidationError is the validation error returned by
// GetTeachByIDRequest.Validate if the designated constraints aren't met.
type GetTeachByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeachByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeachByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeachByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeachByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeachByIDRequestValidationError) ErrorName() string {
	return "GetTeachByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeachByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeachByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeachByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeachByIDRequestValidationError{}

// Validate checks the field values on GetTeachByIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTeachByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeachByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeachByIDReplyMultiError, or nil if none found.
func (m *GetTeachByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeachByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTeach()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTeachByIDReplyValidationError{
					field:  "Teach",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTeachByIDReplyValidationError{
					field:  "Teach",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeach()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeachByIDReplyValidationError{
				field:  "Teach",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTeachByIDReplyMultiError(errors)
	}

	return nil
}

// GetTeachByIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetTeachByIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetTeachByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeachByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeachByIDReplyMultiError) AllErrors() []error { return m }

// GetTeachByIDReplyValidationError is the validation error returned by
// GetTeachByIDReply.Validate if the designated constraints aren't met.
type GetTeachByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeachByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeachByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeachByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeachByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeachByIDReplyValidationError) ErrorName() string {
	return "GetTeachByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeachByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeachByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeachByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeachByIDReplyValidationError{}

// Validate checks the field values on GetTeachByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeachByConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeachByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeachByConditionRequestMultiError, or nil if none found.
func (m *GetTeachByConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeachByConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTeachByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTeachByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeachByConditionRequestValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTeachByConditionRequestMultiError(errors)
	}

	return nil
}

// GetTeachByConditionRequestMultiError is an error wrapping multiple
// validation errors returned by GetTeachByConditionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTeachByConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeachByConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeachByConditionRequestMultiError) AllErrors() []error { return m }

// GetTeachByConditionRequestValidationError is the validation error returned
// by GetTeachByConditionRequest.Validate if the designated constraints aren't met.
type GetTeachByConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeachByConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeachByConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeachByConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeachByConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeachByConditionRequestValidationError) ErrorName() string {
	return "GetTeachByConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeachByConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeachByConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeachByConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeachByConditionRequestValidationError{}

// Validate checks the field values on GetTeachByConditionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeachByConditionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeachByConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeachByConditionReplyMultiError, or nil if none found.
func (m *GetTeachByConditionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeachByConditionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTeach()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTeachByConditionReplyValidationError{
					field:  "Teach",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTeachByConditionReplyValidationError{
					field:  "Teach",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeach()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeachByConditionReplyValidationError{
				field:  "Teach",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTeachByConditionReplyMultiError(errors)
	}

	return nil
}

// GetTeachByConditionReplyMultiError is an error wrapping multiple validation
// errors returned by GetTeachByConditionReply.ValidateAll() if the designated
// constraints aren't met.
type GetTeachByConditionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeachByConditionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeachByConditionReplyMultiError) AllErrors() []error { return m }

// GetTeachByConditionReplyValidationError is the validation error returned by
// GetTeachByConditionReply.Validate if the designated constraints aren't met.
type GetTeachByConditionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeachByConditionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeachByConditionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeachByConditionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeachByConditionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeachByConditionReplyValidationError) ErrorName() string {
	return "GetTeachByConditionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeachByConditionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeachByConditionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeachByConditionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeachByConditionReplyValidationError{}

// Validate checks the field values on ListTeachByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeachByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeachByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeachByIDsRequestMultiError, or nil if none found.
func (m *ListTeachByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeachByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTeachByIDsRequestMultiError(errors)
	}

	return nil
}

// ListTeachByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by ListTeachByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTeachByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeachByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeachByIDsRequestMultiError) AllErrors() []error { return m }

// ListTeachByIDsRequestValidationError is the validation error returned by
// ListTeachByIDsRequest.Validate if the designated constraints aren't met.
type ListTeachByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeachByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeachByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeachByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeachByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeachByIDsRequestValidationError) ErrorName() string {
	return "ListTeachByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeachByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeachByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeachByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeachByIDsRequestValidationError{}

// Validate checks the field values on ListTeachByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeachByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeachByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeachByIDsReplyMultiError, or nil if none found.
func (m *ListTeachByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeachByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeachs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeachByIDsReplyValidationError{
						field:  fmt.Sprintf("Teachs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeachByIDsReplyValidationError{
						field:  fmt.Sprintf("Teachs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeachByIDsReplyValidationError{
					field:  fmt.Sprintf("Teachs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeachByIDsReplyMultiError(errors)
	}

	return nil
}

// ListTeachByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by ListTeachByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type ListTeachByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeachByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeachByIDsReplyMultiError) AllErrors() []error { return m }

// ListTeachByIDsReplyValidationError is the validation error returned by
// ListTeachByIDsReply.Validate if the designated constraints aren't met.
type ListTeachByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeachByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeachByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeachByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeachByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeachByIDsReplyValidationError) ErrorName() string {
	return "ListTeachByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeachByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeachByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeachByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeachByIDsReplyValidationError{}

// Validate checks the field values on ListTeachRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTeachRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeachRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeachRequestMultiError, or nil if none found.
func (m *ListTeachRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeachRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTeachRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTeachRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTeachRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTeachRequestMultiError(errors)
	}

	return nil
}

// ListTeachRequestMultiError is an error wrapping multiple validation errors
// returned by ListTeachRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTeachRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeachRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeachRequestMultiError) AllErrors() []error { return m }

// ListTeachRequestValidationError is the validation error returned by
// ListTeachRequest.Validate if the designated constraints aren't met.
type ListTeachRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeachRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeachRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeachRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeachRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeachRequestValidationError) ErrorName() string { return "ListTeachRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTeachRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeachRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeachRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeachRequestValidationError{}

// Validate checks the field values on ListTeachReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTeachReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeachReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListTeachReplyMultiError,
// or nil if none found.
func (m *ListTeachReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeachReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetTeachs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeachReplyValidationError{
						field:  fmt.Sprintf("Teachs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeachReplyValidationError{
						field:  fmt.Sprintf("Teachs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeachReplyValidationError{
					field:  fmt.Sprintf("Teachs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeachReplyMultiError(errors)
	}

	return nil
}

// ListTeachReplyMultiError is an error wrapping multiple validation errors
// returned by ListTeachReply.ValidateAll() if the designated constraints
// aren't met.
type ListTeachReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeachReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeachReplyMultiError) AllErrors() []error { return m }

// ListTeachReplyValidationError is the validation error returned by
// ListTeachReply.Validate if the designated constraints aren't met.
type ListTeachReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeachReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeachReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeachReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeachReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeachReplyValidationError) ErrorName() string { return "ListTeachReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTeachReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeachReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeachReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeachReplyValidationError{}
