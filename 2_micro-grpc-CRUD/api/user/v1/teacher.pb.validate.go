// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/teacher.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTeacherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeacherRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeacherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeacherRequestMultiError, or nil if none found.
func (m *CreateTeacherRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeacherRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Age

	// no validation rules for Birthday

	// no validation rules for SchoolName

	// no validation rules for College

	// no validation rules for Title

	// no validation rules for Profile

	if len(errors) > 0 {
		return CreateTeacherRequestMultiError(errors)
	}

	return nil
}

// CreateTeacherRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTeacherRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTeacherRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeacherRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeacherRequestMultiError) AllErrors() []error { return m }

// CreateTeacherRequestValidationError is the validation error returned by
// CreateTeacherRequest.Validate if the designated constraints aren't met.
type CreateTeacherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeacherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeacherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeacherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeacherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeacherRequestValidationError) ErrorName() string {
	return "CreateTeacherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeacherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeacherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeacherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeacherRequestValidationError{}

// Validate checks the field values on CreateTeacherReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTeacherReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTeacherReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTeacherReplyMultiError, or nil if none found.
func (m *CreateTeacherReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTeacherReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTeacherReplyMultiError(errors)
	}

	return nil
}

// CreateTeacherReplyMultiError is an error wrapping multiple validation errors
// returned by CreateTeacherReply.ValidateAll() if the designated constraints
// aren't met.
type CreateTeacherReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTeacherReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTeacherReplyMultiError) AllErrors() []error { return m }

// CreateTeacherReplyValidationError is the validation error returned by
// CreateTeacherReply.Validate if the designated constraints aren't met.
type CreateTeacherReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTeacherReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTeacherReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTeacherReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTeacherReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTeacherReplyValidationError) ErrorName() string {
	return "CreateTeacherReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTeacherReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTeacherReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTeacherReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTeacherReplyValidationError{}

// Validate checks the field values on DeleteTeacherByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeacherByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeacherByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeacherByIDRequestMultiError, or nil if none found.
func (m *DeleteTeacherByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeacherByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTeacherByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteTeacherByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTeacherByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTeacherByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeacherByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeacherByIDRequestMultiError) AllErrors() []error { return m }

// DeleteTeacherByIDRequestValidationError is the validation error returned by
// DeleteTeacherByIDRequest.Validate if the designated constraints aren't met.
type DeleteTeacherByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeacherByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeacherByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeacherByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeacherByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeacherByIDRequestValidationError) ErrorName() string {
	return "DeleteTeacherByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeacherByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeacherByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeacherByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeacherByIDRequestValidationError{}

// Validate checks the field values on DeleteTeacherByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeacherByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeacherByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeacherByIDReplyMultiError, or nil if none found.
func (m *DeleteTeacherByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeacherByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTeacherByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteTeacherByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTeacherByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTeacherByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeacherByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeacherByIDReplyMultiError) AllErrors() []error { return m }

// DeleteTeacherByIDReplyValidationError is the validation error returned by
// DeleteTeacherByIDReply.Validate if the designated constraints aren't met.
type DeleteTeacherByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeacherByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeacherByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeacherByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeacherByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeacherByIDReplyValidationError) ErrorName() string {
	return "DeleteTeacherByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeacherByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeacherByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeacherByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeacherByIDReplyValidationError{}

// Validate checks the field values on DeleteTeacherByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeacherByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeacherByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeacherByIDsRequestMultiError, or nil if none found.
func (m *DeleteTeacherByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeacherByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTeacherByIDsRequestMultiError(errors)
	}

	return nil
}

// DeleteTeacherByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTeacherByIDsRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteTeacherByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeacherByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeacherByIDsRequestMultiError) AllErrors() []error { return m }

// DeleteTeacherByIDsRequestValidationError is the validation error returned by
// DeleteTeacherByIDsRequest.Validate if the designated constraints aren't met.
type DeleteTeacherByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeacherByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeacherByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeacherByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeacherByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeacherByIDsRequestValidationError) ErrorName() string {
	return "DeleteTeacherByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeacherByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeacherByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeacherByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeacherByIDsRequestValidationError{}

// Validate checks the field values on DeleteTeacherByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTeacherByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTeacherByIDsReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTeacherByIDsReplyMultiError, or nil if none found.
func (m *DeleteTeacherByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTeacherByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTeacherByIDsReplyMultiError(errors)
	}

	return nil
}

// DeleteTeacherByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteTeacherByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteTeacherByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTeacherByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTeacherByIDsReplyMultiError) AllErrors() []error { return m }

// DeleteTeacherByIDsReplyValidationError is the validation error returned by
// DeleteTeacherByIDsReply.Validate if the designated constraints aren't met.
type DeleteTeacherByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTeacherByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTeacherByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTeacherByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTeacherByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTeacherByIDsReplyValidationError) ErrorName() string {
	return "DeleteTeacherByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTeacherByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTeacherByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTeacherByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTeacherByIDsReplyValidationError{}

// Validate checks the field values on UpdateTeacherByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeacherByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeacherByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeacherByIDRequestMultiError, or nil if none found.
func (m *UpdateTeacherByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeacherByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Age

	// no validation rules for Birthday

	// no validation rules for SchoolName

	// no validation rules for College

	// no validation rules for Title

	// no validation rules for Profile

	if len(errors) > 0 {
		return UpdateTeacherByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateTeacherByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTeacherByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTeacherByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeacherByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeacherByIDRequestMultiError) AllErrors() []error { return m }

// UpdateTeacherByIDRequestValidationError is the validation error returned by
// UpdateTeacherByIDRequest.Validate if the designated constraints aren't met.
type UpdateTeacherByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeacherByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeacherByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeacherByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeacherByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeacherByIDRequestValidationError) ErrorName() string {
	return "UpdateTeacherByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeacherByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeacherByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeacherByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeacherByIDRequestValidationError{}

// Validate checks the field values on UpdateTeacherByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTeacherByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTeacherByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTeacherByIDReplyMultiError, or nil if none found.
func (m *UpdateTeacherByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTeacherByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTeacherByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateTeacherByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateTeacherByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateTeacherByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTeacherByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTeacherByIDReplyMultiError) AllErrors() []error { return m }

// UpdateTeacherByIDReplyValidationError is the validation error returned by
// UpdateTeacherByIDReply.Validate if the designated constraints aren't met.
type UpdateTeacherByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTeacherByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTeacherByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTeacherByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTeacherByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTeacherByIDReplyValidationError) ErrorName() string {
	return "UpdateTeacherByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTeacherByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTeacherByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTeacherByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTeacherByIDReplyValidationError{}

// Validate checks the field values on Teacher with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Teacher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Teacher with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TeacherMultiError, or nil if none found.
func (m *Teacher) ValidateAll() error {
	return m.validate(true)
}

func (m *Teacher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Name

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Avatar

	// no validation rules for Gender

	// no validation rules for Age

	// no validation rules for Birthday

	// no validation rules for SchoolName

	// no validation rules for College

	// no validation rules for Title

	// no validation rules for Profile

	if len(errors) > 0 {
		return TeacherMultiError(errors)
	}

	return nil
}

// TeacherMultiError is an error wrapping multiple validation errors returned
// by Teacher.ValidateAll() if the designated constraints aren't met.
type TeacherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TeacherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TeacherMultiError) AllErrors() []error { return m }

// TeacherValidationError is the validation error returned by Teacher.Validate
// if the designated constraints aren't met.
type TeacherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TeacherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TeacherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TeacherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TeacherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TeacherValidationError) ErrorName() string { return "TeacherValidationError" }

// Error satisfies the builtin error interface
func (e TeacherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTeacher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TeacherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TeacherValidationError{}

// Validate checks the field values on GetTeacherByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeacherByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeacherByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeacherByIDRequestMultiError, or nil if none found.
func (m *GetTeacherByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeacherByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetTeacherByIDRequestMultiError(errors)
	}

	return nil
}

// GetTeacherByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetTeacherByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTeacherByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeacherByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeacherByIDRequestMultiError) AllErrors() []error { return m }

// GetTeacherByIDRequestValidationError is the validation error returned by
// GetTeacherByIDRequest.Validate if the designated constraints aren't met.
type GetTeacherByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeacherByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeacherByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeacherByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeacherByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeacherByIDRequestValidationError) ErrorName() string {
	return "GetTeacherByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeacherByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeacherByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeacherByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeacherByIDRequestValidationError{}

// Validate checks the field values on GetTeacherByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeacherByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeacherByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeacherByIDReplyMultiError, or nil if none found.
func (m *GetTeacherByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeacherByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTeacher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTeacherByIDReplyValidationError{
					field:  "Teacher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTeacherByIDReplyValidationError{
					field:  "Teacher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeacher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeacherByIDReplyValidationError{
				field:  "Teacher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTeacherByIDReplyMultiError(errors)
	}

	return nil
}

// GetTeacherByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetTeacherByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetTeacherByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeacherByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeacherByIDReplyMultiError) AllErrors() []error { return m }

// GetTeacherByIDReplyValidationError is the validation error returned by
// GetTeacherByIDReply.Validate if the designated constraints aren't met.
type GetTeacherByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeacherByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeacherByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeacherByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeacherByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeacherByIDReplyValidationError) ErrorName() string {
	return "GetTeacherByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeacherByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeacherByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeacherByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeacherByIDReplyValidationError{}

// Validate checks the field values on GetTeacherByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeacherByConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeacherByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeacherByConditionRequestMultiError, or nil if none found.
func (m *GetTeacherByConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeacherByConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTeacherByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTeacherByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeacherByConditionRequestValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTeacherByConditionRequestMultiError(errors)
	}

	return nil
}

// GetTeacherByConditionRequestMultiError is an error wrapping multiple
// validation errors returned by GetTeacherByConditionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTeacherByConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeacherByConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeacherByConditionRequestMultiError) AllErrors() []error { return m }

// GetTeacherByConditionRequestValidationError is the validation error returned
// by GetTeacherByConditionRequest.Validate if the designated constraints
// aren't met.
type GetTeacherByConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeacherByConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeacherByConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeacherByConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeacherByConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeacherByConditionRequestValidationError) ErrorName() string {
	return "GetTeacherByConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeacherByConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeacherByConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeacherByConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeacherByConditionRequestValidationError{}

// Validate checks the field values on GetTeacherByConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTeacherByConditionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTeacherByConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTeacherByConditionReplyMultiError, or nil if none found.
func (m *GetTeacherByConditionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTeacherByConditionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTeacher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTeacherByConditionReplyValidationError{
					field:  "Teacher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTeacherByConditionReplyValidationError{
					field:  "Teacher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTeacher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTeacherByConditionReplyValidationError{
				field:  "Teacher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTeacherByConditionReplyMultiError(errors)
	}

	return nil
}

// GetTeacherByConditionReplyMultiError is an error wrapping multiple
// validation errors returned by GetTeacherByConditionReply.ValidateAll() if
// the designated constraints aren't met.
type GetTeacherByConditionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTeacherByConditionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTeacherByConditionReplyMultiError) AllErrors() []error { return m }

// GetTeacherByConditionReplyValidationError is the validation error returned
// by GetTeacherByConditionReply.Validate if the designated constraints aren't met.
type GetTeacherByConditionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTeacherByConditionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTeacherByConditionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTeacherByConditionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTeacherByConditionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTeacherByConditionReplyValidationError) ErrorName() string {
	return "GetTeacherByConditionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTeacherByConditionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTeacherByConditionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTeacherByConditionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTeacherByConditionReplyValidationError{}

// Validate checks the field values on ListTeacherByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeacherByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeacherByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeacherByIDsRequestMultiError, or nil if none found.
func (m *ListTeacherByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeacherByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTeacherByIDsRequestMultiError(errors)
	}

	return nil
}

// ListTeacherByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by ListTeacherByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTeacherByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeacherByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeacherByIDsRequestMultiError) AllErrors() []error { return m }

// ListTeacherByIDsRequestValidationError is the validation error returned by
// ListTeacherByIDsRequest.Validate if the designated constraints aren't met.
type ListTeacherByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeacherByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeacherByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeacherByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeacherByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeacherByIDsRequestValidationError) ErrorName() string {
	return "ListTeacherByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeacherByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeacherByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeacherByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeacherByIDsRequestValidationError{}

// Validate checks the field values on ListTeacherByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeacherByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeacherByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeacherByIDsReplyMultiError, or nil if none found.
func (m *ListTeacherByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeacherByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTeachers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeacherByIDsReplyValidationError{
						field:  fmt.Sprintf("Teachers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeacherByIDsReplyValidationError{
						field:  fmt.Sprintf("Teachers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeacherByIDsReplyValidationError{
					field:  fmt.Sprintf("Teachers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeacherByIDsReplyMultiError(errors)
	}

	return nil
}

// ListTeacherByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by ListTeacherByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type ListTeacherByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeacherByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeacherByIDsReplyMultiError) AllErrors() []error { return m }

// ListTeacherByIDsReplyValidationError is the validation error returned by
// ListTeacherByIDsReply.Validate if the designated constraints aren't met.
type ListTeacherByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeacherByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeacherByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeacherByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeacherByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeacherByIDsReplyValidationError) ErrorName() string {
	return "ListTeacherByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeacherByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeacherByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeacherByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeacherByIDsReplyValidationError{}

// Validate checks the field values on ListTeacherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTeacherRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeacherRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeacherRequestMultiError, or nil if none found.
func (m *ListTeacherRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeacherRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTeacherRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTeacherRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTeacherRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListTeacherRequestMultiError(errors)
	}

	return nil
}

// ListTeacherRequestMultiError is an error wrapping multiple validation errors
// returned by ListTeacherRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTeacherRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeacherRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeacherRequestMultiError) AllErrors() []error { return m }

// ListTeacherRequestValidationError is the validation error returned by
// ListTeacherRequest.Validate if the designated constraints aren't met.
type ListTeacherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeacherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeacherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeacherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeacherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeacherRequestValidationError) ErrorName() string {
	return "ListTeacherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTeacherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeacherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeacherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeacherRequestValidationError{}

// Validate checks the field values on ListTeacherReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTeacherReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTeacherReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTeacherReplyMultiError, or nil if none found.
func (m *ListTeacherReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTeacherReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetTeachers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTeacherReplyValidationError{
						field:  fmt.Sprintf("Teachers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTeacherReplyValidationError{
						field:  fmt.Sprintf("Teachers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTeacherReplyValidationError{
					field:  fmt.Sprintf("Teachers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTeacherReplyMultiError(errors)
	}

	return nil
}

// ListTeacherReplyMultiError is an error wrapping multiple validation errors
// returned by ListTeacherReply.ValidateAll() if the designated constraints
// aren't met.
type ListTeacherReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTeacherReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTeacherReplyMultiError) AllErrors() []error { return m }

// ListTeacherReplyValidationError is the validation error returned by
// ListTeacherReply.Validate if the designated constraints aren't met.
type ListTeacherReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTeacherReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTeacherReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTeacherReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTeacherReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTeacherReplyValidationError) ErrorName() string { return "ListTeacherReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListTeacherReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTeacherReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTeacherReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTeacherReplyValidationError{}
