// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/course.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCourseRequestMultiError, or nil if none found.
func (m *CreateCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Credit

	// no validation rules for College

	// no validation rules for Semester

	// no validation rules for Time

	// no validation rules for Place

	if len(errors) > 0 {
		return CreateCourseRequestMultiError(errors)
	}

	return nil
}

// CreateCourseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourseRequestMultiError) AllErrors() []error { return m }

// CreateCourseRequestValidationError is the validation error returned by
// CreateCourseRequest.Validate if the designated constraints aren't met.
type CreateCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseRequestValidationError) ErrorName() string {
	return "CreateCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseRequestValidationError{}

// Validate checks the field values on CreateCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCourseReplyMultiError, or nil if none found.
func (m *CreateCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCourseReplyMultiError(errors)
	}

	return nil
}

// CreateCourseReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCourseReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCourseReplyMultiError) AllErrors() []error { return m }

// CreateCourseReplyValidationError is the validation error returned by
// CreateCourseReply.Validate if the designated constraints aren't met.
type CreateCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseReplyValidationError) ErrorName() string {
	return "CreateCourseReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseReplyValidationError{}

// Validate checks the field values on DeleteCourseByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCourseByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCourseByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCourseByIDRequestMultiError, or nil if none found.
func (m *DeleteCourseByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCourseByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCourseByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteCourseByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCourseByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCourseByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCourseByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCourseByIDRequestMultiError) AllErrors() []error { return m }

// DeleteCourseByIDRequestValidationError is the validation error returned by
// DeleteCourseByIDRequest.Validate if the designated constraints aren't met.
type DeleteCourseByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseByIDRequestValidationError) ErrorName() string {
	return "DeleteCourseByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseByIDRequestValidationError{}

// Validate checks the field values on DeleteCourseByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCourseByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCourseByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCourseByIDReplyMultiError, or nil if none found.
func (m *DeleteCourseByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCourseByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCourseByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteCourseByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCourseByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCourseByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCourseByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCourseByIDReplyMultiError) AllErrors() []error { return m }

// DeleteCourseByIDReplyValidationError is the validation error returned by
// DeleteCourseByIDReply.Validate if the designated constraints aren't met.
type DeleteCourseByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseByIDReplyValidationError) ErrorName() string {
	return "DeleteCourseByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseByIDReplyValidationError{}

// Validate checks the field values on DeleteCourseByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCourseByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCourseByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCourseByIDsRequestMultiError, or nil if none found.
func (m *DeleteCourseByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCourseByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCourseByIDsRequestMultiError(errors)
	}

	return nil
}

// DeleteCourseByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCourseByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCourseByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCourseByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCourseByIDsRequestMultiError) AllErrors() []error { return m }

// DeleteCourseByIDsRequestValidationError is the validation error returned by
// DeleteCourseByIDsRequest.Validate if the designated constraints aren't met.
type DeleteCourseByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseByIDsRequestValidationError) ErrorName() string {
	return "DeleteCourseByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseByIDsRequestValidationError{}

// Validate checks the field values on DeleteCourseByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCourseByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCourseByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCourseByIDsReplyMultiError, or nil if none found.
func (m *DeleteCourseByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCourseByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCourseByIDsReplyMultiError(errors)
	}

	return nil
}

// DeleteCourseByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCourseByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCourseByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCourseByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCourseByIDsReplyMultiError) AllErrors() []error { return m }

// DeleteCourseByIDsReplyValidationError is the validation error returned by
// DeleteCourseByIDsReply.Validate if the designated constraints aren't met.
type DeleteCourseByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseByIDsReplyValidationError) ErrorName() string {
	return "DeleteCourseByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseByIDsReplyValidationError{}

// Validate checks the field values on UpdateCourseByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCourseByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCourseByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCourseByIDRequestMultiError, or nil if none found.
func (m *UpdateCourseByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCourseByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Credit

	// no validation rules for College

	// no validation rules for Semester

	// no validation rules for Time

	// no validation rules for Place

	if len(errors) > 0 {
		return UpdateCourseByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateCourseByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCourseByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCourseByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourseByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourseByIDRequestMultiError) AllErrors() []error { return m }

// UpdateCourseByIDRequestValidationError is the validation error returned by
// UpdateCourseByIDRequest.Validate if the designated constraints aren't met.
type UpdateCourseByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseByIDRequestValidationError) ErrorName() string {
	return "UpdateCourseByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseByIDRequestValidationError{}

// Validate checks the field values on UpdateCourseByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCourseByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCourseByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCourseByIDReplyMultiError, or nil if none found.
func (m *UpdateCourseByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCourseByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCourseByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateCourseByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateCourseByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateCourseByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCourseByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCourseByIDReplyMultiError) AllErrors() []error { return m }

// UpdateCourseByIDReplyValidationError is the validation error returned by
// UpdateCourseByIDReply.Validate if the designated constraints aren't met.
type UpdateCourseByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseByIDReplyValidationError) ErrorName() string {
	return "UpdateCourseByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseByIDReplyValidationError{}

// Validate checks the field values on Course with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Course) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Course with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CourseMultiError, or nil if none found.
func (m *Course) ValidateAll() error {
	return m.validate(true)
}

func (m *Course) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Credit

	// no validation rules for College

	// no validation rules for Semester

	// no validation rules for Time

	// no validation rules for Place

	if len(errors) > 0 {
		return CourseMultiError(errors)
	}

	return nil
}

// CourseMultiError is an error wrapping multiple validation errors returned by
// Course.ValidateAll() if the designated constraints aren't met.
type CourseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseMultiError) AllErrors() []error { return m }

// CourseValidationError is the validation error returned by Course.Validate if
// the designated constraints aren't met.
type CourseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseValidationError) ErrorName() string { return "CourseValidationError" }

// Error satisfies the builtin error interface
func (e CourseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseValidationError{}

// Validate checks the field values on GetCourseByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCourseByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCourseByIDRequestMultiError, or nil if none found.
func (m *GetCourseByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCourseByIDRequestMultiError(errors)
	}

	return nil
}

// GetCourseByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetCourseByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCourseByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseByIDRequestMultiError) AllErrors() []error { return m }

// GetCourseByIDRequestValidationError is the validation error returned by
// GetCourseByIDRequest.Validate if the designated constraints aren't met.
type GetCourseByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseByIDRequestValidationError) ErrorName() string {
	return "GetCourseByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseByIDRequestValidationError{}

// Validate checks the field values on GetCourseByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCourseByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCourseByIDReplyMultiError, or nil if none found.
func (m *GetCourseByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCourse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCourseByIDReplyValidationError{
					field:  "Course",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCourseByIDReplyValidationError{
					field:  "Course",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCourse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourseByIDReplyValidationError{
				field:  "Course",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCourseByIDReplyMultiError(errors)
	}

	return nil
}

// GetCourseByIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetCourseByIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetCourseByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseByIDReplyMultiError) AllErrors() []error { return m }

// GetCourseByIDReplyValidationError is the validation error returned by
// GetCourseByIDReply.Validate if the designated constraints aren't met.
type GetCourseByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseByIDReplyValidationError) ErrorName() string {
	return "GetCourseByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseByIDReplyValidationError{}

// Validate checks the field values on GetCourseByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCourseByConditionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseByConditionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCourseByConditionRequestMultiError, or nil if none found.
func (m *GetCourseByConditionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseByConditionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConditions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCourseByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCourseByConditionRequestValidationError{
					field:  "Conditions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourseByConditionRequestValidationError{
				field:  "Conditions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCourseByConditionRequestMultiError(errors)
	}

	return nil
}

// GetCourseByConditionRequestMultiError is an error wrapping multiple
// validation errors returned by GetCourseByConditionRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCourseByConditionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseByConditionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseByConditionRequestMultiError) AllErrors() []error { return m }

// GetCourseByConditionRequestValidationError is the validation error returned
// by GetCourseByConditionRequest.Validate if the designated constraints
// aren't met.
type GetCourseByConditionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseByConditionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseByConditionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseByConditionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseByConditionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseByConditionRequestValidationError) ErrorName() string {
	return "GetCourseByConditionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseByConditionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseByConditionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseByConditionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseByConditionRequestValidationError{}

// Validate checks the field values on GetCourseByConditionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCourseByConditionReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseByConditionReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCourseByConditionReplyMultiError, or nil if none found.
func (m *GetCourseByConditionReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseByConditionReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCourse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCourseByConditionReplyValidationError{
					field:  "Course",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCourseByConditionReplyValidationError{
					field:  "Course",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCourse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCourseByConditionReplyValidationError{
				field:  "Course",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCourseByConditionReplyMultiError(errors)
	}

	return nil
}

// GetCourseByConditionReplyMultiError is an error wrapping multiple validation
// errors returned by GetCourseByConditionReply.ValidateAll() if the
// designated constraints aren't met.
type GetCourseByConditionReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseByConditionReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseByConditionReplyMultiError) AllErrors() []error { return m }

// GetCourseByConditionReplyValidationError is the validation error returned by
// GetCourseByConditionReply.Validate if the designated constraints aren't met.
type GetCourseByConditionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseByConditionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseByConditionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseByConditionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseByConditionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseByConditionReplyValidationError) ErrorName() string {
	return "GetCourseByConditionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseByConditionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseByConditionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseByConditionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseByConditionReplyValidationError{}

// Validate checks the field values on ListCourseByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCourseByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCourseByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCourseByIDsRequestMultiError, or nil if none found.
func (m *ListCourseByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCourseByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCourseByIDsRequestMultiError(errors)
	}

	return nil
}

// ListCourseByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCourseByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCourseByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCourseByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCourseByIDsRequestMultiError) AllErrors() []error { return m }

// ListCourseByIDsRequestValidationError is the validation error returned by
// ListCourseByIDsRequest.Validate if the designated constraints aren't met.
type ListCourseByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCourseByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCourseByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCourseByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCourseByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCourseByIDsRequestValidationError) ErrorName() string {
	return "ListCourseByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCourseByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCourseByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCourseByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCourseByIDsRequestValidationError{}

// Validate checks the field values on ListCourseByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCourseByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCourseByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCourseByIDsReplyMultiError, or nil if none found.
func (m *ListCourseByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCourseByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCourses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCourseByIDsReplyValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCourseByIDsReplyValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCourseByIDsReplyValidationError{
					field:  fmt.Sprintf("Courses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCourseByIDsReplyMultiError(errors)
	}

	return nil
}

// ListCourseByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by ListCourseByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type ListCourseByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCourseByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCourseByIDsReplyMultiError) AllErrors() []error { return m }

// ListCourseByIDsReplyValidationError is the validation error returned by
// ListCourseByIDsReply.Validate if the designated constraints aren't met.
type ListCourseByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCourseByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCourseByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCourseByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCourseByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCourseByIDsReplyValidationError) ErrorName() string {
	return "ListCourseByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCourseByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCourseByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCourseByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCourseByIDsReplyValidationError{}

// Validate checks the field values on ListCourseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCourseRequestMultiError, or nil if none found.
func (m *ListCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCourseRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCourseRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCourseRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCourseRequestMultiError(errors)
	}

	return nil
}

// ListCourseRequestMultiError is an error wrapping multiple validation errors
// returned by ListCourseRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCourseRequestMultiError) AllErrors() []error { return m }

// ListCourseRequestValidationError is the validation error returned by
// ListCourseRequest.Validate if the designated constraints aren't met.
type ListCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCourseRequestValidationError) ErrorName() string {
	return "ListCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCourseRequestValidationError{}

// Validate checks the field values on ListCourseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCourseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCourseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCourseReplyMultiError, or nil if none found.
func (m *ListCourseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCourseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetCourses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCourseReplyValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCourseReplyValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCourseReplyValidationError{
					field:  fmt.Sprintf("Courses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCourseReplyMultiError(errors)
	}

	return nil
}

// ListCourseReplyMultiError is an error wrapping multiple validation errors
// returned by ListCourseReply.ValidateAll() if the designated constraints
// aren't met.
type ListCourseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCourseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCourseReplyMultiError) AllErrors() []error { return m }

// ListCourseReplyValidationError is the validation error returned by
// ListCourseReply.Validate if the designated constraints aren't met.
type ListCourseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCourseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCourseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCourseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCourseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCourseReplyValidationError) ErrorName() string { return "ListCourseReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCourseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCourseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCourseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCourseReplyValidationError{}
