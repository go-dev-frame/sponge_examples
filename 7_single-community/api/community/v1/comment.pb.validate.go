// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/community/v1/comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentInfoMultiError, or
// nil if none found.
func (m *CommentInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PostId

	// no validation rules for UserId

	// no validation rules for Content

	// no validation rules for ParentId

	// no validation rules for ReplyCount

	// no validation rules for LikeCount

	// no validation rules for Score

	// no validation rules for DelFlag

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeviceType

	// no validation rules for Ip

	if len(errors) > 0 {
		return CommentInfoMultiError(errors)
	}

	return nil
}

// CommentInfoMultiError is an error wrapping multiple validation errors
// returned by CommentInfo.ValidateAll() if the designated constraints aren't met.
type CommentInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentInfoMultiError) AllErrors() []error { return m }

// CommentInfoValidationError is the validation error returned by
// CommentInfo.Validate if the designated constraints aren't met.
type CommentInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentInfoValidationError) ErrorName() string { return "CommentInfoValidationError" }

// Error satisfies the builtin error interface
func (e CommentInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentInfoValidationError{}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() < 1 {
		err := CreateCommentRequestValidationError{
			field:  "PostId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() < 1 {
		err := CreateCommentRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := CreateCommentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DeviceType

	// no validation rules for Ip

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on CreateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentReplyMultiError, or nil if none found.
func (m *CreateCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentReplyValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentReplyMultiError(errors)
	}

	return nil
}

// CreateCommentReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCommentReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentReplyMultiError) AllErrors() []error { return m }

// CreateCommentReplyValidationError is the validation error returned by
// CreateCommentReply.Validate if the designated constraints aren't met.
type CreateCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentReplyValidationError) ErrorName() string {
	return "CreateCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentReplyValidationError{}

// Validate checks the field values on DeleteCommentByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentByIDRequestMultiError, or nil if none found.
func (m *DeleteCommentByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteCommentByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() < 1 {
		err := DeleteCommentByIDRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDelFlag(); val < 0 || val > 2 {
		err := DeleteCommentByIDRequestValidationError{
			field:  "DelFlag",
			reason: "value must be inside range [0, 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCommentByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentByIDRequestMultiError) AllErrors() []error { return m }

// DeleteCommentByIDRequestValidationError is the validation error returned by
// DeleteCommentByIDRequest.Validate if the designated constraints aren't met.
type DeleteCommentByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByIDRequestValidationError) ErrorName() string {
	return "DeleteCommentByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByIDRequestValidationError{}

// Validate checks the field values on DeleteCommentByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentByIDReplyMultiError, or nil if none found.
func (m *DeleteCommentByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteCommentByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentByIDReplyMultiError) AllErrors() []error { return m }

// DeleteCommentByIDReplyValidationError is the validation error returned by
// DeleteCommentByIDReply.Validate if the designated constraints aren't met.
type DeleteCommentByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentByIDReplyValidationError) ErrorName() string {
	return "DeleteCommentByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentByIDReplyValidationError{}

// Validate checks the field values on UpdateCommentByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentByIDRequestMultiError, or nil if none found.
func (m *UpdateCommentByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateCommentByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := UpdateCommentByIDRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCommentByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateCommentByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentByIDRequestMultiError) AllErrors() []error { return m }

// UpdateCommentByIDRequestValidationError is the validation error returned by
// UpdateCommentByIDRequest.Validate if the designated constraints aren't met.
type UpdateCommentByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentByIDRequestValidationError) ErrorName() string {
	return "UpdateCommentByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentByIDRequestValidationError{}

// Validate checks the field values on UpdateCommentByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommentByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommentByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommentByIDReplyMultiError, or nil if none found.
func (m *UpdateCommentByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommentByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCommentByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateCommentByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateCommentByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommentByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommentByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommentByIDReplyMultiError) AllErrors() []error { return m }

// UpdateCommentByIDReplyValidationError is the validation error returned by
// UpdateCommentByIDReply.Validate if the designated constraints aren't met.
type UpdateCommentByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommentByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommentByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommentByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommentByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommentByIDReplyValidationError) ErrorName() string {
	return "UpdateCommentByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommentByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommentByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommentByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommentByIDReplyValidationError{}

// Validate checks the field values on ReplyCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReplyCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyCommentRequestMultiError, or nil if none found.
func (m *ReplyCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommentId() < 1 {
		err := ReplyCommentRequestValidationError{
			field:  "CommentId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() < 1 {
		err := ReplyCommentRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := ReplyCommentRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DeviceType

	// no validation rules for Ip

	if len(errors) > 0 {
		return ReplyCommentRequestMultiError(errors)
	}

	return nil
}

// ReplyCommentRequestMultiError is an error wrapping multiple validation
// errors returned by ReplyCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type ReplyCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyCommentRequestMultiError) AllErrors() []error { return m }

// ReplyCommentRequestValidationError is the validation error returned by
// ReplyCommentRequest.Validate if the designated constraints aren't met.
type ReplyCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyCommentRequestValidationError) ErrorName() string {
	return "ReplyCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReplyCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyCommentRequestValidationError{}

// Validate checks the field values on ReplyCommentReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReplyCommentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReplyCommentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReplyCommentReplyMultiError, or nil if none found.
func (m *ReplyCommentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReplyCommentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReplyCommentReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReplyCommentReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReplyCommentReplyValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReplyCommentReplyMultiError(errors)
	}

	return nil
}

// ReplyCommentReplyMultiError is an error wrapping multiple validation errors
// returned by ReplyCommentReply.ValidateAll() if the designated constraints
// aren't met.
type ReplyCommentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReplyCommentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReplyCommentReplyMultiError) AllErrors() []error { return m }

// ReplyCommentReplyValidationError is the validation error returned by
// ReplyCommentReply.Validate if the designated constraints aren't met.
type ReplyCommentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReplyCommentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReplyCommentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReplyCommentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReplyCommentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReplyCommentReplyValidationError) ErrorName() string {
	return "ReplyCommentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReplyCommentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReplyCommentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReplyCommentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReplyCommentReplyValidationError{}

// Validate checks the field values on GetCommentByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentByIDRequestMultiError, or nil if none found.
func (m *GetCommentByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetCommentByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommentByIDRequestMultiError(errors)
	}

	return nil
}

// GetCommentByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommentByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommentByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentByIDRequestMultiError) AllErrors() []error { return m }

// GetCommentByIDRequestValidationError is the validation error returned by
// GetCommentByIDRequest.Validate if the designated constraints aren't met.
type GetCommentByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentByIDRequestValidationError) ErrorName() string {
	return "GetCommentByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentByIDRequestValidationError{}

// Validate checks the field values on GetCommentByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentByIDReplyMultiError, or nil if none found.
func (m *GetCommentByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentByIDReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentByIDReplyValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentByIDReplyValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommentByIDReplyMultiError(errors)
	}

	return nil
}

// GetCommentByIDReplyMultiError is an error wrapping multiple validation
// errors returned by GetCommentByIDReply.ValidateAll() if the designated
// constraints aren't met.
type GetCommentByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentByIDReplyMultiError) AllErrors() []error { return m }

// GetCommentByIDReplyValidationError is the validation error returned by
// GetCommentByIDReply.Validate if the designated constraints aren't met.
type GetCommentByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentByIDReplyValidationError) ErrorName() string {
	return "GetCommentByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentByIDReplyValidationError{}

// Validate checks the field values on ListCommentByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentByIDsRequestMultiError, or nil if none found.
func (m *ListCommentByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 100 {
		err := ListCommentByIDsRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCommentByIDsRequestMultiError(errors)
	}

	return nil
}

// ListCommentByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCommentByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCommentByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentByIDsRequestMultiError) AllErrors() []error { return m }

// ListCommentByIDsRequestValidationError is the validation error returned by
// ListCommentByIDsRequest.Validate if the designated constraints aren't met.
type ListCommentByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentByIDsRequestValidationError) ErrorName() string {
	return "ListCommentByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentByIDsRequestValidationError{}

// Validate checks the field values on ListCommentByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentByIDsReplyMultiError, or nil if none found.
func (m *ListCommentByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentByIDsReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentByIDsReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentByIDsReplyValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCommentByIDsReplyMultiError(errors)
	}

	return nil
}

// ListCommentByIDsReplyMultiError is an error wrapping multiple validation
// errors returned by ListCommentByIDsReply.ValidateAll() if the designated
// constraints aren't met.
type ListCommentByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentByIDsReplyMultiError) AllErrors() []error { return m }

// ListCommentByIDsReplyValidationError is the validation error returned by
// ListCommentByIDsReply.Validate if the designated constraints aren't met.
type ListCommentByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentByIDsReplyValidationError) ErrorName() string {
	return "ListCommentByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentByIDsReplyValidationError{}

// Validate checks the field values on ListCommentHotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentHotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentHotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentHotRequestMultiError, or nil if none found.
func (m *ListCommentHotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentHotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() < 1 {
		err := ListCommentHotRequestValidationError{
			field:  "PostId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := ListCommentHotRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListCommentHotRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCommentHotRequestMultiError(errors)
	}

	return nil
}

// ListCommentHotRequestMultiError is an error wrapping multiple validation
// errors returned by ListCommentHotRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCommentHotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentHotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentHotRequestMultiError) AllErrors() []error { return m }

// ListCommentHotRequestValidationError is the validation error returned by
// ListCommentHotRequest.Validate if the designated constraints aren't met.
type ListCommentHotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentHotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentHotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentHotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentHotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentHotRequestValidationError) ErrorName() string {
	return "ListCommentHotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentHotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentHotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentHotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentHotRequestValidationError{}

// Validate checks the field values on ListCommentHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentHotReplyMultiError, or nil if none found.
func (m *ListCommentHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentHotReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentHotReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentHotReplyValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListCommentHotReplyMultiError(errors)
	}

	return nil
}

// ListCommentHotReplyMultiError is an error wrapping multiple validation
// errors returned by ListCommentHotReply.ValidateAll() if the designated
// constraints aren't met.
type ListCommentHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentHotReplyMultiError) AllErrors() []error { return m }

// ListCommentHotReplyValidationError is the validation error returned by
// ListCommentHotReply.Validate if the designated constraints aren't met.
type ListCommentHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentHotReplyValidationError) ErrorName() string {
	return "ListCommentHotReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentHotReplyValidationError{}

// Validate checks the field values on ListCommentLatestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentLatestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentLatestRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentLatestRequestMultiError, or nil if none found.
func (m *ListCommentLatestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentLatestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPostId() < 1 {
		err := ListCommentLatestRequestValidationError{
			field:  "PostId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := ListCommentLatestRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListCommentLatestRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCommentLatestRequestMultiError(errors)
	}

	return nil
}

// ListCommentLatestRequestMultiError is an error wrapping multiple validation
// errors returned by ListCommentLatestRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCommentLatestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentLatestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentLatestRequestMultiError) AllErrors() []error { return m }

// ListCommentLatestRequestValidationError is the validation error returned by
// ListCommentLatestRequest.Validate if the designated constraints aren't met.
type ListCommentLatestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentLatestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentLatestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentLatestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentLatestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentLatestRequestValidationError) ErrorName() string {
	return "ListCommentLatestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentLatestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentLatestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentLatestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentLatestRequestValidationError{}

// Validate checks the field values on ListCommentLatestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentLatestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentLatestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentLatestReplyMultiError, or nil if none found.
func (m *ListCommentLatestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentLatestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentLatestReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentLatestReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentLatestReplyValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListCommentLatestReplyMultiError(errors)
	}

	return nil
}

// ListCommentLatestReplyMultiError is an error wrapping multiple validation
// errors returned by ListCommentLatestReply.ValidateAll() if the designated
// constraints aren't met.
type ListCommentLatestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentLatestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentLatestReplyMultiError) AllErrors() []error { return m }

// ListCommentLatestReplyValidationError is the validation error returned by
// ListCommentLatestReply.Validate if the designated constraints aren't met.
type ListCommentLatestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentLatestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentLatestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentLatestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentLatestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentLatestReplyValidationError) ErrorName() string {
	return "ListCommentLatestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentLatestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentLatestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentLatestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentLatestReplyValidationError{}

// Validate checks the field values on ListCommentReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentReplyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentReplyRequestMultiError, or nil if none found.
func (m *ListCommentReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommentId() < 1 {
		err := ListCommentReplyRequestValidationError{
			field:  "CommentId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := ListCommentReplyRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListCommentReplyRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCommentReplyRequestMultiError(errors)
	}

	return nil
}

// ListCommentReplyRequestMultiError is an error wrapping multiple validation
// errors returned by ListCommentReplyRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCommentReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentReplyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentReplyRequestMultiError) AllErrors() []error { return m }

// ListCommentReplyRequestValidationError is the validation error returned by
// ListCommentReplyRequest.Validate if the designated constraints aren't met.
type ListCommentReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReplyRequestValidationError) ErrorName() string {
	return "ListCommentReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReplyRequestValidationError{}

// Validate checks the field values on ListCommentReplyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCommentReplyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCommentReplyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCommentReplyReplyMultiError, or nil if none found.
func (m *ListCommentReplyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCommentReplyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCommentReplyReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCommentReplyReplyValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCommentReplyReplyValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListCommentReplyReplyMultiError(errors)
	}

	return nil
}

// ListCommentReplyReplyMultiError is an error wrapping multiple validation
// errors returned by ListCommentReplyReply.ValidateAll() if the designated
// constraints aren't met.
type ListCommentReplyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCommentReplyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCommentReplyReplyMultiError) AllErrors() []error { return m }

// ListCommentReplyReplyValidationError is the validation error returned by
// ListCommentReplyReply.Validate if the designated constraints aren't met.
type ListCommentReplyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCommentReplyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCommentReplyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCommentReplyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCommentReplyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCommentReplyReplyValidationError) ErrorName() string {
	return "ListCommentReplyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListCommentReplyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCommentReplyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCommentReplyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCommentReplyReplyValidationError{}
