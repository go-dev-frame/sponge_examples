syntax = "proto3";

package api.community.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
import "validate/validate.proto";
import "api/types/types.proto";

option go_package = "community/api/community/v1;v1";

// Default settings for generating swagger documents
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "user api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Input a \"Bearer your-jwt-token\" to Value";
      }
    }
  }
};

service UserService {
  // 发送邮件验证码
  rpc SendEmailVerifyCode(SendEmailVerifyCodeRequest) returns (SendEmailVerifyCodeReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/email"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "发送邮件验证码",
      description: "发送邮件验证码",
    };
  }
  // 注册
  rpc Register(RegisterRequest) returns (RegisterReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/register"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "注册",
      description: "注册",
    };
  }
  // 登录
  rpc Login(LoginRequest) returns (LoginReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "登录",
      description: "登录",
    };
  }
  // 登出
  rpc Logout(LogoutRequest) returns (LogoutReply) {
    option (google.api.http) = {
      post: "/api/v1/auth/logout"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "登出",
      description: "登出",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
  }
  // 删除用户
  rpc DeleteByID(DeleteUserByIDRequest) returns (DeleteUserByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "删除用户",
      description: "通过id删除用户，软删除",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
  }
  // 更新用户
  rpc UpdateByID(UpdateUserByIDRequest) returns (UpdateUserByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/user/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新用户",
      description: "通过id更新用户",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
  }
  // 用户详情
  rpc GetByID(GetUserByIDRequest) returns (GetUserByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/user/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "用户详情",
      description: "通过id获取用户详情",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
  }
  // 获取用户列表
  rpc List(ListUserRequest) returns (ListUserReply) {
    option (google.api.http) = {
      post: "/api/v1/user/list"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取用户列表",
      description: "通过参数获取用户列表，支持分页，条件过滤",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
  }
  // 更新密码
  rpc UpdatePassword(UpdatePasswordRequest) returns (UpdatePasswordReply) {
    option (google.api.http) = {
      put: "/api/v1/user/password/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新密码",
      description: "更新密码",
      security: {
        security_requirement: {
          key: "BearerAuth";
          value: {}
        }
      }
    };
  }
}


message SendEmailVerifyCodeRequest {
  string email = 1 [(validate.rules).string.email = true];
}

message SendEmailVerifyCodeReply {}

message RegisterRequest {
  string email = 1 [(validate.rules).string.email = true];
  string emailCode = 2 [(validate.rules).string.len = 6];
  string password = 3 [(validate.rules).string.min_len = 6];
}

message RegisterReply {
  uint64 id = 1;
}

message LoginRequest {
  string email = 1 [(validate.rules).string.email = true];
  string password = 2 [(validate.rules).string.min_len = 6];
  string ip = 3;
}

message LoginReply {
  uint64 id = 1;
  string token = 2;
}

message CheckAuthRequest {
  string token = 1 [(validate.rules).string.min_len = 50];
}

message CheckAuthReply {}

message LogoutRequest {
  uint64 id = 1 [(validate.rules).uint64.gte  = 1];
  string token = 2 [(validate.rules).string.min_len  = 20];
}

message LogoutReply {
}

message DeleteUserByIDRequest {
  uint64   id =1 [(validate.rules).uint64.gte  = 1, (tagger.tags) = "uri:\"id\"" ];
}

message DeleteUserByIDReply {

}

message UpdateUserByIDRequest {
  uint64 id = 1 [(validate.rules).uint64.gte  = 1, (tagger.tags) = "uri:\"id\"" ];
  string name = 2;  // 用户名
  string nickName = 3;  // 用户昵称
  string phone = 4;  // 手机号码
  string avatar = 5;  // 头像
  int32  gender = 6;  // 性别，1:男，2:女，其他值:未知
  int32 age = 7;  // 年龄
  string birthday = 8;  // 出生日期
}

message UpdateUserByIDReply {

}

message User {
  uint64 id = 1;
  string name = 2;  // 用户名
  string nickName = 3;  // 用户昵称
  string email = 4;  // 邮件
  string phone = 5;  // 手机号码
  string avatar = 6;  // 头像
  int32  gender = 7;  // 性别，1:男，2:女，其他值:未知
  int32 age = 8;  // 年龄
  string birthday = 9;  // 出生日期
  int64 loginAt = 10;  // 登录时间
  string loginIp = 11;  // 登录ip
  int32 status = 12;  // 状态, 1:正常, 2:删除, 3:封禁
  int64 createdAt = 13;
  int64 updatedAt = 14;
}

message GetUserByIDRequest {
  uint64   id =1 [(validate.rules).uint64.gte  = 1, (tagger.tags) = "uri:\"id\"" ];
}

message GetUserByIDReply {
  User userInfo = 1;
}

message ListUserRequest {
  types.Params params = 1;
}

message ListUserReply {
  int64 total =1;
  repeated User userInfos = 2;
}

message UpdatePasswordRequest {
  uint64 id = 1 [(validate.rules).uint64.gte  = 1, (tagger.tags) = "uri:\"id\"" ];
  string password = 2 [(validate.rules).string.min_len = 6];
}

message UpdatePasswordReply {

}
