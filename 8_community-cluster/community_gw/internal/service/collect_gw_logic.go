// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"community_gw/internal/ecode"
	"context"
	"github.com/jinzhu/copier"
	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	community_gwV1 "community_gw/api/community_gw/v1"
	collectV1 "community_gw/api/creation/v1"
	"community_gw/internal/rpcclient"
)

var _ community_gwV1.CollectServiceLogicer = (*collectServiceClient)(nil)

type collectServiceClient struct {
	// define the rpc server clients here
	// example:
	collectServiceCli collectV1.CollectServiceClient
}

// NewCollectServiceClient create a client
func NewCollectServiceClient() community_gwV1.CollectServiceLogicer {
	return &collectServiceClient{
		// example:
		collectServiceCli: collectV1.NewCollectServiceClient(rpcclient.GetCreationRPCConn()),
	}
}

// Create 收藏
func (c *collectServiceClient) Create(ctx context.Context, req *community_gwV1.CreateCollectRequest) (*community_gwV1.CreateCollectReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.collectServiceCli.Create(ctx, &collectV1.CreateCollectRequest{
		UserId: req.UserId,
		PostId: req.PostId,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.CreateCollectReply{}, nil
}

// Delete 删除收藏
func (c *collectServiceClient) Delete(ctx context.Context, req *community_gwV1.DeleteCollectRequest) (*community_gwV1.DeleteCollectReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.collectServiceCli.Delete(ctx, &collectV1.DeleteCollectRequest{
		Id:     req.Id,
		PostId: req.PostId,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.DeleteCollectReply{}, nil
}

// List 获取收藏列表
func (c *collectServiceClient) List(ctx context.Context, req *community_gwV1.ListCollectRequest) (*community_gwV1.ListCollectReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.collectServiceCli.List(ctx, &collectV1.ListCollectRequest{
		UserId: req.UserId,
		Page:   req.Page,
		Limit:  req.Limit,
	})
	if err != nil {
		return nil, err
	}

	collects, err := convertCollects(reply.Collects)
	if err != nil {
		return nil, ecode.StatusListCollectService.Err()
	}

	return &community_gwV1.ListCollectReply{
		Collects: collects,
		Total:    reply.Total,
	}, nil
}

func convertCollect(collect *collectV1.CollectInfo) (*community_gwV1.CollectInfo, error) {
	collectInfo := &community_gwV1.CollectInfo{}
	err := copier.Copy(collectInfo, collect)
	return collectInfo, err
}

func convertCollects(collects []*collectV1.CollectInfo) ([]*community_gwV1.CollectInfo, error) {
	collectInfos := make([]*community_gwV1.CollectInfo, 0, len(collects))
	for _, collect := range collects {
		collectInfo, err := convertCollect(collect)
		if err != nil {
			return nil, err
		}
		collectInfos = append(collectInfos, collectInfo)
	}
	return collectInfos, nil
}
