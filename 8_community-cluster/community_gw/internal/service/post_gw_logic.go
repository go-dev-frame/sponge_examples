// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	community_gwV1 "community_gw/api/community_gw/v1"
	postV1 "community_gw/api/creation/v1"
	"community_gw/internal/ecode"
	"community_gw/internal/rpcclient"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	"github.com/jinzhu/copier"
)

var _ community_gwV1.PostServiceLogicer = (*postServiceClient)(nil)

type postServiceClient struct {
	postServiceCli postV1.PostServiceClient
}

// NewPostServiceClient create a client
func NewPostServiceClient() community_gwV1.PostServiceLogicer {
	return &postServiceClient{
		postServiceCli: postV1.NewPostServiceClient(rpcclient.GetCreationRPCConn()),
	}
}

// Create 创建帖子
func (c *postServiceClient) Create(ctx context.Context, req *community_gwV1.CreatePostRequest) (*community_gwV1.CreatePostReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.postServiceCli.Create(ctx, &postV1.CreatePostRequest{
		UserId:        req.UserId,
		Title:         req.Title,
		Text:          req.Text,
		PicKeys:       req.PicKeys,
		VideoKey:      req.VideoKey,
		VideoDuration: req.VideoDuration,
		CoverKey:      req.CoverKey,
		CoverWidth:    req.CoverWidth,
		CoverHeight:   req.CoverHeight,
		Longitude:     req.Longitude,
		Latitude:      req.Latitude,
		Position:      req.Position,
	})
	if err != nil {
		return nil, err
	}

	postInfo, err := convertPost(reply.Post)
	if err != nil {
		return nil, ecode.StatusCreatePostService.Err()
	}

	return &community_gwV1.CreatePostReply{
		Post: postInfo,
	}, nil
}

// UpdateContent 更新帖子内容
func (c *postServiceClient) UpdateContent(ctx context.Context, req *community_gwV1.UpdatePostContentRequest) (*community_gwV1.UpdatePostContentReply, error) {

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.postServiceCli.UpdateContent(ctx, &postV1.UpdatePostContentRequest{
		Id:            req.Id,
		Title:         req.Title,
		Text:          req.Text,
		PicKeys:       req.PicKeys,
		VideoKey:      req.VideoKey,
		VideoDuration: req.VideoDuration,
		CoverKey:      req.CoverKey,
		CoverWidth:    req.CoverWidth,
		CoverHeight:   req.CoverHeight,
		Longitude:     req.Longitude,
		Latitude:      req.Latitude,
		Position:      req.Position,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.UpdatePostContentReply{}, nil
}

// Delete 删除帖子
func (c *postServiceClient) Delete(ctx context.Context, req *community_gwV1.DeletePostRequest) (*community_gwV1.DeletePostReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.postServiceCli.Delete(ctx, &postV1.DeletePostRequest{
		Id:      req.Id,
		UserId:  req.UserId,
		DelFlag: req.DelFlag,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.DeletePostReply{}, nil
}

// GetByID 根据id获取帖子详情
func (c *postServiceClient) GetByID(ctx context.Context, req *community_gwV1.GetPostByIDRequest) (*community_gwV1.GetPostByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.postServiceCli.GetByID(ctx, &postV1.GetPostByIDRequest{
		Id: req.Id,
	})
	if err != nil {
		return nil, err
	}

	postInfo, err := convertPost(reply.Post)
	if err != nil {
		return nil, ecode.StatusGetByIDPostService.Err()
	}

	return &community_gwV1.GetPostByIDReply{
		Post: postInfo,
	}, nil
}

// ListByUserID 用户发布过的帖子列表
func (c *postServiceClient) ListByUserID(ctx context.Context, req *community_gwV1.ListPostByUserIDRequest) (*community_gwV1.ListPostByUserIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.postServiceCli.ListByUserID(ctx, &postV1.ListPostByUserIDRequest{
		UserId: req.UserId,
		Page:   req.Page,
		Limit:  req.Limit,
	})
	if err != nil {
		return nil, err
	}

	posts, err := convertPosts(reply.Posts)
	if err != nil {
		return nil, ecode.StatusListByUserIDPostService.Err()
	}

	return &community_gwV1.ListPostByUserIDReply{
		Posts: posts,
		Total: reply.Total,
	}, nil
}

// ListLatest 最新的帖子列表
func (c *postServiceClient) ListLatest(ctx context.Context, req *community_gwV1.ListPostLatestRequest) (*community_gwV1.ListPostLatestReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.postServiceCli.ListLatest(ctx, &postV1.ListPostLatestRequest{
		Page:  req.Page,
		Limit: req.Limit,
	})
	if err != nil {
		return nil, err
	}

	posts, err := convertPosts(reply.Posts)
	if err != nil {
		return nil, ecode.StatusListByUserIDPostService.Err()
	}

	return &community_gwV1.ListPostLatestReply{
		Posts: posts,
		Total: reply.Total,
	}, nil
}

// ListHot 热门的帖子列表
func (c *postServiceClient) ListHot(ctx context.Context, req *community_gwV1.ListPostHotRequest) (*community_gwV1.ListPostHotReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.postServiceCli.ListHot(ctx, &postV1.ListPostHotRequest{
		Page:  req.Page,
		Limit: req.Limit,
	})
	if err != nil {
		return nil, err
	}

	posts, err := convertPosts(reply.Posts)
	if err != nil {
		return nil, ecode.StatusListHotPostService.Err()
	}

	return &community_gwV1.ListPostHotReply{
		Posts: posts,
		Total: reply.Total,
	}, nil
}

// IncrViewCount 观看数量+1
func (c *postServiceClient) IncrViewCount(ctx context.Context, req *community_gwV1.IncrPostViewCountRequest) (*community_gwV1.IncrPostViewCountReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.postServiceCli.IncrViewCount(ctx, &postV1.IncrPostViewCountRequest{
		Id:     req.Id,
		UserId: req.UserId,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.IncrPostViewCountReply{}, nil
}

// IncrShareCount 分享数量+1
func (c *postServiceClient) IncrShareCount(ctx context.Context, req *community_gwV1.IncrPostShareCountRequest) (*community_gwV1.IncrPostShareCountReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.postServiceCli.IncrShareCount(ctx, &postV1.IncrPostShareCountRequest{
		Id:     req.Id,
		UserId: req.UserId,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.IncrPostShareCountReply{}, nil
}

func convertPost(post *postV1.PostInfo) (*community_gwV1.PostInfo, error) {
	postInfo := &community_gwV1.PostInfo{}
	err := copier.Copy(postInfo, post)
	return postInfo, err
}

func convertPosts(posts []*postV1.PostInfo) ([]*community_gwV1.PostInfo, error) {
	postInfos := make([]*community_gwV1.PostInfo, 0, len(posts))
	for _, post := range posts {
		postInfo, err := convertPost(post)
		if err != nil {
			return nil, err
		}
		postInfos = append(postInfos, postInfo)
	}
	return postInfos, nil
}
