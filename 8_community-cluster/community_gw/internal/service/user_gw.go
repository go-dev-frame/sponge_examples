// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	community_gwV1 "community_gw/api/community_gw/v1"
	userV1 "community_gw/api/user/v1"
	"community_gw/internal/ecode"
	"community_gw/internal/rpcclient"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	"github.com/jinzhu/copier"
)

var _ community_gwV1.UserServiceLogicer = (*userServiceClient)(nil)

type userServiceClient struct {
	userServiceCli userV1.UserServiceClient
}

// NewUserServiceClient create a client
func NewUserServiceClient() community_gwV1.UserServiceLogicer {
	return &userServiceClient{
		userServiceCli: userV1.NewUserServiceClient(rpcclient.GetUserRPCConn()),
	}
}

// SendEmailVerifyCode 发送邮件验证码
func (c *userServiceClient) SendEmailVerifyCode(ctx context.Context, req *community_gwV1.SendEmailVerifyCodeRequest) (*community_gwV1.SendEmailVerifyCodeReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.userServiceCli.SendEmailVerifyCode(ctx, &userV1.SendEmailVerifyCodeRequest{
		Email: req.Email,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.SendEmailVerifyCodeReply{}, nil
}

// Register 注册
func (c *userServiceClient) Register(ctx context.Context, req *community_gwV1.RegisterRequest) (*community_gwV1.RegisterReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.userServiceCli.Register(ctx, &userV1.RegisterRequest{
		Email:     req.Email,
		EmailCode: req.EmailCode,
		Password:  req.Password,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.RegisterReply{
		Id: reply.Id,
	}, nil
}

// Login 登录
func (c *userServiceClient) Login(ctx context.Context, req *community_gwV1.LoginRequest) (*community_gwV1.LoginReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.userServiceCli.Login(ctx, &userV1.LoginRequest{
		Email:    req.Email,
		Password: req.Password,
		Ip:       req.Ip,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.LoginReply{
		Id:    reply.Id,
		Token: reply.Token,
	}, nil
}

// Logout 登出
func (c *userServiceClient) Logout(ctx context.Context, req *community_gwV1.LogoutRequest) (*community_gwV1.LogoutReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.userServiceCli.Logout(ctx, &userV1.LogoutRequest{
		Id:    req.Id,
		Token: req.Token,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.LogoutReply{}, nil
}

// UpdateByID 更新用户
func (c *userServiceClient) UpdateByID(ctx context.Context, req *community_gwV1.UpdateUserByIDRequest) (*community_gwV1.UpdateUserByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.userServiceCli.UpdateByID(ctx, &userV1.UpdateUserByIDRequest{
		Id:       req.Id,
		Name:     req.Name,
		NickName: req.NickName,
		Phone:    req.Phone,
		Avatar:   req.Avatar,
		Gender:   req.Gender,
		Age:      req.Age,
		Birthday: req.Birthday,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.UpdateUserByIDReply{}, nil
}

// GetByID 用户详情
func (c *userServiceClient) GetByID(ctx context.Context, req *community_gwV1.GetUserByIDRequest) (*community_gwV1.GetUserByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.userServiceCli.GetByID(ctx, &userV1.GetUserByIDRequest{
		Id: req.Id,
	})
	if err != nil {
		return nil, err
	}

	userInfo := &community_gwV1.User{}
	err = copier.Copy(userInfo, reply.UserInfo)
	if err != nil {
		return nil, err
	}

	return &community_gwV1.GetUserByIDReply{
		UserInfo: userInfo,
	}, nil
}

// UpdatePassword 更新密码
func (c *userServiceClient) UpdatePassword(ctx context.Context, req *community_gwV1.UpdatePasswordRequest) (*community_gwV1.UpdatePasswordReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.userServiceCli.UpdatePassword(ctx, &userV1.UpdatePasswordRequest{
		Id:       req.Id,
		Password: req.Password,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.UpdatePasswordReply{}, nil
}

// CheckLogin 判断用户是否登录
func (c *userServiceClient) CheckLogin(ctx context.Context, req *community_gwV1.CheckLoginRequest) (*community_gwV1.CheckLoginReply, error) {
	return nil, nil
}

// CheckLogin 判断用户是否登录
func CheckLogin(ctx context.Context, id uint64) (string, error) {
	reply, err := userV1.NewUserServiceClient(rpcclient.GetUserRPCConn()).CheckLogin(ctx, &userV1.CheckLoginRequest{
		Id: id,
	})
	if err != nil {
		logger.Warn("get token error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return "", err
	}

	if !reply.IsLogin {
		return "", ecode.StatusUnauthorized.Err()
	}

	return reply.TokenTails, nil
}
