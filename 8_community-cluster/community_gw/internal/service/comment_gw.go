// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	community_gwV1 "community_gw/api/community_gw/v1"
	commentV1 "community_gw/api/creation/v1"
	"community_gw/internal/ecode"
	"community_gw/internal/rpcclient"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	"github.com/jinzhu/copier"
)

var _ community_gwV1.CommentServiceLogicer = (*commentServiceClient)(nil)

type commentServiceClient struct {
	commentServiceCli commentV1.CommentServiceClient
}

// NewCommentServiceClient create a client
func NewCommentServiceClient() community_gwV1.CommentServiceLogicer {
	return &commentServiceClient{
		commentServiceCli: commentV1.NewCommentServiceClient(rpcclient.GetCreationRPCConn()),
	}
}

// Create 创建评论
func (c *commentServiceClient) Create(ctx context.Context, req *community_gwV1.CreateCommentRequest) (*community_gwV1.CreateCommentReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.commentServiceCli.Create(ctx, &commentV1.CreateCommentRequest{
		PostId:     req.PostId,
		UserId:     req.UserId,
		Content:    req.Content,
		DeviceType: req.DeviceType,
		Ip:         req.Ip,
	})
	if err != nil {
		return nil, err
	}

	comment, err := convertComment(reply.Comment)
	if err != nil {
		return nil, ecode.StatusCreateCommentService.Err()
	}

	return &community_gwV1.CreateCommentReply{
		Comment: comment,
	}, nil
}

// DeleteByID 删除评论
func (c *commentServiceClient) DeleteByID(ctx context.Context, req *community_gwV1.DeleteCommentByIDRequest) (*community_gwV1.DeleteCommentByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.commentServiceCli.DeleteByID(ctx, &commentV1.DeleteCommentByIDRequest{
		Id:      req.Id,
		UserId:  req.UserId,
		DelFlag: req.DelFlag,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.DeleteCommentByIDReply{}, nil
}

// UpdateByID 更新评论
func (c *commentServiceClient) UpdateByID(ctx context.Context, req *community_gwV1.UpdateCommentByIDRequest) (*community_gwV1.UpdateCommentByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.commentServiceCli.UpdateByID(ctx, &commentV1.UpdateCommentByIDRequest{
		Id:      req.Id,
		Content: req.Content,
	})
	if err != nil {
		return nil, err
	}

	return &community_gwV1.UpdateCommentByIDReply{}, nil
}

// Reply 回复评论
func (c *commentServiceClient) Reply(ctx context.Context, req *community_gwV1.ReplyCommentRequest) (*community_gwV1.ReplyCommentReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.commentServiceCli.Reply(ctx, &commentV1.ReplyCommentRequest{
		CommentId:  req.CommentId,
		UserId:     req.UserId,
		Content:    req.Content,
		DeviceType: req.DeviceType,
		Ip:         req.Ip,
	})
	if err != nil {
		return nil, err
	}

	comment, err := convertComment(reply.Comment)
	if err != nil {
		return nil, ecode.StatusReplyCommentService.Err()
	}

	return &community_gwV1.ReplyCommentReply{
		Comment: comment,
	}, nil
}

// GetByID 根据id获取评论
func (c *commentServiceClient) GetByID(ctx context.Context, req *community_gwV1.GetCommentByIDRequest) (*community_gwV1.GetCommentByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.commentServiceCli.GetByID(ctx, &commentV1.GetCommentByIDRequest{
		Id: req.Id,
	})
	if err != nil {
		return nil, err
	}

	comment, err := convertComment(reply.Comment)
	if err != nil {
		return nil, ecode.StatusGetByIDCommentService.Err()
	}

	return &community_gwV1.GetCommentByIDReply{
		Comment: comment,
	}, nil
}

// ListLatest 最新评论列表
func (c *commentServiceClient) ListLatest(ctx context.Context, req *community_gwV1.ListCommentLatestRequest) (*community_gwV1.ListCommentLatestReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.commentServiceCli.ListLatest(ctx, &commentV1.ListCommentLatestRequest{
		PostId: req.PostId,
		Page:   req.Page,
		Limit:  req.Limit,
	})
	if err != nil {
		return nil, err
	}

	comments, err := convertComments(reply.Comments)
	if err != nil {
		return nil, ecode.StatusListLatestCommentService.Err()
	}

	return &community_gwV1.ListCommentLatestReply{
		Comments: comments,
		Total:    reply.Total,
	}, nil
}

// ListHot 热门评论列表
func (c *commentServiceClient) ListHot(ctx context.Context, req *community_gwV1.ListCommentHotRequest) (*community_gwV1.ListCommentHotReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.commentServiceCli.ListHot(ctx, &commentV1.ListCommentHotRequest{
		PostId: req.PostId,
		Page:   req.Page,
		Limit:  req.Limit,
	})
	if err != nil {
		return nil, err
	}

	comments, err := convertComments(reply.Comments)
	if err != nil {
		return nil, ecode.StatusListHotCommentService.Err()
	}

	return &community_gwV1.ListCommentHotReply{
		Comments: comments,
		Total:    reply.Total,
	}, nil
}

// ListReply 评论回复列表
func (c *commentServiceClient) ListReply(ctx context.Context, req *community_gwV1.ListCommentReplyRequest) (*community_gwV1.ListCommentReplyReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.commentServiceCli.ListReply(ctx, &commentV1.ListCommentReplyRequest{
		CommentId: req.CommentId,
		Page:      req.Page,
		Limit:     req.Limit,
	})
	if err != nil {
		return nil, err
	}

	comments, err := convertComments(reply.Comments)
	if err != nil {
		return nil, ecode.StatusListReplyCommentService.Err()
	}

	return &community_gwV1.ListCommentReplyReply{
		Comments: comments,
		Total:    reply.Total,
	}, nil
}

func convertComment(comment *commentV1.CommentInfo) (*community_gwV1.CommentInfo, error) {
	commentInfo := &community_gwV1.CommentInfo{}
	err := copier.Copy(commentInfo, comment)
	return commentInfo, err
}

func convertComments(comments []*commentV1.CommentInfo) ([]*community_gwV1.CommentInfo, error) {
	commentInfos := make([]*community_gwV1.CommentInfo, 0, len(comments))
	for _, comment := range comments {
		commentInfo, err := convertComment(comment)
		if err != nil {
			return nil, err
		}
		commentInfos = append(commentInfos, commentInfo)
	}
	return commentInfos, nil
}
