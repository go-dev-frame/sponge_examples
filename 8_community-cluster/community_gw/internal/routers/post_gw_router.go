// Code generated by https://github.com/zhufuyi/sponge

package routers

import (
	"context"

	community_gwV1 "community_gw/api/community_gw/v1"
	"community_gw/internal/service"

	"github.com/zhufuyi/sponge/pkg/gin/middleware"
	"github.com/zhufuyi/sponge/pkg/logger"

	"github.com/gin-gonic/gin"
	"google.golang.org/grpc/metadata"
)

func init() {
	allMiddlewareFns = append(allMiddlewareFns, func(c *middlewareConfig) {
		postServiceMiddlewares(c)
	})

	allRouteFns = append(allRouteFns,
		func(r *gin.Engine, groupPathMiddlewares map[string][]gin.HandlerFunc, singlePathMiddlewares map[string][]gin.HandlerFunc) {
			postServiceRouter(r, groupPathMiddlewares, singlePathMiddlewares, service.NewPostServiceClient())
		})
}

func postServiceRouter(
	r *gin.Engine,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iService community_gwV1.PostServiceLogicer) {
	ctxFn := func(c *gin.Context) context.Context {
		md := metadata.New(map[string]string{
			// set metadata to be passed from http to rpc
			middleware.ContextRequestIDKey: middleware.GCtxRequestID(c), // request_id
			//middleware.HeaderAuthorizationKey: c.GetHeader(middleware.HeaderAuthorizationKey),  // authorization
		})
		return metadata.NewOutgoingContext(c.Request.Context(), md)
	}

	community_gwV1.RegisterPostServiceRouter(
		r,
		groupPathMiddlewares,
		singlePathMiddlewares,
		iService,
		community_gwV1.WithPostServiceRPCResponse(),
		community_gwV1.WithPostServiceLogger(logger.Get()),
		community_gwV1.WithPostServiceRPCStatusToHTTPCode(
		// Set some error codes to standard http return codes,
		// by default there is already ecode.StatusInternalServerError and ecode.StatusServiceUnavailable
		// example:
		// 	ecode.StatusUnimplemented, ecode.StatusAborted,
		),
		community_gwV1.WithPostServiceWrapCtx(ctxFn),
	)
}

// you can set the middleware of a route group, or set the middleware of a single route,
// or you can mix them, pay attention to the duplication of middleware when mixing them,
// it is recommended to set the middleware of a single route in preference
func postServiceMiddlewares(c *middlewareConfig) {
	// set up group route middleware, group path is left prefix rules,
	// if the left prefix is hit, the middleware will take effect, e.g. group route is /api/v1, route /api/v1/postService/:id  will take effect
	c.setGroupPath("/api/v1/post", middleware.Auth(middleware.WithVerify(verify)))

	// set up single route middleware, just uncomment the code and fill in the middlewares, nothing else needs to be changed
	//c.setSinglePath("POST", "/api/v1/post", middleware.Auth())
	//c.setSinglePath("PUT", "/api/v1/post/update", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/post/delete", middleware.Auth())
	//c.setSinglePath("GET", "/api/v1/post/:id", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/post/user/list", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/post/latest/list", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/post/hot/list", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/post/view", middleware.Auth())
	//c.setSinglePath("POST", "/api/v1/post/share", middleware.Auth())
}
