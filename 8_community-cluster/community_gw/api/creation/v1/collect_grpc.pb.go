// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/creation/v1/collect.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CollectServiceClient is the client API for CollectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollectServiceClient interface {
	// 收藏
	Create(ctx context.Context, in *CreateCollectRequest, opts ...grpc.CallOption) (*CreateCollectReply, error)
	// 删除收藏
	Delete(ctx context.Context, in *DeleteCollectRequest, opts ...grpc.CallOption) (*DeleteCollectReply, error)
	// 获取收藏列表
	List(ctx context.Context, in *ListCollectRequest, opts ...grpc.CallOption) (*ListCollectReply, error)
}

type collectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollectServiceClient(cc grpc.ClientConnInterface) CollectServiceClient {
	return &collectServiceClient{cc}
}

func (c *collectServiceClient) Create(ctx context.Context, in *CreateCollectRequest, opts ...grpc.CallOption) (*CreateCollectReply, error) {
	out := new(CreateCollectReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.CollectService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) Delete(ctx context.Context, in *DeleteCollectRequest, opts ...grpc.CallOption) (*DeleteCollectReply, error) {
	out := new(DeleteCollectReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.CollectService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectServiceClient) List(ctx context.Context, in *ListCollectRequest, opts ...grpc.CallOption) (*ListCollectReply, error) {
	out := new(ListCollectReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.CollectService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CollectServiceServer is the server API for CollectService service.
// All implementations must embed UnimplementedCollectServiceServer
// for forward compatibility
type CollectServiceServer interface {
	// 收藏
	Create(context.Context, *CreateCollectRequest) (*CreateCollectReply, error)
	// 删除收藏
	Delete(context.Context, *DeleteCollectRequest) (*DeleteCollectReply, error)
	// 获取收藏列表
	List(context.Context, *ListCollectRequest) (*ListCollectReply, error)
	mustEmbedUnimplementedCollectServiceServer()
}

// UnimplementedCollectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCollectServiceServer struct {
}

func (UnimplementedCollectServiceServer) Create(context.Context, *CreateCollectRequest) (*CreateCollectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCollectServiceServer) Delete(context.Context, *DeleteCollectRequest) (*DeleteCollectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCollectServiceServer) List(context.Context, *ListCollectRequest) (*ListCollectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCollectServiceServer) mustEmbedUnimplementedCollectServiceServer() {}

// UnsafeCollectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollectServiceServer will
// result in compilation errors.
type UnsafeCollectServiceServer interface {
	mustEmbedUnimplementedCollectServiceServer()
}

func RegisterCollectServiceServer(s grpc.ServiceRegistrar, srv CollectServiceServer) {
	s.RegisterService(&CollectService_ServiceDesc, srv)
}

func _CollectService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.CollectService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).Create(ctx, req.(*CreateCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.CollectService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).Delete(ctx, req.(*DeleteCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CollectService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCollectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.CollectService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectServiceServer).List(ctx, req.(*ListCollectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CollectService_ServiceDesc is the grpc.ServiceDesc for CollectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.creation.v1.CollectService",
	HandlerType: (*CollectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CollectService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CollectService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CollectService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/creation/v1/collect.proto",
}
