syntax = "proto3";

package api.community_gw.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
 import "tagger/tagger.proto";
import "validate/validate.proto";

option go_package = "community_gw/api/community_gw/v1;v1";

// Default settings for generating swagger documents
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	host: "localhost:8080"
	base_path: ""
	info: {
		title: "user api docs";
		version: "2.0";
	}
	schemes: HTTP;
	schemes: HTTPS;
	consumes: "application/json";
	produces: "application/json";
	security_definitions: {
		security: {
			key: "BearerAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
				description: "Input a \"Bearer your-jwt-token\" to Value";
			}
		}
	}
};

// 好友关系服务
service RelationService {
	// 关注
	rpc Follow (FollowRequest) returns (FollowReply) {
		option (google.api.http) = {
			post: "/api/v1/relation/follow"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "关注",
			description: "关注",
			security: {
				security_requirement: {
					key: "BearerAuth";
					value: {}
				}
			}
		};
	}
	// 取消关注
	rpc Unfollow (UnfollowRequest) returns (UnfollowReply) {
		option (google.api.http) = {
			post: "/api/v1/relation/unfollow"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "取消关注",
			description: "取消关注",
			security: {
				security_requirement: {
					key: "BearerAuth";
					value: {}
				}
			}
		};
	}
	// 关注列表
	rpc ListFollowing (ListFollowingRequest) returns (ListFollowingReply) {
		option (google.api.http) = {
			get: "/api/v1/relation/following/list"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "关注列表",
			description: "关注列表",
			security: {
				security_requirement: {
					key: "BearerAuth";
					value: {}
				}
			}
		};
	}
	// 粉丝列表
	rpc ListFollower (ListFollowerRequest) returns (ListFollowerReply) {
		option (google.api.http) = {
			get: "/api/v1/relation/follower/list"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "粉丝列表",
			description: "粉丝列表",
			security: {
				security_requirement: {
					key: "BearerAuth";
					value: {}
				}
			}
		};
	}
	// 批量获取关注关系，a和b,c,d的关注状态
	rpc BatchGetRelation (BatchGetRelationRequest) returns (BatchGetRelationReply) {
		option (google.api.http) = {
			post: "/api/v1/relation/check/list"
			body: "*"
		};
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			summary: "批量获取关注关系",
			description: "批量获取关注关系",
			security: {
				security_requirement: {
					key: "BearerAuth";
					value: {}
				}
			}
		};
	}
}

message FollowRequest {
	uint64 userId = 1 [(validate.rules).uint64.gte  = 1];
	uint64 followedUid = 2 [(validate.rules).uint64.gte  = 1];
}

message FollowReply {}

message UnfollowRequest {
	uint64 userId = 1 [(validate.rules).uint64.gte  = 1];
	uint64 followedUid = 2 [(validate.rules).uint64.gte  = 1];
}

message UnfollowReply {}

message ListFollowingRequest {
	uint64 userId = 1 [(validate.rules).uint64.gte  = 1, (tagger.tags) = "form:\"userId\""];
	int32 page = 2 [(validate.rules).int32.gte  = 0, (tagger.tags) = "form:\"page\""];
	int32 limit = 3 [(validate.rules).int32.gte  = 1, (tagger.tags) = "form:\"limit\""];
}

message ListFollowingReply {
	repeated uint64 followedUids = 1;
	int64 total = 2;
}

message ListFollowerRequest {
	uint64 userId = 1 [(validate.rules).uint64.gte  = 1, (tagger.tags) = "form:\"userId\""];
	int32 page = 2 [(validate.rules).int32.gte  = 0, (tagger.tags) = "form:\"page\""];
	int32 limit = 3 [(validate.rules).int32.gte  = 1, (tagger.tags) = "form:\"limit\""];
}

message ListFollowerReply {
	repeated uint64 followerUids = 1;
	int64 total = 2;
}

message BatchGetRelationRequest {
	uint64 userId = 1 [(validate.rules).uint64.gte  = 1];
	repeated uint64 uids = 2 [(validate.rules).repeated.min_items = 1];
}

message BatchGetRelationReply {
	map<uint64, int32> result = 1;
}
