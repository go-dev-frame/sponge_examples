// Code generated by https://github.com/zhufuyi/sponge, DO NOT EDIT.

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	errcode "github.com/zhufuyi/sponge/pkg/errcode"
	middleware "github.com/zhufuyi/sponge/pkg/gin/middleware"
	zap "go.uber.org/zap"
	strings "strings"
)

// import packages: strings. context. errcode. middleware. zap. gin.

type PostServiceLogicer interface {
	Create(ctx context.Context, req *CreatePostRequest) (*CreatePostReply, error)
	Delete(ctx context.Context, req *DeletePostRequest) (*DeletePostReply, error)
	GetByID(ctx context.Context, req *GetPostByIDRequest) (*GetPostByIDReply, error)
	IncrShareCount(ctx context.Context, req *IncrPostShareCountRequest) (*IncrPostShareCountReply, error)
	IncrViewCount(ctx context.Context, req *IncrPostViewCountRequest) (*IncrPostViewCountReply, error)
	ListByUserID(ctx context.Context, req *ListPostByUserIDRequest) (*ListPostByUserIDReply, error)
	ListHot(ctx context.Context, req *ListPostHotRequest) (*ListPostHotReply, error)
	ListLatest(ctx context.Context, req *ListPostLatestRequest) (*ListPostLatestReply, error)
	UpdateContent(ctx context.Context, req *UpdatePostContentRequest) (*UpdatePostContentReply, error)
}

type PostServiceOption func(*postServiceOptions)

type postServiceOptions struct {
	isFromRPC  bool
	responser  errcode.Responser
	zapLog     *zap.Logger
	httpErrors []*errcode.Error
	rpcStatus  []*errcode.RPCStatus
	wrapCtxFn  func(c *gin.Context) context.Context
}

func (o *postServiceOptions) apply(opts ...PostServiceOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func WithPostServiceHTTPResponse() PostServiceOption {
	return func(o *postServiceOptions) {
		o.isFromRPC = false
	}
}

func WithPostServiceRPCResponse() PostServiceOption {
	return func(o *postServiceOptions) {
		o.isFromRPC = true
	}
}

func WithPostServiceResponser(responser errcode.Responser) PostServiceOption {
	return func(o *postServiceOptions) {
		o.responser = responser
	}
}

func WithPostServiceLogger(zapLog *zap.Logger) PostServiceOption {
	return func(o *postServiceOptions) {
		o.zapLog = zapLog
	}
}

func WithPostServiceErrorToHTTPCode(e ...*errcode.Error) PostServiceOption {
	return func(o *postServiceOptions) {
		o.httpErrors = e
	}
}

func WithPostServiceRPCStatusToHTTPCode(s ...*errcode.RPCStatus) PostServiceOption {
	return func(o *postServiceOptions) {
		o.rpcStatus = s
	}
}

func WithPostServiceWrapCtx(wrapCtxFn func(c *gin.Context) context.Context) PostServiceOption {
	return func(o *postServiceOptions) {
		o.wrapCtxFn = wrapCtxFn
	}
}

func RegisterPostServiceRouter(
	iRouter gin.IRouter,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iLogic PostServiceLogicer,
	opts ...PostServiceOption) {

	o := &postServiceOptions{}
	o.apply(opts...)

	if o.responser == nil {
		o.responser = errcode.NewResponser(o.isFromRPC, o.httpErrors, o.rpcStatus)
	}
	if o.zapLog == nil {
		o.zapLog, _ = zap.NewProduction()
	}

	r := &postServiceRouter{
		iRouter:               iRouter,
		groupPathMiddlewares:  groupPathMiddlewares,
		singlePathMiddlewares: singlePathMiddlewares,
		iLogic:                iLogic,
		iResponse:             o.responser,
		zapLog:                o.zapLog,
		wrapCtxFn:             o.wrapCtxFn,
	}
	r.register()
}

type postServiceRouter struct {
	iRouter               gin.IRouter
	groupPathMiddlewares  map[string][]gin.HandlerFunc
	singlePathMiddlewares map[string][]gin.HandlerFunc
	iLogic                PostServiceLogicer
	iResponse             errcode.Responser
	zapLog                *zap.Logger
	wrapCtxFn             func(c *gin.Context) context.Context
}

func (r *postServiceRouter) register() {
	r.iRouter.Handle("POST", "/api/v1/post", r.withMiddleware("POST", "/api/v1/post", r.Create_6)...)
	r.iRouter.Handle("PUT", "/api/v1/post/update", r.withMiddleware("PUT", "/api/v1/post/update", r.UpdateContent_0)...)
	r.iRouter.Handle("POST", "/api/v1/post/delete", r.withMiddleware("POST", "/api/v1/post/delete", r.Delete_4)...)
	r.iRouter.Handle("GET", "/api/v1/post/:id", r.withMiddleware("GET", "/api/v1/post/:id", r.GetByID_2)...)
	r.iRouter.Handle("POST", "/api/v1/post/user/list", r.withMiddleware("POST", "/api/v1/post/user/list", r.ListByUserID_0)...)
	r.iRouter.Handle("POST", "/api/v1/post/latest/list", r.withMiddleware("POST", "/api/v1/post/latest/list", r.ListLatest_2)...)
	r.iRouter.Handle("POST", "/api/v1/post/hot/list", r.withMiddleware("POST", "/api/v1/post/hot/list", r.ListHot_2)...)
	r.iRouter.Handle("POST", "/api/v1/post/view", r.withMiddleware("POST", "/api/v1/post/view", r.IncrViewCount_0)...)
	r.iRouter.Handle("POST", "/api/v1/post/share", r.withMiddleware("POST", "/api/v1/post/share", r.IncrShareCount_0)...)

}

func (r *postServiceRouter) withMiddleware(method string, path string, fn gin.HandlerFunc) []gin.HandlerFunc {
	handlerFns := []gin.HandlerFunc{}

	// determine if a route group is hit or miss, left prefix rule
	for groupPath, fns := range r.groupPathMiddlewares {
		if groupPath == "" || groupPath == "/" {
			handlerFns = append(handlerFns, fns...)
			continue
		}
		size := len(groupPath)
		if len(path) < size {
			continue
		}
		if groupPath == path[:size] {
			handlerFns = append(handlerFns, fns...)
		}
	}

	// determine if a single route has been hit
	key := strings.ToUpper(method) + "->" + path
	if fns, ok := r.singlePathMiddlewares[key]; ok {
		handlerFns = append(handlerFns, fns...)
	}

	return append(handlerFns, fn)
}

func (r *postServiceRouter) Create_6(c *gin.Context) {
	req := &CreatePostRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.Create(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *postServiceRouter) UpdateContent_0(c *gin.Context) {
	req := &UpdatePostContentRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.UpdateContent(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *postServiceRouter) Delete_4(c *gin.Context) {
	req := &DeletePostRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.Delete(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *postServiceRouter) GetByID_2(c *gin.Context) {
	req := &GetPostByIDRequest{}
	var err error

	if err = c.ShouldBindUri(req); err != nil {
		r.zapLog.Warn("ShouldBindUri error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.GetByID(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *postServiceRouter) ListByUserID_0(c *gin.Context) {
	req := &ListPostByUserIDRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.ListByUserID(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *postServiceRouter) ListLatest_2(c *gin.Context) {
	req := &ListPostLatestRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.ListLatest(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *postServiceRouter) ListHot_2(c *gin.Context) {
	req := &ListPostHotRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.ListHot(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *postServiceRouter) IncrViewCount_0(c *gin.Context) {
	req := &IncrPostViewCountRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.IncrViewCount(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *postServiceRouter) IncrShareCount_0(c *gin.Context) {
	req := &IncrPostShareCountRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = c
	}

	out, err := r.iLogic.IncrShareCount(ctx, req)
	if err != nil {
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}
