// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/community_gw/v1/comment_gw.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	// 创建评论
	Create(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentReply, error)
	// 删除评论
	DeleteByID(ctx context.Context, in *DeleteCommentByIDRequest, opts ...grpc.CallOption) (*DeleteCommentByIDReply, error)
	// 更新评论
	UpdateByID(ctx context.Context, in *UpdateCommentByIDRequest, opts ...grpc.CallOption) (*UpdateCommentByIDReply, error)
	// 回复评论
	Reply(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentReply, error)
	// 根据id获取评论
	GetByID(ctx context.Context, in *GetCommentByIDRequest, opts ...grpc.CallOption) (*GetCommentByIDReply, error)
	// 最新评论列表
	ListLatest(ctx context.Context, in *ListCommentLatestRequest, opts ...grpc.CallOption) (*ListCommentLatestReply, error)
	// 热门评论列表
	ListHot(ctx context.Context, in *ListCommentHotRequest, opts ...grpc.CallOption) (*ListCommentHotReply, error)
	// 评论回复列表
	ListReply(ctx context.Context, in *ListCommentReplyRequest, opts ...grpc.CallOption) (*ListCommentReplyReply, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) Create(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentReply, error) {
	out := new(CreateCommentReply)
	err := c.cc.Invoke(ctx, "/api.community_gw.v1.CommentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteByID(ctx context.Context, in *DeleteCommentByIDRequest, opts ...grpc.CallOption) (*DeleteCommentByIDReply, error) {
	out := new(DeleteCommentByIDReply)
	err := c.cc.Invoke(ctx, "/api.community_gw.v1.CommentService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateByID(ctx context.Context, in *UpdateCommentByIDRequest, opts ...grpc.CallOption) (*UpdateCommentByIDReply, error) {
	out := new(UpdateCommentByIDReply)
	err := c.cc.Invoke(ctx, "/api.community_gw.v1.CommentService/UpdateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Reply(ctx context.Context, in *ReplyCommentRequest, opts ...grpc.CallOption) (*ReplyCommentReply, error) {
	out := new(ReplyCommentReply)
	err := c.cc.Invoke(ctx, "/api.community_gw.v1.CommentService/Reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetByID(ctx context.Context, in *GetCommentByIDRequest, opts ...grpc.CallOption) (*GetCommentByIDReply, error) {
	out := new(GetCommentByIDReply)
	err := c.cc.Invoke(ctx, "/api.community_gw.v1.CommentService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListLatest(ctx context.Context, in *ListCommentLatestRequest, opts ...grpc.CallOption) (*ListCommentLatestReply, error) {
	out := new(ListCommentLatestReply)
	err := c.cc.Invoke(ctx, "/api.community_gw.v1.CommentService/ListLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListHot(ctx context.Context, in *ListCommentHotRequest, opts ...grpc.CallOption) (*ListCommentHotReply, error) {
	out := new(ListCommentHotReply)
	err := c.cc.Invoke(ctx, "/api.community_gw.v1.CommentService/ListHot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListReply(ctx context.Context, in *ListCommentReplyRequest, opts ...grpc.CallOption) (*ListCommentReplyReply, error) {
	out := new(ListCommentReplyReply)
	err := c.cc.Invoke(ctx, "/api.community_gw.v1.CommentService/ListReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	// 创建评论
	Create(context.Context, *CreateCommentRequest) (*CreateCommentReply, error)
	// 删除评论
	DeleteByID(context.Context, *DeleteCommentByIDRequest) (*DeleteCommentByIDReply, error)
	// 更新评论
	UpdateByID(context.Context, *UpdateCommentByIDRequest) (*UpdateCommentByIDReply, error)
	// 回复评论
	Reply(context.Context, *ReplyCommentRequest) (*ReplyCommentReply, error)
	// 根据id获取评论
	GetByID(context.Context, *GetCommentByIDRequest) (*GetCommentByIDReply, error)
	// 最新评论列表
	ListLatest(context.Context, *ListCommentLatestRequest) (*ListCommentLatestReply, error)
	// 热门评论列表
	ListHot(context.Context, *ListCommentHotRequest) (*ListCommentHotReply, error)
	// 评论回复列表
	ListReply(context.Context, *ListCommentReplyRequest) (*ListCommentReplyReply, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) Create(context.Context, *CreateCommentRequest) (*CreateCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCommentServiceServer) DeleteByID(context.Context, *DeleteCommentByIDRequest) (*DeleteCommentByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedCommentServiceServer) UpdateByID(context.Context, *UpdateCommentByIDRequest) (*UpdateCommentByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedCommentServiceServer) Reply(context.Context, *ReplyCommentRequest) (*ReplyCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedCommentServiceServer) GetByID(context.Context, *GetCommentByIDRequest) (*GetCommentByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedCommentServiceServer) ListLatest(context.Context, *ListCommentLatestRequest) (*ListCommentLatestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatest not implemented")
}
func (UnimplementedCommentServiceServer) ListHot(context.Context, *ListCommentHotRequest) (*ListCommentHotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHot not implemented")
}
func (UnimplementedCommentServiceServer) ListReply(context.Context, *ListCommentReplyRequest) (*ListCommentReplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReply not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.community_gw.v1.CommentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Create(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.community_gw.v1.CommentService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteByID(ctx, req.(*DeleteCommentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.community_gw.v1.CommentService/UpdateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateByID(ctx, req.(*UpdateCommentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.community_gw.v1.CommentService/Reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Reply(ctx, req.(*ReplyCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.community_gw.v1.CommentService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetByID(ctx, req.(*GetCommentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.community_gw.v1.CommentService/ListLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListLatest(ctx, req.(*ListCommentLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentHotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.community_gw.v1.CommentService/ListHot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListHot(ctx, req.(*ListCommentHotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.community_gw.v1.CommentService/ListReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListReply(ctx, req.(*ListCommentReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.community_gw.v1.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CommentService_Create_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _CommentService_DeleteByID_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _CommentService_UpdateByID_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _CommentService_Reply_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _CommentService_GetByID_Handler,
		},
		{
			MethodName: "ListLatest",
			Handler:    _CommentService_ListLatest_Handler,
		},
		{
			MethodName: "ListHot",
			Handler:    _CommentService_ListHot_Handler,
		},
		{
			MethodName: "ListReply",
			Handler:    _CommentService_ListReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/community_gw/v1/comment_gw.proto",
}
