// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/community_gw/v1/post_gw.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PostInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostInfoMultiError, or nil
// if none found.
func (m *PostInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PostInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PostType

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for ViewCount

	// no validation rules for LikeCount

	// no validation rules for CommentCount

	// no validation rules for CollectCount

	// no validation rules for ShareCount

	// no validation rules for DelFlag

	// no validation rules for Visible

	// no validation rules for Longitude

	// no validation rules for Latitude

	// no validation rules for Position

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return PostInfoMultiError(errors)
	}

	return nil
}

// PostInfoMultiError is an error wrapping multiple validation errors returned
// by PostInfo.ValidateAll() if the designated constraints aren't met.
type PostInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostInfoMultiError) AllErrors() []error { return m }

// PostInfoValidationError is the validation error returned by
// PostInfo.Validate if the designated constraints aren't met.
type PostInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostInfoValidationError) ErrorName() string { return "PostInfoValidationError" }

// Error satisfies the builtin error interface
func (e PostInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostInfoValidationError{}

// Validate checks the field values on CreatePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostRequestMultiError, or nil if none found.
func (m *CreatePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 1 {
		err := CreatePostRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := CreatePostRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Text

	// no validation rules for PicKeys

	// no validation rules for VideoKey

	// no validation rules for VideoDuration

	// no validation rules for CoverKey

	// no validation rules for CoverWidth

	// no validation rules for CoverHeight

	// no validation rules for Longitude

	// no validation rules for Latitude

	// no validation rules for Position

	if len(errors) > 0 {
		return CreatePostRequestMultiError(errors)
	}

	return nil
}

// CreatePostRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePostRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostRequestMultiError) AllErrors() []error { return m }

// CreatePostRequestValidationError is the validation error returned by
// CreatePostRequest.Validate if the designated constraints aren't met.
type CreatePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostRequestValidationError) ErrorName() string {
	return "CreatePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostRequestValidationError{}

// Validate checks the field values on CreatePostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePostReplyMultiError, or nil if none found.
func (m *CreatePostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePostReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePostReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePostReplyValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePostReplyMultiError(errors)
	}

	return nil
}

// CreatePostReplyMultiError is an error wrapping multiple validation errors
// returned by CreatePostReply.ValidateAll() if the designated constraints
// aren't met.
type CreatePostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePostReplyMultiError) AllErrors() []error { return m }

// CreatePostReplyValidationError is the validation error returned by
// CreatePostReply.Validate if the designated constraints aren't met.
type CreatePostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePostReplyValidationError) ErrorName() string { return "CreatePostReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreatePostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePostReplyValidationError{}

// Validate checks the field values on UpdatePostContentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostContentRequestMultiError, or nil if none found.
func (m *UpdatePostContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdatePostContentRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := UpdatePostContentRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Text

	// no validation rules for PicKeys

	// no validation rules for VideoKey

	// no validation rules for VideoDuration

	// no validation rules for CoverKey

	// no validation rules for CoverWidth

	// no validation rules for CoverHeight

	// no validation rules for Longitude

	// no validation rules for Latitude

	// no validation rules for Position

	if len(errors) > 0 {
		return UpdatePostContentRequestMultiError(errors)
	}

	return nil
}

// UpdatePostContentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePostContentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePostContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostContentRequestMultiError) AllErrors() []error { return m }

// UpdatePostContentRequestValidationError is the validation error returned by
// UpdatePostContentRequest.Validate if the designated constraints aren't met.
type UpdatePostContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostContentRequestValidationError) ErrorName() string {
	return "UpdatePostContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostContentRequestValidationError{}

// Validate checks the field values on UpdatePostContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePostContentReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePostContentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePostContentReplyMultiError, or nil if none found.
func (m *UpdatePostContentReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePostContentReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePostContentReplyMultiError(errors)
	}

	return nil
}

// UpdatePostContentReplyMultiError is an error wrapping multiple validation
// errors returned by UpdatePostContentReply.ValidateAll() if the designated
// constraints aren't met.
type UpdatePostContentReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePostContentReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePostContentReplyMultiError) AllErrors() []error { return m }

// UpdatePostContentReplyValidationError is the validation error returned by
// UpdatePostContentReply.Validate if the designated constraints aren't met.
type UpdatePostContentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePostContentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePostContentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePostContentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePostContentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePostContentReplyValidationError) ErrorName() string {
	return "UpdatePostContentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePostContentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePostContentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePostContentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePostContentReplyValidationError{}

// Validate checks the field values on DeletePostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostRequestMultiError, or nil if none found.
func (m *DeletePostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeletePostRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() < 1 {
		err := DeletePostRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDelFlag(); val < 1 || val > 2 {
		err := DeletePostRequestValidationError{
			field:  "DelFlag",
			reason: "value must be inside range [1, 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePostRequestMultiError(errors)
	}

	return nil
}

// DeletePostRequestMultiError is an error wrapping multiple validation errors
// returned by DeletePostRequest.ValidateAll() if the designated constraints
// aren't met.
type DeletePostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostRequestMultiError) AllErrors() []error { return m }

// DeletePostRequestValidationError is the validation error returned by
// DeletePostRequest.Validate if the designated constraints aren't met.
type DeletePostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostRequestValidationError) ErrorName() string {
	return "DeletePostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostRequestValidationError{}

// Validate checks the field values on DeletePostReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeletePostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePostReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePostReplyMultiError, or nil if none found.
func (m *DeletePostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePostReplyMultiError(errors)
	}

	return nil
}

// DeletePostReplyMultiError is an error wrapping multiple validation errors
// returned by DeletePostReply.ValidateAll() if the designated constraints
// aren't met.
type DeletePostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePostReplyMultiError) AllErrors() []error { return m }

// DeletePostReplyValidationError is the validation error returned by
// DeletePostReply.Validate if the designated constraints aren't met.
type DeletePostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePostReplyValidationError) ErrorName() string { return "DeletePostReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeletePostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePostReplyValidationError{}

// Validate checks the field values on GetPostByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPostByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostByIDRequestMultiError, or nil if none found.
func (m *GetPostByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetPostByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPostByIDRequestMultiError(errors)
	}

	return nil
}

// GetPostByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetPostByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPostByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostByIDRequestMultiError) AllErrors() []error { return m }

// GetPostByIDRequestValidationError is the validation error returned by
// GetPostByIDRequest.Validate if the designated constraints aren't met.
type GetPostByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostByIDRequestValidationError) ErrorName() string {
	return "GetPostByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPostByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostByIDRequestValidationError{}

// Validate checks the field values on GetPostByIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPostByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPostByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPostByIDReplyMultiError, or nil if none found.
func (m *GetPostByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPostByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPostByIDReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPostByIDReplyValidationError{
					field:  "Post",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPostByIDReplyValidationError{
				field:  "Post",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPostByIDReplyMultiError(errors)
	}

	return nil
}

// GetPostByIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetPostByIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetPostByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPostByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPostByIDReplyMultiError) AllErrors() []error { return m }

// GetPostByIDReplyValidationError is the validation error returned by
// GetPostByIDReply.Validate if the designated constraints aren't met.
type GetPostByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPostByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPostByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPostByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPostByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPostByIDReplyValidationError) ErrorName() string { return "GetPostByIDReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPostByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPostByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPostByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPostByIDReplyValidationError{}

// Validate checks the field values on ListPostByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostByIDsRequestMultiError, or nil if none found.
func (m *ListPostByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := len(m.GetIds()); l < 1 || l > 100 {
		err := ListPostByIDsRequestValidationError{
			field:  "Ids",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPostByIDsRequestMultiError(errors)
	}

	return nil
}

// ListPostByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by ListPostByIDsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPostByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostByIDsRequestMultiError) AllErrors() []error { return m }

// ListPostByIDsRequestValidationError is the validation error returned by
// ListPostByIDsRequest.Validate if the designated constraints aren't met.
type ListPostByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostByIDsRequestValidationError) ErrorName() string {
	return "ListPostByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostByIDsRequestValidationError{}

// Validate checks the field values on ListPostByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostByIDsReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostByIDsReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostByIDsReplyMultiError, or nil if none found.
func (m *ListPostByIDsReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostByIDsReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostByIDsReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostByIDsReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostByIDsReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPostByIDsReplyMultiError(errors)
	}

	return nil
}

// ListPostByIDsReplyMultiError is an error wrapping multiple validation errors
// returned by ListPostByIDsReply.ValidateAll() if the designated constraints
// aren't met.
type ListPostByIDsReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostByIDsReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostByIDsReplyMultiError) AllErrors() []error { return m }

// ListPostByIDsReplyValidationError is the validation error returned by
// ListPostByIDsReply.Validate if the designated constraints aren't met.
type ListPostByIDsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostByIDsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostByIDsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostByIDsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostByIDsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostByIDsReplyValidationError) ErrorName() string {
	return "ListPostByIDsReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostByIDsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostByIDsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostByIDsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostByIDsReplyValidationError{}

// Validate checks the field values on ListPostByUserIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostByUserIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostByUserIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostByUserIDRequestMultiError, or nil if none found.
func (m *ListPostByUserIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostByUserIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 1 {
		err := ListPostByUserIDRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPage() < 0 {
		err := ListPostByUserIDRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListPostByUserIDRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPostByUserIDRequestMultiError(errors)
	}

	return nil
}

// ListPostByUserIDRequestMultiError is an error wrapping multiple validation
// errors returned by ListPostByUserIDRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPostByUserIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostByUserIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostByUserIDRequestMultiError) AllErrors() []error { return m }

// ListPostByUserIDRequestValidationError is the validation error returned by
// ListPostByUserIDRequest.Validate if the designated constraints aren't met.
type ListPostByUserIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostByUserIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostByUserIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostByUserIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostByUserIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostByUserIDRequestValidationError) ErrorName() string {
	return "ListPostByUserIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostByUserIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostByUserIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostByUserIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostByUserIDRequestValidationError{}

// Validate checks the field values on ListPostByUserIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostByUserIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostByUserIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostByUserIDReplyMultiError, or nil if none found.
func (m *ListPostByUserIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostByUserIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostByUserIDReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostByUserIDReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostByUserIDReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPostByUserIDReplyMultiError(errors)
	}

	return nil
}

// ListPostByUserIDReplyMultiError is an error wrapping multiple validation
// errors returned by ListPostByUserIDReply.ValidateAll() if the designated
// constraints aren't met.
type ListPostByUserIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostByUserIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostByUserIDReplyMultiError) AllErrors() []error { return m }

// ListPostByUserIDReplyValidationError is the validation error returned by
// ListPostByUserIDReply.Validate if the designated constraints aren't met.
type ListPostByUserIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostByUserIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostByUserIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostByUserIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostByUserIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostByUserIDReplyValidationError) ErrorName() string {
	return "ListPostByUserIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostByUserIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostByUserIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostByUserIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostByUserIDReplyValidationError{}

// Validate checks the field values on ListPostLatestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostLatestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostLatestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostLatestRequestMultiError, or nil if none found.
func (m *ListPostLatestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostLatestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 0 {
		err := ListPostLatestRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListPostLatestRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPostLatestRequestMultiError(errors)
	}

	return nil
}

// ListPostLatestRequestMultiError is an error wrapping multiple validation
// errors returned by ListPostLatestRequest.ValidateAll() if the designated
// constraints aren't met.
type ListPostLatestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostLatestRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostLatestRequestMultiError) AllErrors() []error { return m }

// ListPostLatestRequestValidationError is the validation error returned by
// ListPostLatestRequest.Validate if the designated constraints aren't met.
type ListPostLatestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostLatestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostLatestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostLatestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostLatestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostLatestRequestValidationError) ErrorName() string {
	return "ListPostLatestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostLatestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostLatestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostLatestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostLatestRequestValidationError{}

// Validate checks the field values on ListPostLatestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostLatestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostLatestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostLatestReplyMultiError, or nil if none found.
func (m *ListPostLatestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostLatestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostLatestReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostLatestReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostLatestReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPostLatestReplyMultiError(errors)
	}

	return nil
}

// ListPostLatestReplyMultiError is an error wrapping multiple validation
// errors returned by ListPostLatestReply.ValidateAll() if the designated
// constraints aren't met.
type ListPostLatestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostLatestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostLatestReplyMultiError) AllErrors() []error { return m }

// ListPostLatestReplyValidationError is the validation error returned by
// ListPostLatestReply.Validate if the designated constraints aren't met.
type ListPostLatestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostLatestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostLatestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostLatestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostLatestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostLatestReplyValidationError) ErrorName() string {
	return "ListPostLatestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostLatestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostLatestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostLatestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostLatestReplyValidationError{}

// Validate checks the field values on ListPostHotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPostHotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostHotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostHotRequestMultiError, or nil if none found.
func (m *ListPostHotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostHotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 0 {
		err := ListPostHotRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLimit(); val <= 0 || val > 100 {
		err := ListPostHotRequestValidationError{
			field:  "Limit",
			reason: "value must be inside range (0, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListPostHotRequestMultiError(errors)
	}

	return nil
}

// ListPostHotRequestMultiError is an error wrapping multiple validation errors
// returned by ListPostHotRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPostHotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostHotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostHotRequestMultiError) AllErrors() []error { return m }

// ListPostHotRequestValidationError is the validation error returned by
// ListPostHotRequest.Validate if the designated constraints aren't met.
type ListPostHotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostHotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostHotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostHotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostHotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostHotRequestValidationError) ErrorName() string {
	return "ListPostHotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPostHotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostHotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostHotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostHotRequestValidationError{}

// Validate checks the field values on ListPostHotReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPostHotReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPostHotReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPostHotReplyMultiError, or nil if none found.
func (m *ListPostHotReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPostHotReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPostHotReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPostHotReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPostHotReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListPostHotReplyMultiError(errors)
	}

	return nil
}

// ListPostHotReplyMultiError is an error wrapping multiple validation errors
// returned by ListPostHotReply.ValidateAll() if the designated constraints
// aren't met.
type ListPostHotReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPostHotReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPostHotReplyMultiError) AllErrors() []error { return m }

// ListPostHotReplyValidationError is the validation error returned by
// ListPostHotReply.Validate if the designated constraints aren't met.
type ListPostHotReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPostHotReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPostHotReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPostHotReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPostHotReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPostHotReplyValidationError) ErrorName() string { return "ListPostHotReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPostHotReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPostHotReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPostHotReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPostHotReplyValidationError{}

// Validate checks the field values on IncrPostViewCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncrPostViewCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrPostViewCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncrPostViewCountRequestMultiError, or nil if none found.
func (m *IncrPostViewCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrPostViewCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := IncrPostViewCountRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() < 1 {
		err := IncrPostViewCountRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IncrPostViewCountRequestMultiError(errors)
	}

	return nil
}

// IncrPostViewCountRequestMultiError is an error wrapping multiple validation
// errors returned by IncrPostViewCountRequest.ValidateAll() if the designated
// constraints aren't met.
type IncrPostViewCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrPostViewCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrPostViewCountRequestMultiError) AllErrors() []error { return m }

// IncrPostViewCountRequestValidationError is the validation error returned by
// IncrPostViewCountRequest.Validate if the designated constraints aren't met.
type IncrPostViewCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrPostViewCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrPostViewCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrPostViewCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrPostViewCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrPostViewCountRequestValidationError) ErrorName() string {
	return "IncrPostViewCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncrPostViewCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrPostViewCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrPostViewCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrPostViewCountRequestValidationError{}

// Validate checks the field values on IncrPostViewCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncrPostViewCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrPostViewCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncrPostViewCountReplyMultiError, or nil if none found.
func (m *IncrPostViewCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrPostViewCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IncrPostViewCountReplyMultiError(errors)
	}

	return nil
}

// IncrPostViewCountReplyMultiError is an error wrapping multiple validation
// errors returned by IncrPostViewCountReply.ValidateAll() if the designated
// constraints aren't met.
type IncrPostViewCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrPostViewCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrPostViewCountReplyMultiError) AllErrors() []error { return m }

// IncrPostViewCountReplyValidationError is the validation error returned by
// IncrPostViewCountReply.Validate if the designated constraints aren't met.
type IncrPostViewCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrPostViewCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrPostViewCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrPostViewCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrPostViewCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrPostViewCountReplyValidationError) ErrorName() string {
	return "IncrPostViewCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IncrPostViewCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrPostViewCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrPostViewCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrPostViewCountReplyValidationError{}

// Validate checks the field values on IncrPostShareCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncrPostShareCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrPostShareCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncrPostShareCountRequestMultiError, or nil if none found.
func (m *IncrPostShareCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrPostShareCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := IncrPostShareCountRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() < 1 {
		err := IncrPostShareCountRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IncrPostShareCountRequestMultiError(errors)
	}

	return nil
}

// IncrPostShareCountRequestMultiError is an error wrapping multiple validation
// errors returned by IncrPostShareCountRequest.ValidateAll() if the
// designated constraints aren't met.
type IncrPostShareCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrPostShareCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrPostShareCountRequestMultiError) AllErrors() []error { return m }

// IncrPostShareCountRequestValidationError is the validation error returned by
// IncrPostShareCountRequest.Validate if the designated constraints aren't met.
type IncrPostShareCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrPostShareCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrPostShareCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrPostShareCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrPostShareCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrPostShareCountRequestValidationError) ErrorName() string {
	return "IncrPostShareCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncrPostShareCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrPostShareCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrPostShareCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrPostShareCountRequestValidationError{}

// Validate checks the field values on IncrPostShareCountReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncrPostShareCountReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncrPostShareCountReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncrPostShareCountReplyMultiError, or nil if none found.
func (m *IncrPostShareCountReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IncrPostShareCountReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return IncrPostShareCountReplyMultiError(errors)
	}

	return nil
}

// IncrPostShareCountReplyMultiError is an error wrapping multiple validation
// errors returned by IncrPostShareCountReply.ValidateAll() if the designated
// constraints aren't met.
type IncrPostShareCountReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncrPostShareCountReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncrPostShareCountReplyMultiError) AllErrors() []error { return m }

// IncrPostShareCountReplyValidationError is the validation error returned by
// IncrPostShareCountReply.Validate if the designated constraints aren't met.
type IncrPostShareCountReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncrPostShareCountReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncrPostShareCountReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncrPostShareCountReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncrPostShareCountReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncrPostShareCountReplyValidationError) ErrorName() string {
	return "IncrPostShareCountReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IncrPostShareCountReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncrPostShareCountReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncrPostShareCountReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncrPostShareCountReplyValidationError{}
