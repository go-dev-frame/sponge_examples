// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"errors"

	relationV1 "relation/api/relation/v1"
	"relation/internal/cache"
	"relation/internal/dao"
	"relation/internal/ecode"
	"relation/internal/model"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"
	"github.com/zhufuyi/sponge/pkg/mysql"
	"github.com/zhufuyi/sponge/pkg/mysql/query"
	"google.golang.org/grpc"
)

const (
	// 关注状态
	followStatusDone = 1 // 已关注
	followStatusNot  = 0 // 未关注
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		relationV1.RegisterRelationServiceServer(server, NewRelationServiceServer())
	})
}

var _ relationV1.RelationServiceServer = (*relationService)(nil)

type relationService struct {
	relationV1.UnimplementedRelationServiceServer

	userFollowerDao  dao.UserFollowerDao
	userFollowingDao dao.UserFollowingDao
	relationNumDao   dao.RelationNumDao
}

// NewRelationServiceServer create a server
func NewRelationServiceServer() relationV1.RelationServiceServer {
	return &relationService{
		userFollowerDao: dao.NewUserFollowerDao(
			model.GetDB(),
			cache.NewUserFollowerCache(model.GetCacheType()),
		),
		userFollowingDao: dao.NewUserFollowingDao(
			model.GetDB(),
			cache.NewUserFollowingCache(model.GetCacheType()),
		),
		relationNumDao: dao.NewRelationNumDao(
			model.GetDB(),
			cache.NewRelationNumCache(model.GetCacheType()),
		),
	}
}

// Follow 关注
func (s *relationService) Follow(ctx context.Context, req *relationV1.FollowRequest) (*relationV1.FollowReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	// 判断是否关注了自己
	if req.UserId == req.FollowedUid {
		logger.Warn("can not follow yourself", logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusFollowSelfRelationService.Err()
	}

	// 判断是否已经关注过了
	userFollowing, err := s.userFollowingDao.GetRelation(ctx, req.UserId, req.FollowedUid)
	if err != nil && !errors.Is(err, model.ErrRecordNotFound) {
		logger.Warn("s.userFollowingDao.GetRelation error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}
	if userFollowing.Status == followStatusDone {
		return &relationV1.FollowReply{}, nil
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 添加关注
	err = s.userFollowingDao.CreateByTx(ctx, tx, &model.UserFollowing{
		Model:       mysql.Model{ID: userFollowing.ID},
		UserID:      req.UserId,
		FollowedUid: req.FollowedUid,
		Status:      followStatusDone,
	})
	if err != nil {
		tx.Rollback()
		logger.Error("s.userFollowingDao.CreateByTx error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	// 添加粉丝
	userFollower, _ := s.userFollowerDao.GetRelation(ctx, req.FollowedUid, req.UserId)
	err = s.userFollowerDao.CreateByTx(ctx, tx, &model.UserFollower{
		Model:       mysql.Model{ID: userFollower.ID},
		UserID:      req.FollowedUid,
		FollowerUid: req.UserId,
		Status:      followStatusDone,
	})
	if err != nil {
		tx.Rollback()
		logger.Error("s.userFollowingDao.CreateByTx error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	// 增加关注数
	err = s.relationNumDao.ModifyFollowingNumByTx(ctx, tx, req.UserId, 1)
	if err != nil {
		tx.Rollback()
		logger.Error("s.relationNumDao.ModifyFollowingNumByTx error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	// 增加粉丝数
	err = s.relationNumDao.ModifyFollowerNumByTx(ctx, tx, req.FollowedUid, 1)
	if err != nil {
		tx.Rollback()
		logger.Error("s.relationNumDao.ModifyFollowerNumByTx error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	return &relationV1.FollowReply{}, nil
}

// Unfollow 取消关注
func (s *relationService) Unfollow(ctx context.Context, req *relationV1.UnfollowRequest) (*relationV1.UnfollowReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	// 判断是否取消关注自己
	if req.UserId == req.FollowedUid {
		logger.Warn("can not unfollow yourself", logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusFollowSelfRelationService.Err()
	}

	// 判断是否已取消关注
	userFollowing, err := s.userFollowingDao.GetRelation(ctx, req.UserId, req.FollowedUid)
	if err != nil && !errors.Is(err, model.ErrRecordNotFound) {
		logger.Warn("s.userFollowingDao.GetRelation error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}
	if userFollowing != nil && userFollowing.Status == followStatusNot {
		return &relationV1.UnfollowReply{}, nil
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 取消关注
	err = s.userFollowingDao.UpdateStatusByTx(ctx, tx, &model.UserFollowing{
		UserID:      req.UserId,
		FollowedUid: req.FollowedUid,
		Status:      followStatusNot,
	})
	if err != nil {
		tx.Rollback()
		logger.Error("s.userFollowingDao.CreateByTx error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	// 取消粉丝
	err = s.userFollowerDao.UpdateStatusByTx(ctx, tx, &model.UserFollower{
		UserID:      req.FollowedUid,
		FollowerUid: req.UserId,
		Status:      followStatusNot,
	})
	if err != nil {
		tx.Rollback()
		logger.Error("s.userFollowingDao.CreateByTx error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	// 减少关注数
	err = s.relationNumDao.ModifyFollowingNumByTx(ctx, tx, req.UserId, -1)
	if err != nil {
		tx.Rollback()
		logger.Error("s.relationNumDao.ModifyFollowingNumByTx error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	// 减少粉丝数
	err = s.relationNumDao.ModifyFollowerNumByTx(ctx, tx, req.FollowedUid, -1)
	if err != nil {
		tx.Rollback()
		logger.Error("s.relationNumDao.ModifyFollowerNumByTx error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	return &relationV1.UnfollowReply{}, nil
}

// ListFollowing 关注列表
func (s *relationService) ListFollowing(ctx context.Context, req *relationV1.ListFollowingRequest) (*relationV1.ListFollowingReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	records, total, err := s.userFollowingDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-followed_uid",
		Columns: []query.Column{
			{
				Name:  "user_id",
				Value: req.UserId,
			},
			{
				Name:  "status",
				Value: followStatusDone,
			},
		},
	})
	if err != nil {
		logger.Error("s.userFollowingDao.GetByColumns error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	followedUids := []uint64{}
	for _, record := range records {
		followedUids = append(followedUids, record.FollowedUid)
	}

	return &relationV1.ListFollowingReply{
		Total:        total,
		FollowedUids: followedUids,
	}, nil
}

// ListFollower 粉丝列表
func (s *relationService) ListFollower(ctx context.Context, req *relationV1.ListFollowerRequest) (*relationV1.ListFollowerReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	records, total, err := s.userFollowerDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-follower_uid",
		Columns: []query.Column{
			{
				Name:  "user_id",
				Value: req.UserId,
			},
			{
				Name:  "status",
				Value: followStatusDone,
			},
		},
	})
	if err != nil {
		logger.Error("s.userFollowerDao.GetByColumns error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	followerUids := []uint64{}
	for _, record := range records {
		followerUids = append(followerUids, record.FollowerUid)
	}

	return &relationV1.ListFollowerReply{
		Total:        total,
		FollowerUids: followerUids,
	}, nil
}

// BatchGetRelation 批量获取关注关系，a和b,c,d的关注状态
func (s *relationService) BatchGetRelation(ctx context.Context, req *relationV1.BatchGetRelationRequest) (*relationV1.BatchGetRelationReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	records, err := s.userFollowingDao.BatchGetUserFollowing(ctx, req.UserId, req.Uids)
	if err != nil {
		logger.Error("s.userFollowingDao.BatchGetUserFollowing error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	result := make(map[uint64]int32, len(req.Uids))
	for _, record := range records {
		result[record.FollowedUid] = int32(record.Status)
	}

	for _, uid := range req.Uids {
		if uid == req.UserId {
			continue
		}
		if _, ok := result[uid]; !ok {
			result[uid] = followStatusNot
		}
	}

	return &relationV1.BatchGetRelationReply{
		Result: result,
	}, nil
}
