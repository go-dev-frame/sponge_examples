// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/creation/v1/post.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	// 创建帖子
	Create(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostReply, error)
	// 更新帖子内容
	UpdateContent(ctx context.Context, in *UpdatePostContentRequest, opts ...grpc.CallOption) (*UpdatePostContentReply, error)
	// 删除帖子
	Delete(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostReply, error)
	// 根据id获取帖子详情
	GetByID(ctx context.Context, in *GetPostByIDRequest, opts ...grpc.CallOption) (*GetPostByIDReply, error)
	// 根据批量id获取帖子列表
	ListByIDs(ctx context.Context, in *ListPostByIDsRequest, opts ...grpc.CallOption) (*ListPostByIDsReply, error)
	// 我发布过的帖子列表
	ListByUserID(ctx context.Context, in *ListPostByUserIDRequest, opts ...grpc.CallOption) (*ListPostByUserIDReply, error)
	// 最新的帖子列表
	ListLatest(ctx context.Context, in *ListPostLatestRequest, opts ...grpc.CallOption) (*ListPostLatestReply, error)
	// 热门的帖子列表
	ListHot(ctx context.Context, in *ListPostHotRequest, opts ...grpc.CallOption) (*ListPostHotReply, error)
	// 增加观看数量
	IncrViewCount(ctx context.Context, in *IncrPostViewCountRequest, opts ...grpc.CallOption) (*IncrPostViewCountReply, error)
	// 增加分享数量
	IncrShareCount(ctx context.Context, in *IncrPostShareCountRequest, opts ...grpc.CallOption) (*IncrPostShareCountReply, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) Create(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostReply, error) {
	out := new(CreatePostReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdateContent(ctx context.Context, in *UpdatePostContentRequest, opts ...grpc.CallOption) (*UpdatePostContentReply, error) {
	out := new(UpdatePostContentReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/UpdateContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) Delete(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostReply, error) {
	out := new(DeletePostReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetByID(ctx context.Context, in *GetPostByIDRequest, opts ...grpc.CallOption) (*GetPostByIDReply, error) {
	out := new(GetPostByIDReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListByIDs(ctx context.Context, in *ListPostByIDsRequest, opts ...grpc.CallOption) (*ListPostByIDsReply, error) {
	out := new(ListPostByIDsReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/ListByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListByUserID(ctx context.Context, in *ListPostByUserIDRequest, opts ...grpc.CallOption) (*ListPostByUserIDReply, error) {
	out := new(ListPostByUserIDReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/ListByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListLatest(ctx context.Context, in *ListPostLatestRequest, opts ...grpc.CallOption) (*ListPostLatestReply, error) {
	out := new(ListPostLatestReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/ListLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ListHot(ctx context.Context, in *ListPostHotRequest, opts ...grpc.CallOption) (*ListPostHotReply, error) {
	out := new(ListPostHotReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/ListHot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) IncrViewCount(ctx context.Context, in *IncrPostViewCountRequest, opts ...grpc.CallOption) (*IncrPostViewCountReply, error) {
	out := new(IncrPostViewCountReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/IncrViewCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) IncrShareCount(ctx context.Context, in *IncrPostShareCountRequest, opts ...grpc.CallOption) (*IncrPostShareCountReply, error) {
	out := new(IncrPostShareCountReply)
	err := c.cc.Invoke(ctx, "/api.creation.v1.PostService/IncrShareCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	// 创建帖子
	Create(context.Context, *CreatePostRequest) (*CreatePostReply, error)
	// 更新帖子内容
	UpdateContent(context.Context, *UpdatePostContentRequest) (*UpdatePostContentReply, error)
	// 删除帖子
	Delete(context.Context, *DeletePostRequest) (*DeletePostReply, error)
	// 根据id获取帖子详情
	GetByID(context.Context, *GetPostByIDRequest) (*GetPostByIDReply, error)
	// 根据批量id获取帖子列表
	ListByIDs(context.Context, *ListPostByIDsRequest) (*ListPostByIDsReply, error)
	// 我发布过的帖子列表
	ListByUserID(context.Context, *ListPostByUserIDRequest) (*ListPostByUserIDReply, error)
	// 最新的帖子列表
	ListLatest(context.Context, *ListPostLatestRequest) (*ListPostLatestReply, error)
	// 热门的帖子列表
	ListHot(context.Context, *ListPostHotRequest) (*ListPostHotReply, error)
	// 增加观看数量
	IncrViewCount(context.Context, *IncrPostViewCountRequest) (*IncrPostViewCountReply, error)
	// 增加分享数量
	IncrShareCount(context.Context, *IncrPostShareCountRequest) (*IncrPostShareCountReply, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (UnimplementedPostServiceServer) Create(context.Context, *CreatePostRequest) (*CreatePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPostServiceServer) UpdateContent(context.Context, *UpdatePostContentRequest) (*UpdatePostContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContent not implemented")
}
func (UnimplementedPostServiceServer) Delete(context.Context, *DeletePostRequest) (*DeletePostReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPostServiceServer) GetByID(context.Context, *GetPostByIDRequest) (*GetPostByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPostServiceServer) ListByIDs(context.Context, *ListPostByIDsRequest) (*ListPostByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByIDs not implemented")
}
func (UnimplementedPostServiceServer) ListByUserID(context.Context, *ListPostByUserIDRequest) (*ListPostByUserIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByUserID not implemented")
}
func (UnimplementedPostServiceServer) ListLatest(context.Context, *ListPostLatestRequest) (*ListPostLatestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatest not implemented")
}
func (UnimplementedPostServiceServer) ListHot(context.Context, *ListPostHotRequest) (*ListPostHotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHot not implemented")
}
func (UnimplementedPostServiceServer) IncrViewCount(context.Context, *IncrPostViewCountRequest) (*IncrPostViewCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrViewCount not implemented")
}
func (UnimplementedPostServiceServer) IncrShareCount(context.Context, *IncrPostShareCountRequest) (*IncrPostShareCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrShareCount not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Create(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdateContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdateContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/UpdateContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdateContent(ctx, req.(*UpdatePostContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).Delete(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetByID(ctx, req.(*GetPostByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/ListByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListByIDs(ctx, req.(*ListPostByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/ListByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListByUserID(ctx, req.(*ListPostByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/ListLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListLatest(ctx, req.(*ListPostLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ListHot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPostHotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ListHot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/ListHot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ListHot(ctx, req.(*ListPostHotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_IncrViewCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrPostViewCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).IncrViewCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/IncrViewCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).IncrViewCount(ctx, req.(*IncrPostViewCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_IncrShareCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncrPostShareCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).IncrShareCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.creation.v1.PostService/IncrShareCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).IncrShareCount(ctx, req.(*IncrPostShareCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.creation.v1.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PostService_Create_Handler,
		},
		{
			MethodName: "UpdateContent",
			Handler:    _PostService_UpdateContent_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PostService_Delete_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _PostService_GetByID_Handler,
		},
		{
			MethodName: "ListByIDs",
			Handler:    _PostService_ListByIDs_Handler,
		},
		{
			MethodName: "ListByUserID",
			Handler:    _PostService_ListByUserID_Handler,
		},
		{
			MethodName: "ListLatest",
			Handler:    _PostService_ListLatest_Handler,
		},
		{
			MethodName: "ListHot",
			Handler:    _PostService_ListHot_Handler,
		},
		{
			MethodName: "IncrViewCount",
			Handler:    _PostService_IncrViewCount_Handler,
		},
		{
			MethodName: "IncrShareCount",
			Handler:    _PostService_IncrShareCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/creation/v1/post.proto",
}
