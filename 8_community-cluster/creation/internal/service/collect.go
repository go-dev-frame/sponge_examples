// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"errors"

	creationV1 "creation/api/creation/v1"
	"creation/internal/cache"
	"creation/internal/dao"
	"creation/internal/ecode"
	"creation/internal/model"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"
	"github.com/zhufuyi/sponge/pkg/mysql/query"

	"google.golang.org/grpc"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		creationV1.RegisterCollectServiceServer(server, NewCollectServiceServer())
	})
}

var _ creationV1.CollectServiceServer = (*collectService)(nil)

type collectService struct {
	creationV1.UnimplementedCollectServiceServer

	userCollectDao dao.UserCollectDao
	postDao        dao.PostDao
}

// NewCollectServiceServer create a server
func NewCollectServiceServer() creationV1.CollectServiceServer {
	return &collectService{
		userCollectDao: dao.NewUserCollectDao(
			model.GetDB(),
			cache.NewUserCollectCache(model.GetCacheType()),
		),
		postDao: dao.NewPostDao(
			model.GetDB(),
			cache.NewPostCache(model.GetCacheType()),
		),
	}
}

// Create 收藏
func (s *collectService) Create(ctx context.Context, req *creationV1.CreateCollectRequest) (*creationV1.CreateCollectReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 判断收藏对象是否存在
	post, err := s.postDao.GetByID(ctx, req.PostId)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("s.postDao.GetByID error", logger.Err(err), logger.Uint64("postId", req.PostId), interceptor.ServerCtxRequestIDField(ctx))
			return nil, ecode.StatusNotFound.Err()
		}
		logger.Error("s.postDao.GetByID error", logger.Err(err), logger.Uint64("postId", req.PostId), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	// 判断是否自己的帖子
	if post.UserID == req.UserId {
		logger.Warn(ecode.StatusCreateCollectService.Msg(), logger.Uint64("postId", req.PostId), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusCreateCollectService.Err()
	}

	// 判断是否已经收藏过
	userCollect, err := s.userCollectDao.GetByUserPost(ctx, req.UserId, req.PostId)
	if err != nil && !errors.Is(err, model.ErrRecordNotFound) {
		logger.Error("s.userCollectDao.GetByUserPost error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}
	if userCollect.ID > 0 {
		return &creationV1.CreateCollectReply{}, nil
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 创建收藏
	userCollectRecord := &model.UserCollect{
		UserID: req.UserId,
		PostID: req.PostId,
	}
	_, err = s.userCollectDao.CreateByTx(ctx, tx, userCollectRecord)
	if err != nil {
		tx.Rollback()
		logger.Error("s.userCollectDao.CreateByTx error", logger.Err(err), logger.Any("userCollect", userCollectRecord), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	// 收藏数+1
	err = s.postDao.IncrCollectCountByTx(ctx, tx, req.PostId)
	if err != nil {
		tx.Rollback()
		logger.Error("s.postDao.IncrCollectCountByTx error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	return &creationV1.CreateCollectReply{}, nil
}

// Delete 删除收藏
func (s *collectService) Delete(ctx context.Context, req *creationV1.DeleteCollectRequest) (*creationV1.DeleteCollectReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 判断收藏对象是否存在
	_, err = s.userCollectDao.GetByID(ctx, req.Id)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("s.userCollectDao.GetByID error", logger.Err(err), logger.Uint64("postId", req.Id), interceptor.ServerCtxRequestIDField(ctx))
			return nil, ecode.StatusNotFound.Err()
		}
		logger.Error("s.userCollectDao.GetByID error", logger.Err(err), logger.Uint64("postId", req.Id), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	err = s.userCollectDao.DeleteByID(ctx, req.Id)
	if err != nil {
		tx.Rollback()
		logger.Warn("s.userCollectDao.DeleteByID error", logger.Err(err), logger.Uint64("id", req.Id), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	err = s.postDao.DecrCollectCountByTx(ctx, tx, req.PostId)
	if err != nil {
		tx.Rollback()
		logger.Warn("s.postDao.DecrCollectCountByTx error", logger.Err(err), logger.Uint64("id", req.PostId), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	return &creationV1.DeleteCollectReply{}, nil
}

// List 获取收藏列表
func (s *collectService) List(ctx context.Context, req *creationV1.ListCollectRequest) (*creationV1.ListCollectReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	records, total, err := s.userCollectDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-id",
		Columns: []query.Column{
			{
				Name:  "user_id",
				Value: req.UserId,
			},
		},
	})
	if err != nil {
		logger.Error("s.userCollectDao.GetByColumns error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	userCollectInfos := []*creationV1.CollectInfo{}
	for _, record := range records {
		userCollectInfos = append(userCollectInfos, convertUserCollect(record))
	}

	return &creationV1.ListCollectReply{Collects: userCollectInfos, Total: total}, nil
}

func convertUserCollect(c *model.UserCollect) *creationV1.CollectInfo {
	return &creationV1.CollectInfo{
		Id:        c.ID,
		UserId:    c.UserID,
		PostId:    c.PostID,
		CreatedAt: c.CreatedAt.Unix(),
		UpdatedAt: c.UpdatedAt.Unix(),
	}
}
