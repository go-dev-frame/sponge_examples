// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/stock/v1/final.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Final_Update_FullMethodName = "/api.stock.v1.final/Update"
	Final_Query_FullMethodName  = "/api.stock.v1.final/Query"
)

// FinalClient is the client API for Final service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinalClient interface {
	// 更新数据，DB和缓存最终一致性
	Update(ctx context.Context, in *UpdateFinalRequest, opts ...grpc.CallOption) (*UpdateFinalRequestReply, error)
	// 查询
	Query(ctx context.Context, in *QueryFinalRequest, opts ...grpc.CallOption) (*QueryFinalReply, error)
}

type finalClient struct {
	cc grpc.ClientConnInterface
}

func NewFinalClient(cc grpc.ClientConnInterface) FinalClient {
	return &finalClient{cc}
}

func (c *finalClient) Update(ctx context.Context, in *UpdateFinalRequest, opts ...grpc.CallOption) (*UpdateFinalRequestReply, error) {
	out := new(UpdateFinalRequestReply)
	err := c.cc.Invoke(ctx, Final_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *finalClient) Query(ctx context.Context, in *QueryFinalRequest, opts ...grpc.CallOption) (*QueryFinalReply, error) {
	out := new(QueryFinalReply)
	err := c.cc.Invoke(ctx, Final_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinalServer is the server API for Final service.
// All implementations must embed UnimplementedFinalServer
// for forward compatibility
type FinalServer interface {
	// 更新数据，DB和缓存最终一致性
	Update(context.Context, *UpdateFinalRequest) (*UpdateFinalRequestReply, error)
	// 查询
	Query(context.Context, *QueryFinalRequest) (*QueryFinalReply, error)
	mustEmbedUnimplementedFinalServer()
}

// UnimplementedFinalServer must be embedded to have forward compatible implementations.
type UnimplementedFinalServer struct {
}

func (UnimplementedFinalServer) Update(context.Context, *UpdateFinalRequest) (*UpdateFinalRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFinalServer) Query(context.Context, *QueryFinalRequest) (*QueryFinalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedFinalServer) mustEmbedUnimplementedFinalServer() {}

// UnsafeFinalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinalServer will
// result in compilation errors.
type UnsafeFinalServer interface {
	mustEmbedUnimplementedFinalServer()
}

func RegisterFinalServer(s grpc.ServiceRegistrar, srv FinalServer) {
	s.RegisterService(&Final_ServiceDesc, srv)
}

func _Final_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinalServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Final_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinalServer).Update(ctx, req.(*UpdateFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Final_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinalServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Final_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinalServer).Query(ctx, req.(*QueryFinalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Final_ServiceDesc is the grpc.ServiceDesc for Final service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Final_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.stock.v1.final",
	HandlerType: (*FinalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Final_Update_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Final_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stock/v1/final.proto",
}
