// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/stock/v1/downgrade.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Downgrade_Update_FullMethodName          = "/api.stock.v1.downgrade/Update"
	Downgrade_Query_FullMethodName           = "/api.stock.v1.downgrade/Query"
	Downgrade_DowngradeBranch_FullMethodName = "/api.stock.v1.downgrade/DowngradeBranch"
)

// DowngradeClient is the client API for Downgrade service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DowngradeClient interface {
	// 更新数据，升降级中的DB和缓存强一致性
	Update(ctx context.Context, in *UpdateDowngradeRequest, opts ...grpc.CallOption) (*UpdateDowngradeRequestReply, error)
	// 查询
	Query(ctx context.Context, in *QueryDowngradeRequest, opts ...grpc.CallOption) (*QueryDowngradeReply, error)
	// 升降级中的强一致性分支
	DowngradeBranch(ctx context.Context, in *DowngradeBranchRequest, opts ...grpc.CallOption) (*DowngradeBranchReply, error)
}

type downgradeClient struct {
	cc grpc.ClientConnInterface
}

func NewDowngradeClient(cc grpc.ClientConnInterface) DowngradeClient {
	return &downgradeClient{cc}
}

func (c *downgradeClient) Update(ctx context.Context, in *UpdateDowngradeRequest, opts ...grpc.CallOption) (*UpdateDowngradeRequestReply, error) {
	out := new(UpdateDowngradeRequestReply)
	err := c.cc.Invoke(ctx, Downgrade_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downgradeClient) Query(ctx context.Context, in *QueryDowngradeRequest, opts ...grpc.CallOption) (*QueryDowngradeReply, error) {
	out := new(QueryDowngradeReply)
	err := c.cc.Invoke(ctx, Downgrade_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downgradeClient) DowngradeBranch(ctx context.Context, in *DowngradeBranchRequest, opts ...grpc.CallOption) (*DowngradeBranchReply, error) {
	out := new(DowngradeBranchReply)
	err := c.cc.Invoke(ctx, Downgrade_DowngradeBranch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DowngradeServer is the server API for Downgrade service.
// All implementations must embed UnimplementedDowngradeServer
// for forward compatibility
type DowngradeServer interface {
	// 更新数据，升降级中的DB和缓存强一致性
	Update(context.Context, *UpdateDowngradeRequest) (*UpdateDowngradeRequestReply, error)
	// 查询
	Query(context.Context, *QueryDowngradeRequest) (*QueryDowngradeReply, error)
	// 升降级中的强一致性分支
	DowngradeBranch(context.Context, *DowngradeBranchRequest) (*DowngradeBranchReply, error)
	mustEmbedUnimplementedDowngradeServer()
}

// UnimplementedDowngradeServer must be embedded to have forward compatible implementations.
type UnimplementedDowngradeServer struct {
}

func (UnimplementedDowngradeServer) Update(context.Context, *UpdateDowngradeRequest) (*UpdateDowngradeRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDowngradeServer) Query(context.Context, *QueryDowngradeRequest) (*QueryDowngradeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDowngradeServer) DowngradeBranch(context.Context, *DowngradeBranchRequest) (*DowngradeBranchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DowngradeBranch not implemented")
}
func (UnimplementedDowngradeServer) mustEmbedUnimplementedDowngradeServer() {}

// UnsafeDowngradeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DowngradeServer will
// result in compilation errors.
type UnsafeDowngradeServer interface {
	mustEmbedUnimplementedDowngradeServer()
}

func RegisterDowngradeServer(s grpc.ServiceRegistrar, srv DowngradeServer) {
	s.RegisterService(&Downgrade_ServiceDesc, srv)
}

func _Downgrade_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDowngradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DowngradeServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downgrade_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DowngradeServer).Update(ctx, req.(*UpdateDowngradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downgrade_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDowngradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DowngradeServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downgrade_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DowngradeServer).Query(ctx, req.(*QueryDowngradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downgrade_DowngradeBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DowngradeBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DowngradeServer).DowngradeBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Downgrade_DowngradeBranch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DowngradeServer).DowngradeBranch(ctx, req.(*DowngradeBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Downgrade_ServiceDesc is the grpc.ServiceDesc for Downgrade service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Downgrade_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.stock.v1.downgrade",
	HandlerType: (*DowngradeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Downgrade_Update_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Downgrade_Query_Handler,
		},
		{
			MethodName: "DowngradeBranch",
			Handler:    _Downgrade_DowngradeBranch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stock/v1/downgrade.proto",
}
