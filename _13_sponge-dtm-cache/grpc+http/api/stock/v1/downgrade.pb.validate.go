// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/stock/v1/downgrade.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateDowngradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDowngradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDowngradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDowngradeRequestMultiError, or nil if none found.
func (m *UpdateDowngradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDowngradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateDowngradeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStock() <= 0 {
		err := UpdateDowngradeRequestValidationError{
			field:  "Stock",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDowngradeRequestMultiError(errors)
	}

	return nil
}

// UpdateDowngradeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDowngradeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDowngradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDowngradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDowngradeRequestMultiError) AllErrors() []error { return m }

// UpdateDowngradeRequestValidationError is the validation error returned by
// UpdateDowngradeRequest.Validate if the designated constraints aren't met.
type UpdateDowngradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDowngradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDowngradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDowngradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDowngradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDowngradeRequestValidationError) ErrorName() string {
	return "UpdateDowngradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDowngradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDowngradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDowngradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDowngradeRequestValidationError{}

// Validate checks the field values on UpdateDowngradeRequestReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDowngradeRequestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDowngradeRequestReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDowngradeRequestReplyMultiError, or nil if none found.
func (m *UpdateDowngradeRequestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDowngradeRequestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDowngradeRequestReplyMultiError(errors)
	}

	return nil
}

// UpdateDowngradeRequestReplyMultiError is an error wrapping multiple
// validation errors returned by UpdateDowngradeRequestReply.ValidateAll() if
// the designated constraints aren't met.
type UpdateDowngradeRequestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDowngradeRequestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDowngradeRequestReplyMultiError) AllErrors() []error { return m }

// UpdateDowngradeRequestReplyValidationError is the validation error returned
// by UpdateDowngradeRequestReply.Validate if the designated constraints
// aren't met.
type UpdateDowngradeRequestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDowngradeRequestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDowngradeRequestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDowngradeRequestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDowngradeRequestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDowngradeRequestReplyValidationError) ErrorName() string {
	return "UpdateDowngradeRequestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDowngradeRequestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDowngradeRequestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDowngradeRequestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDowngradeRequestReplyValidationError{}

// Validate checks the field values on QueryDowngradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDowngradeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDowngradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDowngradeRequestMultiError, or nil if none found.
func (m *QueryDowngradeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDowngradeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := QueryDowngradeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryDowngradeRequestMultiError(errors)
	}

	return nil
}

// QueryDowngradeRequestMultiError is an error wrapping multiple validation
// errors returned by QueryDowngradeRequest.ValidateAll() if the designated
// constraints aren't met.
type QueryDowngradeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDowngradeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDowngradeRequestMultiError) AllErrors() []error { return m }

// QueryDowngradeRequestValidationError is the validation error returned by
// QueryDowngradeRequest.Validate if the designated constraints aren't met.
type QueryDowngradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDowngradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDowngradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDowngradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDowngradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDowngradeRequestValidationError) ErrorName() string {
	return "QueryDowngradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDowngradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDowngradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDowngradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDowngradeRequestValidationError{}

// Validate checks the field values on QueryDowngradeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryDowngradeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDowngradeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDowngradeReplyMultiError, or nil if none found.
func (m *QueryDowngradeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDowngradeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Stock

	if len(errors) > 0 {
		return QueryDowngradeReplyMultiError(errors)
	}

	return nil
}

// QueryDowngradeReplyMultiError is an error wrapping multiple validation
// errors returned by QueryDowngradeReply.ValidateAll() if the designated
// constraints aren't met.
type QueryDowngradeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDowngradeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDowngradeReplyMultiError) AllErrors() []error { return m }

// QueryDowngradeReplyValidationError is the validation error returned by
// QueryDowngradeReply.Validate if the designated constraints aren't met.
type QueryDowngradeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDowngradeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDowngradeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDowngradeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDowngradeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDowngradeReplyValidationError) ErrorName() string {
	return "QueryDowngradeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e QueryDowngradeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDowngradeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDowngradeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDowngradeReplyValidationError{}

// Validate checks the field values on DowngradeBranchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DowngradeBranchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DowngradeBranchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DowngradeBranchRequestMultiError, or nil if none found.
func (m *DowngradeBranchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DowngradeBranchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGid()) < 1 {
		err := DowngradeBranchRequestValidationError{
			field:  "Gid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) < 1 {
		err := DowngradeBranchRequestValidationError{
			field:  "Key",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetId() <= 0 {
		err := DowngradeBranchRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStock() <= 0 {
		err := DowngradeBranchRequestValidationError{
			field:  "Stock",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DowngradeBranchRequestMultiError(errors)
	}

	return nil
}

// DowngradeBranchRequestMultiError is an error wrapping multiple validation
// errors returned by DowngradeBranchRequest.ValidateAll() if the designated
// constraints aren't met.
type DowngradeBranchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DowngradeBranchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DowngradeBranchRequestMultiError) AllErrors() []error { return m }

// DowngradeBranchRequestValidationError is the validation error returned by
// DowngradeBranchRequest.Validate if the designated constraints aren't met.
type DowngradeBranchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DowngradeBranchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DowngradeBranchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DowngradeBranchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DowngradeBranchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DowngradeBranchRequestValidationError) ErrorName() string {
	return "DowngradeBranchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DowngradeBranchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDowngradeBranchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DowngradeBranchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DowngradeBranchRequestValidationError{}

// Validate checks the field values on DowngradeBranchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DowngradeBranchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DowngradeBranchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DowngradeBranchReplyMultiError, or nil if none found.
func (m *DowngradeBranchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DowngradeBranchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DowngradeBranchReplyMultiError(errors)
	}

	return nil
}

// DowngradeBranchReplyMultiError is an error wrapping multiple validation
// errors returned by DowngradeBranchReply.ValidateAll() if the designated
// constraints aren't met.
type DowngradeBranchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DowngradeBranchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DowngradeBranchReplyMultiError) AllErrors() []error { return m }

// DowngradeBranchReplyValidationError is the validation error returned by
// DowngradeBranchReply.Validate if the designated constraints aren't met.
type DowngradeBranchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DowngradeBranchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DowngradeBranchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DowngradeBranchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DowngradeBranchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DowngradeBranchReplyValidationError) ErrorName() string {
	return "DowngradeBranchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DowngradeBranchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDowngradeBranchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DowngradeBranchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DowngradeBranchReplyValidationError{}
