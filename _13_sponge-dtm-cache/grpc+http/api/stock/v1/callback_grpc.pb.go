// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/stock/v1/callback.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Callback_QueryPrepared_FullMethodName = "/api.stock.v1.callback/QueryPrepared"
	Callback_DeleteCache_FullMethodName   = "/api.stock.v1.callback/DeleteCache"
)

// CallbackClient is the client API for Callback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbackClient interface {
	// 反查数据
	QueryPrepared(ctx context.Context, in *QueryPreparedRequest, opts ...grpc.CallOption) (*QueryPreparedReply, error)
	// 删除缓存
	DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheReply, error)
}

type callbackClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackClient(cc grpc.ClientConnInterface) CallbackClient {
	return &callbackClient{cc}
}

func (c *callbackClient) QueryPrepared(ctx context.Context, in *QueryPreparedRequest, opts ...grpc.CallOption) (*QueryPreparedReply, error) {
	out := new(QueryPreparedReply)
	err := c.cc.Invoke(ctx, Callback_QueryPrepared_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackClient) DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheReply, error) {
	out := new(DeleteCacheReply)
	err := c.cc.Invoke(ctx, Callback_DeleteCache_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallbackServer is the server API for Callback service.
// All implementations must embed UnimplementedCallbackServer
// for forward compatibility
type CallbackServer interface {
	// 反查数据
	QueryPrepared(context.Context, *QueryPreparedRequest) (*QueryPreparedReply, error)
	// 删除缓存
	DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheReply, error)
	mustEmbedUnimplementedCallbackServer()
}

// UnimplementedCallbackServer must be embedded to have forward compatible implementations.
type UnimplementedCallbackServer struct {
}

func (UnimplementedCallbackServer) QueryPrepared(context.Context, *QueryPreparedRequest) (*QueryPreparedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPrepared not implemented")
}
func (UnimplementedCallbackServer) DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (UnimplementedCallbackServer) mustEmbedUnimplementedCallbackServer() {}

// UnsafeCallbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbackServer will
// result in compilation errors.
type UnsafeCallbackServer interface {
	mustEmbedUnimplementedCallbackServer()
}

func RegisterCallbackServer(s grpc.ServiceRegistrar, srv CallbackServer) {
	s.RegisterService(&Callback_ServiceDesc, srv)
}

func _Callback_QueryPrepared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPreparedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServer).QueryPrepared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Callback_QueryPrepared_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServer).QueryPrepared(ctx, req.(*QueryPreparedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Callback_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Callback_DeleteCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackServer).DeleteCache(ctx, req.(*DeleteCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Callback_ServiceDesc is the grpc.ServiceDesc for Callback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Callback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.stock.v1.callback",
	HandlerType: (*CallbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPrepared",
			Handler:    _Callback_QueryPrepared_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _Callback_DeleteCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stock/v1/callback.proto",
}
