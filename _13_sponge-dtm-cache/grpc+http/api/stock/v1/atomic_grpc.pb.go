// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/stock/v1/atomic.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Atomic_Update_FullMethodName = "/api.stock.v1.atomic/Update"
	Atomic_Query_FullMethodName  = "/api.stock.v1.atomic/Query"
)

// AtomicClient is the client API for Atomic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtomicClient interface {
	// 更新数据，保证DB与缓存操作的原子性。
	Update(ctx context.Context, in *UpdateAtomicRequest, opts ...grpc.CallOption) (*UpdateAtomicRequestReply, error)
	// 查询
	Query(ctx context.Context, in *QueryAtomicRequest, opts ...grpc.CallOption) (*QueryAtomicReply, error)
}

type atomicClient struct {
	cc grpc.ClientConnInterface
}

func NewAtomicClient(cc grpc.ClientConnInterface) AtomicClient {
	return &atomicClient{cc}
}

func (c *atomicClient) Update(ctx context.Context, in *UpdateAtomicRequest, opts ...grpc.CallOption) (*UpdateAtomicRequestReply, error) {
	out := new(UpdateAtomicRequestReply)
	err := c.cc.Invoke(ctx, Atomic_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomicClient) Query(ctx context.Context, in *QueryAtomicRequest, opts ...grpc.CallOption) (*QueryAtomicReply, error) {
	out := new(QueryAtomicReply)
	err := c.cc.Invoke(ctx, Atomic_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtomicServer is the server API for Atomic service.
// All implementations must embed UnimplementedAtomicServer
// for forward compatibility
type AtomicServer interface {
	// 更新数据，保证DB与缓存操作的原子性。
	Update(context.Context, *UpdateAtomicRequest) (*UpdateAtomicRequestReply, error)
	// 查询
	Query(context.Context, *QueryAtomicRequest) (*QueryAtomicReply, error)
	mustEmbedUnimplementedAtomicServer()
}

// UnimplementedAtomicServer must be embedded to have forward compatible implementations.
type UnimplementedAtomicServer struct {
}

func (UnimplementedAtomicServer) Update(context.Context, *UpdateAtomicRequest) (*UpdateAtomicRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAtomicServer) Query(context.Context, *QueryAtomicRequest) (*QueryAtomicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedAtomicServer) mustEmbedUnimplementedAtomicServer() {}

// UnsafeAtomicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtomicServer will
// result in compilation errors.
type UnsafeAtomicServer interface {
	mustEmbedUnimplementedAtomicServer()
}

func RegisterAtomicServer(s grpc.ServiceRegistrar, srv AtomicServer) {
	s.RegisterService(&Atomic_ServiceDesc, srv)
}

func _Atomic_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAtomicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atomic_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicServer).Update(ctx, req.(*UpdateAtomicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Atomic_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAtomicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomicServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Atomic_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomicServer).Query(ctx, req.(*QueryAtomicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Atomic_ServiceDesc is the grpc.ServiceDesc for Atomic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Atomic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.stock.v1.atomic",
	HandlerType: (*AtomicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _Atomic_Update_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Atomic_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stock/v1/atomic.proto",
}
