// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"database/sql"
	"errors"
	"github.com/dtm-labs/client/dtmcli"
	"github.com/dtm-labs/client/dtmgrpc"
	"github.com/dtm-labs/rockscache"
	"github.com/go-redis/redis/v8"
	"google.golang.org/grpc"
	"stock/pkg/goredis"
	"strconv"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/krand"
	"github.com/zhufuyi/sponge/pkg/logger"

	stockV1 "stock/api/stock/v1"
	"stock/internal/ecode"
	"stock/internal/model"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		stockV1.RegisterCallbackServer(server, NewCallbackServer())
	})
}

var _ stockV1.CallbackServer = (*callback)(nil)

type callback struct {
	stockV1.UnimplementedCallbackServer

	db          *sql.DB
	rdb         *redis.Client
	cacheClient *rockscache.Client
}

// NewCallbackServer create a server
func NewCallbackServer() stockV1.CallbackServer {
	return &callback{
		db:          model.GetSDB(),
		rdb:         goredis.GetRedisCli(),
		cacheClient: model.GetRockscacheClient(),
	}
}

// QueryPrepared 反查数据，注：这是dtm回调，只返回nil、codes.Internal、codes.Aborted错误码
func (s *callback) QueryPrepared(ctx context.Context, req *stockV1.QueryPreparedRequest) (*stockV1.QueryPreparedReply, error) {
	ctx = interceptor.WrapServerCtx(ctx)

	bb, err := dtmgrpc.BarrierFromGrpc(ctx)
	if err != nil {
		logger.Warn("BarrierFromQuery error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	err = bb.RedisQueryPrepared(s.rdb, 7*86400)
	if err != nil {
		logger.Warn("RedisQueryPrepared error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	return &stockV1.QueryPreparedReply{}, adaptErr(err)
}

// DeleteCache 删除缓存，注：这是dtm回调，只返回nil、codes.Internal、codes.Aborted错误码
func (s *callback) DeleteCache(ctx context.Context, req *stockV1.DeleteCacheRequest) (*stockV1.DeleteCacheReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	err = s.cacheClient.TagAsDeleted(req.Key)

	return &stockV1.DeleteCacheReply{}, err
}

func adaptErr(err error) error {
	if err == nil {
		return nil
	}

	if errors.Is(err, dtmcli.ErrFailure) {
		return ecode.StatusAborted.ToRPCErr()
	}

	return ecode.StatusInternalServerError.ToRPCErr()
}

func newGid() string {
	return krand.NewSeriesID()
}

func getStockCacheKey(id uint64) string {
	return "stock:" + strconv.FormatUint(id, 10)
}
