// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/dtm-labs/client/dtmcli"
	"github.com/dtm-labs/client/dtmgrpc"
	"github.com/dtm-labs/rockscache"
	"google.golang.org/grpc"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"
	"github.com/zhufuyi/sponge/pkg/utils"

	stockV1 "stock/api/stock/v1"
	"stock/internal/dao"
	"stock/internal/ecode"
	"stock/internal/model"
	"stock/internal/rpcclient"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		stockV1.RegisterStrongServer(server, NewStrongServer())
	})
}

var _ stockV1.StrongServer = (*strong)(nil)

type strong struct {
	stockV1.UnimplementedStrongServer

	db                *sql.DB
	strongCacheClient *rockscache.Client
}

// NewStrongServer create a server
func NewStrongServer() stockV1.StrongServer {
	return &strong{
		db:                model.GetSDB(),
		strongCacheClient: model.GetStrongRockscacheClient(),
	}
}

// Update 更新数据，DB和缓存强一致性
func (s *strong) Update(ctx context.Context, req *stockV1.UpdateStrongRequest) (*stockV1.UpdateStrongRequestReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	gid := newGid()
	queryPreparedURL := rpcclient.GetStockEndpoint() + stockV1.Callback_QueryPrepared_FullMethodName
	deleteCacheURL := rpcclient.GetStockEndpoint() + stockV1.Callback_DeleteCache_FullMethodName
	deleteCacheReq := &stockV1.DeleteCacheRequest{
		Key: getStockCacheKey(req.Id),
	}
	stockObj := &model.Stock{
		ID:    req.Id,
		Stock: uint(req.Stock),
	}
	headers := map[string]string{interceptor.ContextRequestIDKey: interceptor.ServerCtxRequestID(ctx)}

	// 创建二阶段消息事务
	msg := dtmgrpc.NewMsgGrpc(rpcclient.GetDtmEndpoint(), gid, dtmgrpc.WithBranchHeaders(headers))
	msg.Add(deleteCacheURL, deleteCacheReq)
	msg.WaitResult = false // when return success, the global transaction has finished
	err = msg.DoAndSubmit(queryPreparedURL, func(bb *dtmcli.BranchBarrier) error {
		return bb.CallWithDB(s.db, func(tx *sql.Tx) error {
			return dao.UpdateStockInTx(tx, stockObj)
		})
	})
	if err != nil {
		logger.Warn("DoAndSubmit error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	logger.Info("更新数据，DB和缓存强一致性", logger.Any("dtm gid", gid))

	return &stockV1.UpdateStrongRequestReply{}, nil
}

// Query  查询
func (s *strong) Query(ctx context.Context, req *stockV1.QueryStrongRequest) (*stockV1.QueryStrongReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	key := getStockCacheKey(req.Id)
	queryFn := func() (string, error) {
		return dao.GetStockByID(s.db, req.Id)
	}

	value, err := s.strongCacheClient.Fetch(key, 300*time.Second, queryFn)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ecode.StatusNotFound.Err()
		}
		logger.Warn("s.strongCacheClient.Fetch error", logger.Err(err), logger.String("key", key), interceptor.ServerCtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	return &stockV1.QueryStrongReply{
		Stock: utils.StrToUint32(value),
	}, err
}
