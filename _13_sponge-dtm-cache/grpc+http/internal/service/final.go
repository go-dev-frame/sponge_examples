// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/dtm-labs/client/dtmcli"
	"github.com/dtm-labs/client/dtmgrpc"
	"github.com/dtm-labs/rockscache"
	"google.golang.org/grpc"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"
	"github.com/zhufuyi/sponge/pkg/utils"

	stockV1 "stock/api/stock/v1"
	"stock/internal/dao"
	"stock/internal/ecode"
	"stock/internal/model"
	"stock/internal/rpcclient"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		stockV1.RegisterFinalServer(server, NewFinalServer())
	})
}

var _ stockV1.FinalServer = (*final)(nil)

type final struct {
	stockV1.UnimplementedFinalServer

	db          *sql.DB
	cacheClient *rockscache.Client
}

// NewFinalServer create a server
func NewFinalServer() stockV1.FinalServer {
	return &final{
		db:          model.GetSDB(),
		cacheClient: model.GetRockscacheClient(),
	}
}

// Update 更新数据，DB和缓存最终一致性
func (s *final) Update(ctx context.Context, req *stockV1.UpdateFinalRequest) (*stockV1.UpdateFinalRequestReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	gid := newGid()
	deleteCacheURL := rpcclient.GetStockEndpoint() + stockV1.Callback_DeleteCache_FullMethodName
	queryPreparedURL := rpcclient.GetStockEndpoint() + stockV1.Callback_QueryPrepared_FullMethodName
	deleteCacheReq := &stockV1.DeleteCacheRequest{
		Key: getStockCacheKey(req.Id),
	}
	stockObj := &model.Stock{
		ID:    req.Id,
		Stock: uint(req.Stock),
	}
	headers := map[string]string{interceptor.ContextRequestIDKey: interceptor.ServerCtxRequestID(ctx)}

	// 创建二阶段消息事务
	msg := dtmgrpc.NewMsgGrpc(rpcclient.GetDtmEndpoint(), gid, dtmgrpc.WithBranchHeaders(headers))
	msg.Add(deleteCacheURL, deleteCacheReq)
	msg.WaitResult = true // when return success, the global transaction has finished
	err = msg.DoAndSubmit(queryPreparedURL, func(bb *dtmcli.BranchBarrier) error {
		return bb.CallWithDB(s.db, func(tx *sql.Tx) error {
			return dao.UpdateStockInTx(tx, stockObj)
		})
	})
	if err != nil {
		logger.Warn("msg.DoAndSubmit error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	logger.Info("更新数据，DB和缓存最终一致性", logger.Any("dtm gid", gid))

	return &stockV1.UpdateFinalRequestReply{}, nil
}

// Query  查询
func (s *final) Query(ctx context.Context, req *stockV1.QueryFinalRequest) (*stockV1.QueryFinalReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	key := getStockCacheKey(req.Id)
	queryFn := func() (string, error) {
		return dao.GetStockByID(s.db, req.Id)
	}

	value, err := s.cacheClient.Fetch(key, 300*time.Second, queryFn)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ecode.StatusNotFound.Err()
		}
		logger.Warn("s.strongCacheClient.Fetch error", logger.Err(err), logger.String("key", key), interceptor.ServerCtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	return &stockV1.QueryFinalReply{
		Stock: utils.StrToUint32(value),
	}, nil
}
