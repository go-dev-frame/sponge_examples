// Code generated by https://github.com/zhufuyi/sponge

package handler

import (
	"context"
	"database/sql"
	"errors"
	"github.com/dtm-labs/dtmcli"
	"github.com/dtm-labs/rockscache"
	"strconv"

	"github.com/zhufuyi/sponge/pkg/gin/middleware"
	"github.com/zhufuyi/sponge/pkg/krand"
	"github.com/zhufuyi/sponge/pkg/logger"

	stockV1 "stock/api/stock/v1"
	"stock/internal/config"
	"stock/internal/ecode"
	"stock/internal/model"
)

var _ stockV1.CallbackLogicer = (*callbackHandler)(nil)

type callbackHandler struct {
	db          *sql.DB
	cacheClient *rockscache.Client
}

// NewCallbackHandler create a handler
func NewCallbackHandler() stockV1.CallbackLogicer {
	return &callbackHandler{
		db:          model.GetSDB(),
		cacheClient: model.GetRockscacheClient(),
	}
}

// QueryPrepared 反查数据
func (h *callbackHandler) QueryPrepared(ctx context.Context, req *stockV1.QueryPreparedRequest) (*stockV1.QueryPreparedReply, error) {
	c, ctx := middleware.AdaptCtx(ctx)
	bb, err := dtmcli.BarrierFromQuery(c.Request.URL.Query())
	if err != nil {
		return nil, adaptErr(err)
	}

	err = bb.QueryPrepared(h.db)

	return &stockV1.QueryPreparedReply{}, adaptErr(err)
}

// DeleteCache 删除缓存
func (h *callbackHandler) DeleteCache(ctx context.Context, req *stockV1.DeleteCacheRequest) (*stockV1.DeleteCacheReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	err = h.cacheClient.TagAsDeleted(req.Key)

	return &stockV1.DeleteCacheReply{}, adaptErr(err)
}

func adaptErr(err error) error {
	if err == nil {
		return nil
	}

	if errors.Is(err, dtmcli.ErrFailure) {
		return ecode.Conflict.ErrToHTTP()
	} else if errors.Is(err, dtmcli.ErrOngoing) {
		return ecode.TooEarly.ErrToHTTP()
	}

	return ecode.InternalServerError.ErrToHTTP()
}

func newGid() string {
	return krand.NewSeriesID()
}

func getCallbackStockAddr() string {
	port := config.Get().HTTP.Port
	stockCfg := config.Get().Dtm.CallbackAddr.Stock
	if stockCfg.Port != 0 {
		port = stockCfg.Port
	}
	return stockCfg.Scheme + "://" + stockCfg.Host + ":" + strconv.Itoa(port)
}

func getStockCacheKey(id uint64) string {
	return "stock:" + strconv.FormatUint(id, 10)
}
