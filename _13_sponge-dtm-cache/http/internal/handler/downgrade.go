// Code generated by https://github.com/zhufuyi/sponge

package handler

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/dtm-labs/dtmcli"
	"github.com/dtm-labs/rockscache"

	"github.com/zhufuyi/sponge/pkg/gin/middleware"
	"github.com/zhufuyi/sponge/pkg/logger"
	"github.com/zhufuyi/sponge/pkg/utils"

	stockV1 "stock/api/stock/v1"
	"stock/internal/config"
	"stock/internal/dao"
	"stock/internal/ecode"
	"stock/internal/model"
)

var _ stockV1.DowngradeLogicer = (*downgradeHandler)(nil)

type downgradeHandler struct {
	db                *sql.DB
	strongCacheClient *rockscache.Client
}

// NewDowngradeHandler create a handler
func NewDowngradeHandler() stockV1.DowngradeLogicer {
	return &downgradeHandler{
		db:                model.GetSDB(),
		strongCacheClient: model.GetStrongRockscacheClient(),
	}
}

// Update 更新数据，升降级中的DB和缓存强一致性
func (h *downgradeHandler) Update(ctx context.Context, req *stockV1.UpdateDowngradeRequest) (*stockV1.UpdateDowngradeRequestReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	gid := newGid()
	callbackStockAddr := getCallbackStockAddr()
	downgradeBranchURL := callbackStockAddr + "/api/v1/stock/downgradeBranch"
	downgradeBranchBody := &stockV1.DowngradeBranchRequest{
		Gid:   gid,
		Key:   getStockCacheKey(req.Id),
		Id:    req.Id,
		Stock: req.Stock,
	}

	saga := dtmcli.NewSaga(config.Get().Dtm.Server, gid)
	saga.Add(downgradeBranchURL, "", downgradeBranchBody)
	saga.RetryInterval = 3
	err = saga.Submit()
	if err != nil {
		logger.Warn("saga.Submit error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	logger.Info("更新数据，升降级中的DB和缓存强一致性", logger.Err(err), logger.Any("dtm gid", gid))

	return &stockV1.UpdateDowngradeRequestReply{}, nil
}

// Query  查询
func (h *downgradeHandler) Query(ctx context.Context, req *stockV1.QueryDowngradeRequest) (*stockV1.QueryDowngradeReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	key := getStockCacheKey(req.Id)
	query := func() (string, error) {
		return dao.GetStockByID(h.db, req.Id)
	}

	value, err := h.strongCacheClient.Fetch(key, 300*time.Second, query)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, ecode.NotFound.Err()
		}
		logger.Warn("fetch cache error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &stockV1.QueryDowngradeReply{
		Stock: utils.StrToUint32(value),
	}, nil
}

// DowngradeBranch  升降级中的强一致性分支
func (h *downgradeHandler) DowngradeBranch(ctx context.Context, req *stockV1.DowngradeBranchRequest) (*stockV1.DowngradeBranchReply, error) {
	c, ctx := middleware.AdaptCtx(ctx)

	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}
	stock := &model.Stock{
		ID:    req.Id,
		Stock: uint(req.Stock),
	}

	ctx, _ = context.WithTimeout(ctx, 15*time.Second)

	err = h.strongCacheClient.LockForUpdate(ctx, req.Key, req.Gid)
	if err != nil {
		logger.Warn("h.strongCacheClient.LockForUpdate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	bb, err := dtmcli.BarrierFromQuery(c.Request.URL.Query())
	if err != nil {
		logger.Warn("dtmcli.BarrierFromQuery error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}
	err = bb.CallWithDB(h.db, func(tx *sql.Tx) error {
		// if business failed, user should return error dtmcli.ErrFailure
		// other error will be retried
		return dao.UpdateStockInTx(tx, stock)
	})
	if err != nil && !errors.Is(err, dtmcli.ErrFailure) {
		logger.Warn("bb.CallWithDB error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	err = h.strongCacheClient.UnlockForUpdate(ctx, req.Key, req.Gid)
	if err != nil {
		logger.Warn("h.strongCacheClient.UnlockForUpdate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	return &stockV1.DowngradeBranchReply{}, nil
}
