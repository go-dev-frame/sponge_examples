// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/stock/v1/strong.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpdateStrongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStrongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStrongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStrongRequestMultiError, or nil if none found.
func (m *UpdateStrongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStrongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateStrongRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStock() <= 0 {
		err := UpdateStrongRequestValidationError{
			field:  "Stock",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateStrongRequestMultiError(errors)
	}

	return nil
}

// UpdateStrongRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStrongRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStrongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStrongRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStrongRequestMultiError) AllErrors() []error { return m }

// UpdateStrongRequestValidationError is the validation error returned by
// UpdateStrongRequest.Validate if the designated constraints aren't met.
type UpdateStrongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStrongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStrongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStrongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStrongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStrongRequestValidationError) ErrorName() string {
	return "UpdateStrongRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStrongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStrongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStrongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStrongRequestValidationError{}

// Validate checks the field values on UpdateStrongRequestReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStrongRequestReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStrongRequestReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStrongRequestReplyMultiError, or nil if none found.
func (m *UpdateStrongRequestReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStrongRequestReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStrongRequestReplyMultiError(errors)
	}

	return nil
}

// UpdateStrongRequestReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateStrongRequestReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateStrongRequestReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStrongRequestReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStrongRequestReplyMultiError) AllErrors() []error { return m }

// UpdateStrongRequestReplyValidationError is the validation error returned by
// UpdateStrongRequestReply.Validate if the designated constraints aren't met.
type UpdateStrongRequestReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStrongRequestReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStrongRequestReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStrongRequestReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStrongRequestReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStrongRequestReplyValidationError) ErrorName() string {
	return "UpdateStrongRequestReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStrongRequestReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStrongRequestReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStrongRequestReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStrongRequestReplyValidationError{}

// Validate checks the field values on QueryStrongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryStrongRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryStrongRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryStrongRequestMultiError, or nil if none found.
func (m *QueryStrongRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryStrongRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := QueryStrongRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryStrongRequestMultiError(errors)
	}

	return nil
}

// QueryStrongRequestMultiError is an error wrapping multiple validation errors
// returned by QueryStrongRequest.ValidateAll() if the designated constraints
// aren't met.
type QueryStrongRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryStrongRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryStrongRequestMultiError) AllErrors() []error { return m }

// QueryStrongRequestValidationError is the validation error returned by
// QueryStrongRequest.Validate if the designated constraints aren't met.
type QueryStrongRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryStrongRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryStrongRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryStrongRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryStrongRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryStrongRequestValidationError) ErrorName() string {
	return "QueryStrongRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryStrongRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryStrongRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryStrongRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryStrongRequestValidationError{}

// Validate checks the field values on QueryStrongReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryStrongReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryStrongReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryStrongReplyMultiError, or nil if none found.
func (m *QueryStrongReply) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryStrongReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Stock

	if len(errors) > 0 {
		return QueryStrongReplyMultiError(errors)
	}

	return nil
}

// QueryStrongReplyMultiError is an error wrapping multiple validation errors
// returned by QueryStrongReply.ValidateAll() if the designated constraints
// aren't met.
type QueryStrongReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryStrongReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryStrongReplyMultiError) AllErrors() []error { return m }

// QueryStrongReplyValidationError is the validation error returned by
// QueryStrongReply.Validate if the designated constraints aren't met.
type QueryStrongReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryStrongReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryStrongReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryStrongReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryStrongReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryStrongReplyValidationError) ErrorName() string { return "QueryStrongReplyValidationError" }

// Error satisfies the builtin error interface
func (e QueryStrongReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryStrongReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryStrongReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryStrongReplyValidationError{}
