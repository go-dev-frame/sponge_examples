// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/pay/v1/pay.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pay_Create_FullMethodName       = "/api.pay.v1.pay/Create"
	Pay_CreateRevert_FullMethodName = "/api.pay.v1.pay/CreateRevert"
	Pay_DeleteByID_FullMethodName   = "/api.pay.v1.pay/DeleteByID"
	Pay_UpdateByID_FullMethodName   = "/api.pay.v1.pay/UpdateByID"
	Pay_GetByID_FullMethodName      = "/api.pay.v1.pay/GetByID"
	Pay_List_FullMethodName         = "/api.pay.v1.pay/List"
)

// PayClient is the client API for Pay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayClient interface {
	// 创建支付订单
	Create(ctx context.Context, in *CreatePayRequest, opts ...grpc.CallOption) (*CreatePayReply, error)
	// 取消支付订单
	CreateRevert(ctx context.Context, in *CreatePayRevertRequest, opts ...grpc.CallOption) (*CreatePayRevertReply, error)
	// delete pay by id
	DeleteByID(ctx context.Context, in *DeletePayByIDRequest, opts ...grpc.CallOption) (*DeletePayByIDReply, error)
	// update pay by id
	UpdateByID(ctx context.Context, in *UpdatePayByIDRequest, opts ...grpc.CallOption) (*UpdatePayByIDReply, error)
	// get pay by id
	GetByID(ctx context.Context, in *GetPayByIDRequest, opts ...grpc.CallOption) (*GetPayByIDReply, error)
	// list of pay by query parameters
	List(ctx context.Context, in *ListPayRequest, opts ...grpc.CallOption) (*ListPayReply, error)
}

type payClient struct {
	cc grpc.ClientConnInterface
}

func NewPayClient(cc grpc.ClientConnInterface) PayClient {
	return &payClient{cc}
}

func (c *payClient) Create(ctx context.Context, in *CreatePayRequest, opts ...grpc.CallOption) (*CreatePayReply, error) {
	out := new(CreatePayReply)
	err := c.cc.Invoke(ctx, Pay_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) CreateRevert(ctx context.Context, in *CreatePayRevertRequest, opts ...grpc.CallOption) (*CreatePayRevertReply, error) {
	out := new(CreatePayRevertReply)
	err := c.cc.Invoke(ctx, Pay_CreateRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) DeleteByID(ctx context.Context, in *DeletePayByIDRequest, opts ...grpc.CallOption) (*DeletePayByIDReply, error) {
	out := new(DeletePayByIDReply)
	err := c.cc.Invoke(ctx, Pay_DeleteByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) UpdateByID(ctx context.Context, in *UpdatePayByIDRequest, opts ...grpc.CallOption) (*UpdatePayByIDReply, error) {
	out := new(UpdatePayByIDReply)
	err := c.cc.Invoke(ctx, Pay_UpdateByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) GetByID(ctx context.Context, in *GetPayByIDRequest, opts ...grpc.CallOption) (*GetPayByIDReply, error) {
	out := new(GetPayByIDReply)
	err := c.cc.Invoke(ctx, Pay_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payClient) List(ctx context.Context, in *ListPayRequest, opts ...grpc.CallOption) (*ListPayReply, error) {
	out := new(ListPayReply)
	err := c.cc.Invoke(ctx, Pay_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayServer is the server API for Pay service.
// All implementations must embed UnimplementedPayServer
// for forward compatibility
type PayServer interface {
	// 创建支付订单
	Create(context.Context, *CreatePayRequest) (*CreatePayReply, error)
	// 取消支付订单
	CreateRevert(context.Context, *CreatePayRevertRequest) (*CreatePayRevertReply, error)
	// delete pay by id
	DeleteByID(context.Context, *DeletePayByIDRequest) (*DeletePayByIDReply, error)
	// update pay by id
	UpdateByID(context.Context, *UpdatePayByIDRequest) (*UpdatePayByIDReply, error)
	// get pay by id
	GetByID(context.Context, *GetPayByIDRequest) (*GetPayByIDReply, error)
	// list of pay by query parameters
	List(context.Context, *ListPayRequest) (*ListPayReply, error)
	mustEmbedUnimplementedPayServer()
}

// UnimplementedPayServer must be embedded to have forward compatible implementations.
type UnimplementedPayServer struct {
}

func (UnimplementedPayServer) Create(context.Context, *CreatePayRequest) (*CreatePayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPayServer) CreateRevert(context.Context, *CreatePayRevertRequest) (*CreatePayRevertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRevert not implemented")
}
func (UnimplementedPayServer) DeleteByID(context.Context, *DeletePayByIDRequest) (*DeletePayByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedPayServer) UpdateByID(context.Context, *UpdatePayByIDRequest) (*UpdatePayByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedPayServer) GetByID(context.Context, *GetPayByIDRequest) (*GetPayByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedPayServer) List(context.Context, *ListPayRequest) (*ListPayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPayServer) mustEmbedUnimplementedPayServer() {}

// UnsafePayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayServer will
// result in compilation errors.
type UnsafePayServer interface {
	mustEmbedUnimplementedPayServer()
}

func RegisterPayServer(s grpc.ServiceRegistrar, srv PayServer) {
	s.RegisterService(&Pay_ServiceDesc, srv)
}

func _Pay_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).Create(ctx, req.(*CreatePayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_CreateRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).CreateRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_CreateRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).CreateRevert(ctx, req.(*CreatePayRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_DeleteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).DeleteByID(ctx, req.(*DeletePayByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_UpdateByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).UpdateByID(ctx, req.(*UpdatePayByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).GetByID(ctx, req.(*GetPayByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pay_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pay_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayServer).List(ctx, req.(*ListPayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Pay_ServiceDesc is the grpc.ServiceDesc for Pay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pay.v1.pay",
	HandlerType: (*PayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Pay_Create_Handler,
		},
		{
			MethodName: "CreateRevert",
			Handler:    _Pay_CreateRevert_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _Pay_DeleteByID_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _Pay_UpdateByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Pay_GetByID_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Pay_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pay/v1/pay.proto",
}
