// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/coupon/v1/coupon.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CouponUseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouponUseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponUseRequestMultiError, or nil if none found.
func (m *CouponUseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCouponID() <= 0 {
		err := CouponUseRequestValidationError{
			field:  "CouponID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CouponUseRequestMultiError(errors)
	}

	return nil
}

// CouponUseRequestMultiError is an error wrapping multiple validation errors
// returned by CouponUseRequest.ValidateAll() if the designated constraints
// aren't met.
type CouponUseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseRequestMultiError) AllErrors() []error { return m }

// CouponUseRequestValidationError is the validation error returned by
// CouponUseRequest.Validate if the designated constraints aren't met.
type CouponUseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseRequestValidationError) ErrorName() string { return "CouponUseRequestValidationError" }

// Error satisfies the builtin error interface
func (e CouponUseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseRequestValidationError{}

// Validate checks the field values on CouponUseReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponUseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponUseReplyMultiError,
// or nil if none found.
func (m *CouponUseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponUseReplyMultiError(errors)
	}

	return nil
}

// CouponUseReplyMultiError is an error wrapping multiple validation errors
// returned by CouponUseReply.ValidateAll() if the designated constraints
// aren't met.
type CouponUseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseReplyMultiError) AllErrors() []error { return m }

// CouponUseReplyValidationError is the validation error returned by
// CouponUseReply.Validate if the designated constraints aren't met.
type CouponUseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseReplyValidationError) ErrorName() string { return "CouponUseReplyValidationError" }

// Error satisfies the builtin error interface
func (e CouponUseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseReplyValidationError{}

// Validate checks the field values on CouponUseRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponUseRevertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponUseRevertRequestMultiError, or nil if none found.
func (m *CouponUseRevertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseRevertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCouponID() <= 0 {
		err := CouponUseRevertRequestValidationError{
			field:  "CouponID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CouponUseRevertRequestMultiError(errors)
	}

	return nil
}

// CouponUseRevertRequestMultiError is an error wrapping multiple validation
// errors returned by CouponUseRevertRequest.ValidateAll() if the designated
// constraints aren't met.
type CouponUseRevertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseRevertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseRevertRequestMultiError) AllErrors() []error { return m }

// CouponUseRevertRequestValidationError is the validation error returned by
// CouponUseRevertRequest.Validate if the designated constraints aren't met.
type CouponUseRevertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseRevertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseRevertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseRevertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseRevertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseRevertRequestValidationError) ErrorName() string {
	return "CouponUseRevertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CouponUseRevertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseRevertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseRevertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseRevertRequestValidationError{}

// Validate checks the field values on CouponUseRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponUseRevertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponUseRevertReplyMultiError, or nil if none found.
func (m *CouponUseRevertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseRevertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponUseRevertReplyMultiError(errors)
	}

	return nil
}

// CouponUseRevertReplyMultiError is an error wrapping multiple validation
// errors returned by CouponUseRevertReply.ValidateAll() if the designated
// constraints aren't met.
type CouponUseRevertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseRevertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseRevertReplyMultiError) AllErrors() []error { return m }

// CouponUseRevertReplyValidationError is the validation error returned by
// CouponUseRevertReply.Validate if the designated constraints aren't met.
type CouponUseRevertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseRevertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseRevertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseRevertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseRevertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseRevertReplyValidationError) ErrorName() string {
	return "CouponUseRevertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CouponUseRevertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseRevertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseRevertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseRevertReplyValidationError{}

// Validate checks the field values on CreateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouponRequestMultiError, or nil if none found.
func (m *CreateCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Amount

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateCouponRequestMultiError(errors)
	}

	return nil
}

// CreateCouponRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouponRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouponRequestMultiError) AllErrors() []error { return m }

// CreateCouponRequestValidationError is the validation error returned by
// CreateCouponRequest.Validate if the designated constraints aren't met.
type CreateCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouponRequestValidationError) ErrorName() string {
	return "CreateCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouponRequestValidationError{}

// Validate checks the field values on CreateCouponReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCouponReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouponReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouponReplyMultiError, or nil if none found.
func (m *CreateCouponReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouponReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCouponReplyMultiError(errors)
	}

	return nil
}

// CreateCouponReplyMultiError is an error wrapping multiple validation errors
// returned by CreateCouponReply.ValidateAll() if the designated constraints
// aren't met.
type CreateCouponReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouponReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouponReplyMultiError) AllErrors() []error { return m }

// CreateCouponReplyValidationError is the validation error returned by
// CreateCouponReply.Validate if the designated constraints aren't met.
type CreateCouponReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouponReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouponReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouponReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouponReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouponReplyValidationError) ErrorName() string {
	return "CreateCouponReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouponReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouponReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouponReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouponReplyValidationError{}

// Validate checks the field values on DeleteCouponByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCouponByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCouponByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCouponByIDRequestMultiError, or nil if none found.
func (m *DeleteCouponByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCouponByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteCouponByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCouponByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteCouponByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCouponByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCouponByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCouponByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCouponByIDRequestMultiError) AllErrors() []error { return m }

// DeleteCouponByIDRequestValidationError is the validation error returned by
// DeleteCouponByIDRequest.Validate if the designated constraints aren't met.
type DeleteCouponByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCouponByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCouponByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCouponByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCouponByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCouponByIDRequestValidationError) ErrorName() string {
	return "DeleteCouponByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCouponByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCouponByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCouponByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCouponByIDRequestValidationError{}

// Validate checks the field values on DeleteCouponByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCouponByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCouponByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCouponByIDReplyMultiError, or nil if none found.
func (m *DeleteCouponByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCouponByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCouponByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteCouponByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteCouponByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteCouponByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCouponByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCouponByIDReplyMultiError) AllErrors() []error { return m }

// DeleteCouponByIDReplyValidationError is the validation error returned by
// DeleteCouponByIDReply.Validate if the designated constraints aren't met.
type DeleteCouponByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCouponByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCouponByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCouponByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCouponByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCouponByIDReplyValidationError) ErrorName() string {
	return "DeleteCouponByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCouponByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCouponByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCouponByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCouponByIDReplyValidationError{}

// Validate checks the field values on UpdateCouponByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCouponByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCouponByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCouponByIDRequestMultiError, or nil if none found.
func (m *UpdateCouponByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCouponByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserID

	// no validation rules for Amount

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateCouponByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateCouponByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCouponByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCouponByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCouponByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCouponByIDRequestMultiError) AllErrors() []error { return m }

// UpdateCouponByIDRequestValidationError is the validation error returned by
// UpdateCouponByIDRequest.Validate if the designated constraints aren't met.
type UpdateCouponByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCouponByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCouponByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCouponByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCouponByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCouponByIDRequestValidationError) ErrorName() string {
	return "UpdateCouponByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCouponByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCouponByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCouponByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCouponByIDRequestValidationError{}

// Validate checks the field values on UpdateCouponByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCouponByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCouponByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCouponByIDReplyMultiError, or nil if none found.
func (m *UpdateCouponByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCouponByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCouponByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateCouponByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateCouponByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateCouponByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCouponByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCouponByIDReplyMultiError) AllErrors() []error { return m }

// UpdateCouponByIDReplyValidationError is the validation error returned by
// UpdateCouponByIDReply.Validate if the designated constraints aren't met.
type UpdateCouponByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCouponByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCouponByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCouponByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCouponByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCouponByIDReplyValidationError) ErrorName() string {
	return "UpdateCouponByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCouponByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCouponByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCouponByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCouponByIDReplyValidationError{}

// Validate checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CouponMultiError, or nil if none found.
func (m *Coupon) ValidateAll() error {
	return m.validate(true)
}

func (m *Coupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserID

	// no validation rules for Amount

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return CouponMultiError(errors)
	}

	return nil
}

// CouponMultiError is an error wrapping multiple validation errors returned by
// Coupon.ValidateAll() if the designated constraints aren't met.
type CouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponMultiError) AllErrors() []error { return m }

// CouponValidationError is the validation error returned by Coupon.Validate if
// the designated constraints aren't met.
type CouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponValidationError) ErrorName() string { return "CouponValidationError" }

// Error satisfies the builtin error interface
func (e CouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponValidationError{}

// Validate checks the field values on GetCouponByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouponByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouponByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouponByIDRequestMultiError, or nil if none found.
func (m *GetCouponByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouponByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetCouponByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCouponByIDRequestMultiError(errors)
	}

	return nil
}

// GetCouponByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetCouponByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCouponByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouponByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouponByIDRequestMultiError) AllErrors() []error { return m }

// GetCouponByIDRequestValidationError is the validation error returned by
// GetCouponByIDRequest.Validate if the designated constraints aren't met.
type GetCouponByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouponByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouponByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouponByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouponByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouponByIDRequestValidationError) ErrorName() string {
	return "GetCouponByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouponByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouponByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouponByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouponByIDRequestValidationError{}

// Validate checks the field values on GetCouponByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouponByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouponByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouponByIDReplyMultiError, or nil if none found.
func (m *GetCouponByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouponByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCouponByIDReplyValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCouponByIDReplyValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCouponByIDReplyValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCouponByIDReplyMultiError(errors)
	}

	return nil
}

// GetCouponByIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetCouponByIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetCouponByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouponByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouponByIDReplyMultiError) AllErrors() []error { return m }

// GetCouponByIDReplyValidationError is the validation error returned by
// GetCouponByIDReply.Validate if the designated constraints aren't met.
type GetCouponByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouponByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouponByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouponByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouponByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouponByIDReplyValidationError) ErrorName() string {
	return "GetCouponByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouponByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouponByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouponByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouponByIDReplyValidationError{}

// Validate checks the field values on ListCouponRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCouponRequestMultiError, or nil if none found.
func (m *ListCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCouponRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCouponRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCouponRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListCouponRequestMultiError(errors)
	}

	return nil
}

// ListCouponRequestMultiError is an error wrapping multiple validation errors
// returned by ListCouponRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCouponRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCouponRequestMultiError) AllErrors() []error { return m }

// ListCouponRequestValidationError is the validation error returned by
// ListCouponRequest.Validate if the designated constraints aren't met.
type ListCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCouponRequestValidationError) ErrorName() string {
	return "ListCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCouponRequestValidationError{}

// Validate checks the field values on ListCouponReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCouponReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCouponReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCouponReplyMultiError, or nil if none found.
func (m *ListCouponReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCouponReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCouponReplyValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCouponReplyValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCouponReplyValidationError{
					field:  fmt.Sprintf("Coupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCouponReplyMultiError(errors)
	}

	return nil
}

// ListCouponReplyMultiError is an error wrapping multiple validation errors
// returned by ListCouponReply.ValidateAll() if the designated constraints
// aren't met.
type ListCouponReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCouponReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCouponReplyMultiError) AllErrors() []error { return m }

// ListCouponReplyValidationError is the validation error returned by
// ListCouponReply.Validate if the designated constraints aren't met.
type ListCouponReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCouponReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCouponReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCouponReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCouponReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCouponReplyValidationError) ErrorName() string { return "ListCouponReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCouponReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCouponReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCouponReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCouponReplyValidationError{}
