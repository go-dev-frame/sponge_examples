// Code generated by https://github.com/zhufuyi/sponge
// Test_service_flashSale_methods is used to test the flashSale api
// Test_service_flashSale_benchmark is used to performance test the flashSale api

package service

import (
	"context"
	"encoding/json"
	"fmt"
	"testing"
	"time"

	"github.com/zhufuyi/sponge/pkg/grpc/benchmark"

	flashSaleV1 "eshop/api/flashSale/v1"
	"eshop/flashSale/configs"
	"eshop/flashSale/internal/config"
)

// Test service flashSale api via grpc client
func Test_service_flashSale_methods(t *testing.T) {
	conn := getRPCClientConnForTest()
	cli := flashSaleV1.NewFlashSaleClient(conn)
	ctx, _ := context.WithTimeout(context.Background(), time.Second*30)

	tests := []struct {
		name    string
		fn      func() (interface{}, error)
		wantErr bool
	}{

		{
			name: "FlashSale",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &flashSaleV1.FlashSaleRequest{
					UserID:    0, // 用户id
					ProductID: 0, // 商品id
					Amount:    0, // 金额(分)
				}

				return cli.FlashSale(ctx, req)
			},
			wantErr: false,
		},

		{
			name: "RedisQueryPrepared",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &flashSaleV1.RedisQueryPreparedRequest{}

				return cli.RedisQueryPrepared(ctx, req)
			},
			wantErr: false,
		},

		{
			name: "SendSubmitOrderNotify",
			fn: func() (interface{}, error) {
				// todo type in the parameters before testing
				req := &flashSaleV1.SendSubmitOrderNotifyRequest{
					UserID:       0, // 用户id
					ProductID:    0, // 商品id
					ProductCount: 0, // 商品数量
					Amount:       0, // 金额(分)
					CouponID:     0, // 优惠券id
				}

				return cli.SendSubmitOrderNotify(ctx, req)
			},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.fn()
			if (err != nil) != tt.wantErr {
				t.Errorf("test '%s' error = %v, wantErr %v", tt.name, err, tt.wantErr)
				return
			}
			data, _ := json.MarshalIndent(got, "", "    ")
			fmt.Println(string(data))
		})
	}
}

// performance test service flashSale api, copy the report to
// the browser to view when the pressure test is finished.
func Test_service_flashSale_benchmark(t *testing.T) {
	err := config.Init(configs.Path("flashSale.yml"))
	if err != nil {
		panic(err)
	}

	grpcClientCfg := getGRPCClientCfg()
	host := fmt.Sprintf("%s:%d", grpcClientCfg.Host, grpcClientCfg.Port)
	protoFile := configs.Path("../api/flashSale/v1/flashSale.proto")
	// If third-party dependencies are missing during the press test,
	// copy them to the project's third_party directory.
	dependentProtoFilePath := []string{
		configs.Path("../third_party"), // third_party directory
		configs.Path(".."),             // Previous level of third_party
	}

	tests := []struct {
		name    string
		fn      func() error
		wantErr bool
	}{

		{
			name: "FlashSale",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &flashSaleV1.FlashSaleRequest{
					UserID:    0, // 用户id
					ProductID: 0, // 商品id
					Amount:    0, // 金额(分)
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "FlashSale", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},

		{
			name: "RedisQueryPrepared",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &flashSaleV1.RedisQueryPreparedRequest{}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "RedisQueryPrepared", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},

		{
			name: "SendSubmitOrderNotify",
			fn: func() error {
				// todo type in the parameters before benchmark testing
				message := &flashSaleV1.SendSubmitOrderNotifyRequest{
					UserID:       0, // 用户id
					ProductID:    0, // 商品id
					ProductCount: 0, // 商品数量
					Amount:       0, // 金额(分)
					CouponID:     0, // 优惠券id
				}
				total := 1000 // total number of requests

				b, err := benchmark.New(host, protoFile, "SendSubmitOrderNotify", message, dependentProtoFilePath, total)
				if err != nil {
					return err
				}
				return b.Run()
			},
			wantErr: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			err := tt.fn()
			if (err != nil) != tt.wantErr {
				t.Errorf("test '%s' error = %v, wantErr %v", tt.name, err, tt.wantErr)
				return
			}
		})
	}
}
