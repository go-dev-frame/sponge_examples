// Code generated by https://github.com/zhufuyi/sponge

package routers

import (
	"context"

	"github.com/gin-gonic/gin"
	"google.golang.org/grpc/metadata"

	"github.com/zhufuyi/sponge/pkg/gin/middleware"
	"github.com/zhufuyi/sponge/pkg/logger"

	orderV1 "eshop/api/order/v1"
	"eshop/order/internal/handler"
)

func init() {
	allMiddlewareFns = append(allMiddlewareFns, func(c *middlewareConfig) {
		orderMiddlewares(c)
	})

	allRouteFns = append(allRouteFns,
		func(r *gin.Engine, groupPathMiddlewares map[string][]gin.HandlerFunc, singlePathMiddlewares map[string][]gin.HandlerFunc) {
			orderRouter(r, groupPathMiddlewares, singlePathMiddlewares, handler.NewOrderHandler())
		})
}

func orderRouter(
	r *gin.Engine,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iService orderV1.OrderLogicer) {
	ctxFn := func(c *gin.Context) context.Context {
		md := metadata.New(map[string]string{
			middleware.ContextRequestIDKey: middleware.GCtxRequestID(c),
		})
		return metadata.NewIncomingContext(c.Request.Context(), md)
	}
	orderV1.RegisterOrderRouter(
		r,
		groupPathMiddlewares,
		singlePathMiddlewares,
		iService,
		orderV1.WithOrderLogger(logger.Get()),
		orderV1.WithOrderRPCResponse(),
		orderV1.WithOrderWrapCtx(ctxFn),
		orderV1.WithOrderErrorToHTTPCode(
		// Set some error codes to standard http return codes,
		// by default there is already ecode.InternalServerError and ecode.ServiceUnavailable
		// example:
		// 	ecode.Forbidden, ecode.LimitExceed,
		),
	)
}

// you can set the middleware of a route group, or set the middleware of a single route,
// or you can mix them, pay attention to the duplication of middleware when mixing them,
// it is recommended to set the middleware of a single route in preference
func orderMiddlewares(c *middlewareConfig) {
	// set up group route middleware, group path is left prefix rules,
	// if the left prefix is hit, the middleware will take effect, e.g. group route is /api/v1, route /api/v1/order/:id  will take effect
	// c.setGroupPath("/api/v1/order", middleware.Auth())

	// set up single route middleware, just uncomment the code and fill in the middlewares, nothing else needs to be changed
	//c.setSinglePath("POST", "/api/v1/order/submit", middleware.Auth())    // Submit 提交订单(分布式事务)
	//c.setSinglePath("POST", "/api/v1/order/sendSubmitNotify", middleware.Auth())    // SendSubmitOrderNotify 发送提交订单通知
	//c.setSinglePath("POST", "/api/v1/order/create", middleware.Auth())    // Create 创建订单
	//c.setSinglePath("POST", "/api/v1/order/createRevert", middleware.Auth())    // CreateRevert 取消创建订单
	//c.setSinglePath("DELETE", "/api/v1/order/:id", middleware.Auth())    // DeleteByID delete order by id
	//c.setSinglePath("PUT", "/api/v1/order/:id", middleware.Auth())    // UpdateByID update order by id
	//c.setSinglePath("GET", "/api/v1/order/:id", middleware.Auth())    // GetByID get order by id
	//c.setSinglePath("POST", "/api/v1/order/list", middleware.Auth())    // List of order by query parameters
}
