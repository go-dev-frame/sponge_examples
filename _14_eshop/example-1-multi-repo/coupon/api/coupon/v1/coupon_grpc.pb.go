// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/coupon/v1/coupon.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Coupon_CouponUse_FullMethodName       = "/api.coupon.v1.coupon/CouponUse"
	Coupon_CouponUseRevert_FullMethodName = "/api.coupon.v1.coupon/CouponUseRevert"
	Coupon_Create_FullMethodName          = "/api.coupon.v1.coupon/Create"
	Coupon_DeleteByID_FullMethodName      = "/api.coupon.v1.coupon/DeleteByID"
	Coupon_UpdateByID_FullMethodName      = "/api.coupon.v1.coupon/UpdateByID"
	Coupon_GetByID_FullMethodName         = "/api.coupon.v1.coupon/GetByID"
	Coupon_List_FullMethodName            = "/api.coupon.v1.coupon/List"
)

// CouponClient is the client API for Coupon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponClient interface {
	// 使用优惠券
	CouponUse(ctx context.Context, in *CouponUseRequest, opts ...grpc.CallOption) (*CouponUseReply, error)
	// 补偿优惠券
	CouponUseRevert(ctx context.Context, in *CouponUseRevertRequest, opts ...grpc.CallOption) (*CouponUseRevertReply, error)
	// create coupon
	Create(ctx context.Context, in *CreateCouponRequest, opts ...grpc.CallOption) (*CreateCouponReply, error)
	// delete coupon by id
	DeleteByID(ctx context.Context, in *DeleteCouponByIDRequest, opts ...grpc.CallOption) (*DeleteCouponByIDReply, error)
	// update coupon by id
	UpdateByID(ctx context.Context, in *UpdateCouponByIDRequest, opts ...grpc.CallOption) (*UpdateCouponByIDReply, error)
	// get coupon by id
	GetByID(ctx context.Context, in *GetCouponByIDRequest, opts ...grpc.CallOption) (*GetCouponByIDReply, error)
	// list of coupon by query parameters
	List(ctx context.Context, in *ListCouponRequest, opts ...grpc.CallOption) (*ListCouponReply, error)
}

type couponClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponClient(cc grpc.ClientConnInterface) CouponClient {
	return &couponClient{cc}
}

func (c *couponClient) CouponUse(ctx context.Context, in *CouponUseRequest, opts ...grpc.CallOption) (*CouponUseReply, error) {
	out := new(CouponUseReply)
	err := c.cc.Invoke(ctx, Coupon_CouponUse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) CouponUseRevert(ctx context.Context, in *CouponUseRevertRequest, opts ...grpc.CallOption) (*CouponUseRevertReply, error) {
	out := new(CouponUseRevertReply)
	err := c.cc.Invoke(ctx, Coupon_CouponUseRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) Create(ctx context.Context, in *CreateCouponRequest, opts ...grpc.CallOption) (*CreateCouponReply, error) {
	out := new(CreateCouponReply)
	err := c.cc.Invoke(ctx, Coupon_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) DeleteByID(ctx context.Context, in *DeleteCouponByIDRequest, opts ...grpc.CallOption) (*DeleteCouponByIDReply, error) {
	out := new(DeleteCouponByIDReply)
	err := c.cc.Invoke(ctx, Coupon_DeleteByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) UpdateByID(ctx context.Context, in *UpdateCouponByIDRequest, opts ...grpc.CallOption) (*UpdateCouponByIDReply, error) {
	out := new(UpdateCouponByIDReply)
	err := c.cc.Invoke(ctx, Coupon_UpdateByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) GetByID(ctx context.Context, in *GetCouponByIDRequest, opts ...grpc.CallOption) (*GetCouponByIDReply, error) {
	out := new(GetCouponByIDReply)
	err := c.cc.Invoke(ctx, Coupon_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) List(ctx context.Context, in *ListCouponRequest, opts ...grpc.CallOption) (*ListCouponReply, error) {
	out := new(ListCouponReply)
	err := c.cc.Invoke(ctx, Coupon_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServer is the server API for Coupon service.
// All implementations must embed UnimplementedCouponServer
// for forward compatibility
type CouponServer interface {
	// 使用优惠券
	CouponUse(context.Context, *CouponUseRequest) (*CouponUseReply, error)
	// 补偿优惠券
	CouponUseRevert(context.Context, *CouponUseRevertRequest) (*CouponUseRevertReply, error)
	// create coupon
	Create(context.Context, *CreateCouponRequest) (*CreateCouponReply, error)
	// delete coupon by id
	DeleteByID(context.Context, *DeleteCouponByIDRequest) (*DeleteCouponByIDReply, error)
	// update coupon by id
	UpdateByID(context.Context, *UpdateCouponByIDRequest) (*UpdateCouponByIDReply, error)
	// get coupon by id
	GetByID(context.Context, *GetCouponByIDRequest) (*GetCouponByIDReply, error)
	// list of coupon by query parameters
	List(context.Context, *ListCouponRequest) (*ListCouponReply, error)
	mustEmbedUnimplementedCouponServer()
}

// UnimplementedCouponServer must be embedded to have forward compatible implementations.
type UnimplementedCouponServer struct {
}

func (UnimplementedCouponServer) CouponUse(context.Context, *CouponUseRequest) (*CouponUseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouponUse not implemented")
}
func (UnimplementedCouponServer) CouponUseRevert(context.Context, *CouponUseRevertRequest) (*CouponUseRevertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouponUseRevert not implemented")
}
func (UnimplementedCouponServer) Create(context.Context, *CreateCouponRequest) (*CreateCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCouponServer) DeleteByID(context.Context, *DeleteCouponByIDRequest) (*DeleteCouponByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedCouponServer) UpdateByID(context.Context, *UpdateCouponByIDRequest) (*UpdateCouponByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedCouponServer) GetByID(context.Context, *GetCouponByIDRequest) (*GetCouponByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedCouponServer) List(context.Context, *ListCouponRequest) (*ListCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCouponServer) mustEmbedUnimplementedCouponServer() {}

// UnsafeCouponServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServer will
// result in compilation errors.
type UnsafeCouponServer interface {
	mustEmbedUnimplementedCouponServer()
}

func RegisterCouponServer(s grpc.ServiceRegistrar, srv CouponServer) {
	s.RegisterService(&Coupon_ServiceDesc, srv)
}

func _Coupon_CouponUse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponUseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).CouponUse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_CouponUse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).CouponUse(ctx, req.(*CouponUseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_CouponUseRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouponUseRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).CouponUseRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_CouponUseRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).CouponUseRevert(ctx, req.(*CouponUseRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).Create(ctx, req.(*CreateCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_DeleteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).DeleteByID(ctx, req.(*DeleteCouponByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_UpdateByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).UpdateByID(ctx, req.(*UpdateCouponByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).GetByID(ctx, req.(*GetCouponByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).List(ctx, req.(*ListCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coupon_ServiceDesc is the grpc.ServiceDesc for Coupon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coupon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.coupon.v1.coupon",
	HandlerType: (*CouponServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CouponUse",
			Handler:    _Coupon_CouponUse_Handler,
		},
		{
			MethodName: "CouponUseRevert",
			Handler:    _Coupon_CouponUseRevert_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Coupon_Create_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _Coupon_DeleteByID_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _Coupon_UpdateByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Coupon_GetByID_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Coupon_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/coupon/v1/coupon.proto",
}
