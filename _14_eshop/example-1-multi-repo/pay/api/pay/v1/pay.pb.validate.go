// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/pay/v1/pay.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayRequestMultiError, or nil if none found.
func (m *CreatePayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CreatePayRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderID()) < 16 {
		err := CreatePayRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreatePayRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePayRequestMultiError(errors)
	}

	return nil
}

// CreatePayRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePayRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayRequestMultiError) AllErrors() []error { return m }

// CreatePayRequestValidationError is the validation error returned by
// CreatePayRequest.Validate if the designated constraints aren't met.
type CreatePayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayRequestValidationError) ErrorName() string { return "CreatePayRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreatePayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayRequestValidationError{}

// Validate checks the field values on CreatePayReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreatePayReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreatePayReplyMultiError,
// or nil if none found.
func (m *CreatePayReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePayReplyMultiError(errors)
	}

	return nil
}

// CreatePayReplyMultiError is an error wrapping multiple validation errors
// returned by CreatePayReply.ValidateAll() if the designated constraints
// aren't met.
type CreatePayReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayReplyMultiError) AllErrors() []error { return m }

// CreatePayReplyValidationError is the validation error returned by
// CreatePayReply.Validate if the designated constraints aren't met.
type CreatePayReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayReplyValidationError) ErrorName() string { return "CreatePayReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreatePayReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayReplyValidationError{}

// Validate checks the field values on CreatePayRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePayRevertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayRevertRequestMultiError, or nil if none found.
func (m *CreatePayRevertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayRevertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CreatePayRevertRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderID()) < 16 {
		err := CreatePayRevertRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreatePayRevertRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePayRevertRequestMultiError(errors)
	}

	return nil
}

// CreatePayRevertRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePayRevertRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePayRevertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayRevertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayRevertRequestMultiError) AllErrors() []error { return m }

// CreatePayRevertRequestValidationError is the validation error returned by
// CreatePayRevertRequest.Validate if the designated constraints aren't met.
type CreatePayRevertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayRevertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayRevertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayRevertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayRevertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayRevertRequestValidationError) ErrorName() string {
	return "CreatePayRevertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePayRevertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayRevertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayRevertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayRevertRequestValidationError{}

// Validate checks the field values on CreatePayRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePayRevertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayRevertReplyMultiError, or nil if none found.
func (m *CreatePayRevertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayRevertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePayRevertReplyMultiError(errors)
	}

	return nil
}

// CreatePayRevertReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePayRevertReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePayRevertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayRevertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayRevertReplyMultiError) AllErrors() []error { return m }

// CreatePayRevertReplyValidationError is the validation error returned by
// CreatePayRevertReply.Validate if the designated constraints aren't met.
type CreatePayRevertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayRevertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayRevertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayRevertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayRevertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayRevertReplyValidationError) ErrorName() string {
	return "CreatePayRevertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePayRevertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayRevertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayRevertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayRevertReplyValidationError{}

// Validate checks the field values on DeletePayByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePayByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePayByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePayByIDRequestMultiError, or nil if none found.
func (m *DeletePayByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePayByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeletePayByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeletePayByIDRequestMultiError(errors)
	}

	return nil
}

// DeletePayByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePayByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePayByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePayByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePayByIDRequestMultiError) AllErrors() []error { return m }

// DeletePayByIDRequestValidationError is the validation error returned by
// DeletePayByIDRequest.Validate if the designated constraints aren't met.
type DeletePayByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePayByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePayByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePayByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePayByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePayByIDRequestValidationError) ErrorName() string {
	return "DeletePayByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePayByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePayByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePayByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePayByIDRequestValidationError{}

// Validate checks the field values on DeletePayByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePayByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePayByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePayByIDReplyMultiError, or nil if none found.
func (m *DeletePayByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePayByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeletePayByIDReplyMultiError(errors)
	}

	return nil
}

// DeletePayByIDReplyMultiError is an error wrapping multiple validation errors
// returned by DeletePayByIDReply.ValidateAll() if the designated constraints
// aren't met.
type DeletePayByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePayByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePayByIDReplyMultiError) AllErrors() []error { return m }

// DeletePayByIDReplyValidationError is the validation error returned by
// DeletePayByIDReply.Validate if the designated constraints aren't met.
type DeletePayByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePayByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePayByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePayByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePayByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePayByIDReplyValidationError) ErrorName() string {
	return "DeletePayByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePayByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePayByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePayByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePayByIDReplyValidationError{}

// Validate checks the field values on UpdatePayByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePayByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePayByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePayByIDRequestMultiError, or nil if none found.
func (m *UpdatePayByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePayByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserID

	// no validation rules for OrderID

	// no validation rules for Amount

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdatePayByIDRequestMultiError(errors)
	}

	return nil
}

// UpdatePayByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdatePayByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdatePayByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePayByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePayByIDRequestMultiError) AllErrors() []error { return m }

// UpdatePayByIDRequestValidationError is the validation error returned by
// UpdatePayByIDRequest.Validate if the designated constraints aren't met.
type UpdatePayByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePayByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePayByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePayByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePayByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePayByIDRequestValidationError) ErrorName() string {
	return "UpdatePayByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePayByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePayByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePayByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePayByIDRequestValidationError{}

// Validate checks the field values on UpdatePayByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdatePayByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdatePayByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdatePayByIDReplyMultiError, or nil if none found.
func (m *UpdatePayByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdatePayByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdatePayByIDReplyMultiError(errors)
	}

	return nil
}

// UpdatePayByIDReplyMultiError is an error wrapping multiple validation errors
// returned by UpdatePayByIDReply.ValidateAll() if the designated constraints
// aren't met.
type UpdatePayByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdatePayByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdatePayByIDReplyMultiError) AllErrors() []error { return m }

// UpdatePayByIDReplyValidationError is the validation error returned by
// UpdatePayByIDReply.Validate if the designated constraints aren't met.
type UpdatePayByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePayByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePayByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePayByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePayByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePayByIDReplyValidationError) ErrorName() string {
	return "UpdatePayByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePayByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePayByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePayByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePayByIDReplyValidationError{}

// Validate checks the field values on Pay with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Pay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Pay with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PayMultiError, or nil if none found.
func (m *Pay) ValidateAll() error {
	return m.validate(true)
}

func (m *Pay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserID

	// no validation rules for OrderID

	// no validation rules for Amount

	// no validation rules for Status

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return PayMultiError(errors)
	}

	return nil
}

// PayMultiError is an error wrapping multiple validation errors returned by
// Pay.ValidateAll() if the designated constraints aren't met.
type PayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PayMultiError) AllErrors() []error { return m }

// PayValidationError is the validation error returned by Pay.Validate if the
// designated constraints aren't met.
type PayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PayValidationError) ErrorName() string { return "PayValidationError" }

// Error satisfies the builtin error interface
func (e PayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PayValidationError{}

// Validate checks the field values on GetPayByIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPayByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPayByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPayByIDRequestMultiError, or nil if none found.
func (m *GetPayByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPayByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetPayByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetPayByIDRequestMultiError(errors)
	}

	return nil
}

// GetPayByIDRequestMultiError is an error wrapping multiple validation errors
// returned by GetPayByIDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPayByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPayByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPayByIDRequestMultiError) AllErrors() []error { return m }

// GetPayByIDRequestValidationError is the validation error returned by
// GetPayByIDRequest.Validate if the designated constraints aren't met.
type GetPayByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPayByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPayByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPayByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPayByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPayByIDRequestValidationError) ErrorName() string {
	return "GetPayByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPayByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPayByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPayByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPayByIDRequestValidationError{}

// Validate checks the field values on GetPayByIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPayByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPayByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPayByIDReplyMultiError, or nil if none found.
func (m *GetPayByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPayByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPayByIDReplyValidationError{
					field:  "Pay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPayByIDReplyValidationError{
					field:  "Pay",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPayByIDReplyValidationError{
				field:  "Pay",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetPayByIDReplyMultiError(errors)
	}

	return nil
}

// GetPayByIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetPayByIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetPayByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPayByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPayByIDReplyMultiError) AllErrors() []error { return m }

// GetPayByIDReplyValidationError is the validation error returned by
// GetPayByIDReply.Validate if the designated constraints aren't met.
type GetPayByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPayByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPayByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPayByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPayByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPayByIDReplyValidationError) ErrorName() string { return "GetPayByIDReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPayByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPayByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPayByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPayByIDReplyValidationError{}

// Validate checks the field values on ListPayRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPayRequestMultiError,
// or nil if none found.
func (m *ListPayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPayRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPayRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPayRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPayRequestMultiError(errors)
	}

	return nil
}

// ListPayRequestMultiError is an error wrapping multiple validation errors
// returned by ListPayRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPayRequestMultiError) AllErrors() []error { return m }

// ListPayRequestValidationError is the validation error returned by
// ListPayRequest.Validate if the designated constraints aren't met.
type ListPayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPayRequestValidationError) ErrorName() string { return "ListPayRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPayRequestValidationError{}

// Validate checks the field values on ListPayReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListPayReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPayReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListPayReplyMultiError, or
// nil if none found.
func (m *ListPayReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPayReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetPays() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPayReplyValidationError{
						field:  fmt.Sprintf("Pays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPayReplyValidationError{
						field:  fmt.Sprintf("Pays[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPayReplyValidationError{
					field:  fmt.Sprintf("Pays[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListPayReplyMultiError(errors)
	}

	return nil
}

// ListPayReplyMultiError is an error wrapping multiple validation errors
// returned by ListPayReply.ValidateAll() if the designated constraints aren't met.
type ListPayReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPayReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPayReplyMultiError) AllErrors() []error { return m }

// ListPayReplyValidationError is the validation error returned by
// ListPayReply.Validate if the designated constraints aren't met.
type ListPayReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPayReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPayReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPayReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPayReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPayReplyValidationError) ErrorName() string { return "ListPayReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPayReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPayReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPayReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPayReplyValidationError{}
