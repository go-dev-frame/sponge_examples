// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	couponV1 "eshop_gw/api/coupon/v1"
	eshop_gwV1 "eshop_gw/api/eshop_gw/v1"
	flashSaleV1 "eshop_gw/api/flashSale/v1"
	orderV1 "eshop_gw/api/order/v1"
	productV1 "eshop_gw/api/product/v1"
	stockV1 "eshop_gw/api/stock/v1"
	"eshop_gw/api/types"
	userV1 "eshop_gw/api/user/v1"
	"eshop_gw/internal/ecode"
	"eshop_gw/internal/rpcclient"
)

var _ eshop_gwV1.EshopLogicer = (*eshopClient)(nil)

type eshopClient struct {
	userCli      userV1.UserClient
	productCli   productV1.ProductClient
	orderCli     orderV1.OrderClient
	stockCli     stockV1.StockClient
	couponCli    couponV1.CouponClient
	flashSaleCli flashSaleV1.FlashSaleClient
}

// NewEshopClient create a client
func NewEshopClient() eshop_gwV1.EshopLogicer {
	return &eshopClient{
		userCli:      userV1.NewUserClient(rpcclient.GetUserRPCConn()),
		productCli:   productV1.NewProductClient(rpcclient.GetProductRPCConn()),
		orderCli:     orderV1.NewOrderClient(rpcclient.GetOrderRPCConn()),
		stockCli:     stockV1.NewStockClient(rpcclient.GetStockRPCConn()),
		couponCli:    couponV1.NewCouponClient(rpcclient.GetCouponRPCConn()),
		flashSaleCli: flashSaleV1.NewFlashSaleClient(rpcclient.GetFlashSaleRPCConn()),
	}
}

// CreateUser create user
func (c *eshopClient) CreateUser(ctx context.Context, req *userV1.CreateUserRequest) (*userV1.CreateUserReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.userCli.Create(ctx, req)
	if err != nil {
		logger.Error("CreateUser error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &userV1.CreateUserReply{Id: reply.Id}, nil
}

// ListUser list of user by query parameters
func (c *eshopClient) ListUser(ctx context.Context, req *eshop_gwV1.PageParam) (*userV1.ListUserReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.userCli.List(ctx, &userV1.ListUserRequest{
		Params: &types.Params{
			Page:  req.Page,
			Limit: req.Limit,
		},
	})
	if err != nil {
		logger.Error("ListUser error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &userV1.ListUserReply{
		Total: reply.Total,
		Users: reply.Users,
	}, nil
}

// CreateProduct create product
func (c *eshopClient) CreateProduct(ctx context.Context, req *productV1.CreateProductRequest) (*productV1.CreateProductReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.productCli.Create(ctx, req)
	if err != nil {
		logger.Error("CreateProduct error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &productV1.CreateProductReply{
		Id: reply.Id,
	}, nil
}

// ListProduct list of product by query parameters
func (c *eshopClient) ListProduct(ctx context.Context, req *eshop_gwV1.PageParam) (*productV1.ListProductReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.productCli.List(ctx, &productV1.ListProductRequest{
		Params: &types.Params{
			Page:  req.Page,
			Limit: req.Limit,
		},
	})
	if err != nil {
		logger.Error("ListProduct error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &productV1.ListProductReply{
		Total:    reply.Total,
		Products: reply.Products,
	}, nil
}

// SubmitOrder 提交订单
func (c *eshopClient) SubmitOrder(ctx context.Context, req *orderV1.SubmitOrderRequest) (*orderV1.SubmitOrderReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.orderCli.Submit(ctx, &orderV1.SubmitOrderRequest{
		UserID:       req.UserID,
		ProductID:    req.ProductID,
		ProductCount: req.ProductCount,
		Amount:       req.Amount,
		CouponID:     req.CouponID,
	})
	if err != nil {
		logger.Error("SubmitOrder error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &orderV1.SubmitOrderReply{
		OrderID: reply.OrderID,
	}, nil
}

// SendSubmitOrderNotify 发送提交订单通知
func (c *eshopClient) SendSubmitOrderNotify(ctx context.Context, req *orderV1.SendSubmitOrderNotifyRequest) (*orderV1.SendSubmitOrderNotifyReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.orderCli.SendSubmitOrderNotify(ctx, &orderV1.SendSubmitOrderNotifyRequest{
		UserID:       req.UserID,
		ProductID:    req.ProductID,
		ProductCount: req.ProductCount,
		Amount:       req.Amount,
		CouponID:     req.CouponID,
	})
	if err != nil {
		logger.Warn("SendSubmitOrderNotify error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &orderV1.SendSubmitOrderNotifyReply{}, nil
}

// ListOrder list of order by query parameters
func (c *eshopClient) ListOrder(ctx context.Context, req *eshop_gwV1.PageParam) (*orderV1.ListOrderReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.orderCli.List(ctx, &orderV1.ListOrderRequest{
		Params: &types.Params{
			Page:  req.Page,
			Limit: req.Limit,
		},
	})
	if err != nil {
		logger.Error("ListOrder error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &orderV1.ListOrderReply{
		Total:  reply.Total,
		Orders: reply.Orders,
	}, nil
}

// CreateCoupon create coupon
func (c *eshopClient) CreateCoupon(ctx context.Context, req *couponV1.CreateCouponRequest) (*couponV1.CreateCouponReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.couponCli.Create(ctx, req)
	if err != nil {
		logger.Warn("CreateCoupon error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &couponV1.CreateCouponReply{
		Id: reply.Id,
	}, nil
}

// ListCoupon list of coupon by query parameters
func (c *eshopClient) ListCoupon(ctx context.Context, req *eshop_gwV1.PageParam) (*couponV1.ListCouponReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.couponCli.List(ctx, &couponV1.ListCouponRequest{
		Params: &types.Params{
			Page:  req.Page,
			Limit: req.Limit,
		},
	})
	if err != nil {
		logger.Warn("ListCoupon error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &couponV1.ListCouponReply{
		Total:   reply.Total,
		Coupons: reply.Coupons,
	}, nil
}

// CreateStock create stock
func (c *eshopClient) CreateStock(ctx context.Context, req *stockV1.CreateStockRequest) (*stockV1.CreateStockReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.stockCli.Create(ctx, req)
	if err != nil {
		logger.Error("CreateStock error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &stockV1.CreateStockReply{
		Id: reply.Id,
	}, nil
}

// ListStock list of stock by query parameters
func (c *eshopClient) ListStock(ctx context.Context, req *eshop_gwV1.PageParam) (*stockV1.ListStockReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.stockCli.List(ctx, &stockV1.ListStockRequest{
		Params: &types.Params{
			Page:  req.Page,
			Limit: req.Limit,
		},
	})
	if err != nil {
		logger.Error("ListStock error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &stockV1.ListStockReply{
		Total:  reply.Total,
		Stocks: reply.Stocks,
	}, nil
}

// SetFlashSaleStock 设置秒杀产品的库存，直接更新DB和缓存，这里没有使用dtm+rockscache缓存一致性方案，主要原因是与flashSale服务使用dtm+rockscache操作redis的key相同，会产生冲突。
func (c *eshopClient) SetFlashSaleStock(ctx context.Context, req *stockV1.SetFlashSaleStockRequest) (*stockV1.SetFlashSaleStockReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.stockCli.SetFlashSaleStock(ctx, &stockV1.SetFlashSaleStockRequest{
		ProductID: req.ProductID,
		Stock:     req.Stock,
	})
	if err != nil {
		logger.Warn("SetFlashSaleStock error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return &stockV1.SetFlashSaleStockReply{}, nil
}

// FlashSale 秒杀抢购
func (c *eshopClient) FlashSale(ctx context.Context, req *flashSaleV1.FlashSaleRequest) (*flashSaleV1.FlashSaleReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.flashSaleCli.FlashSale(ctx, &flashSaleV1.FlashSaleRequest{
		UserID:    req.UserID,
		ProductID: req.ProductID,
		Amount:    req.Amount,
	})
	if err != nil {
		logger.Warn("FlashSale error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, adaptErr(err)
	}

	return &flashSaleV1.FlashSaleReply{}, nil
}

func adaptErr(err error) error {
	if err == nil {
		return nil
	}

	if ecode.GetStatusCode(err) == ecode.StatusAborted.ToRPCCode() {
		return ecode.StatusConflict.ErrToHTTP("销售完毕")
	}

	return ecode.StatusInternalServerError.Err()
}
