// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/eshop_gw/v1/eshop_gw.proto

package v1

import (
	context "context"
	v13 "eshop_gw/api/coupon/v1"
	v15 "eshop_gw/api/flashSale/v1"
	v12 "eshop_gw/api/order/v1"
	v11 "eshop_gw/api/product/v1"
	v14 "eshop_gw/api/stock/v1"
	v1 "eshop_gw/api/user/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Eshop_CreateUser_FullMethodName            = "/api.eshop_gw.v1.eshop/CreateUser"
	Eshop_ListUser_FullMethodName              = "/api.eshop_gw.v1.eshop/ListUser"
	Eshop_CreateProduct_FullMethodName         = "/api.eshop_gw.v1.eshop/CreateProduct"
	Eshop_ListProduct_FullMethodName           = "/api.eshop_gw.v1.eshop/ListProduct"
	Eshop_SubmitOrder_FullMethodName           = "/api.eshop_gw.v1.eshop/SubmitOrder"
	Eshop_SendSubmitOrderNotify_FullMethodName = "/api.eshop_gw.v1.eshop/SendSubmitOrderNotify"
	Eshop_ListOrder_FullMethodName             = "/api.eshop_gw.v1.eshop/ListOrder"
	Eshop_CreateCoupon_FullMethodName          = "/api.eshop_gw.v1.eshop/CreateCoupon"
	Eshop_ListCoupon_FullMethodName            = "/api.eshop_gw.v1.eshop/ListCoupon"
	Eshop_CreateStock_FullMethodName           = "/api.eshop_gw.v1.eshop/CreateStock"
	Eshop_ListStock_FullMethodName             = "/api.eshop_gw.v1.eshop/ListStock"
	Eshop_SetFlashSaleStock_FullMethodName     = "/api.eshop_gw.v1.eshop/SetFlashSaleStock"
	Eshop_FlashSale_FullMethodName             = "/api.eshop_gw.v1.eshop/FlashSale"
)

// EshopClient is the client API for Eshop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EshopClient interface {
	// create user
	CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...grpc.CallOption) (*v1.CreateUserReply, error)
	// list of user by query parameters
	ListUser(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v1.ListUserReply, error)
	// create product
	CreateProduct(ctx context.Context, in *v11.CreateProductRequest, opts ...grpc.CallOption) (*v11.CreateProductReply, error)
	// list of product by query parameters
	ListProduct(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v11.ListProductReply, error)
	// 提交订单
	SubmitOrder(ctx context.Context, in *v12.SubmitOrderRequest, opts ...grpc.CallOption) (*v12.SubmitOrderReply, error)
	// 发送提交订单通知
	SendSubmitOrderNotify(ctx context.Context, in *v12.SendSubmitOrderNotifyRequest, opts ...grpc.CallOption) (*v12.SendSubmitOrderNotifyReply, error)
	// list of order by query parameters
	ListOrder(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v12.ListOrderReply, error)
	// create coupon
	CreateCoupon(ctx context.Context, in *v13.CreateCouponRequest, opts ...grpc.CallOption) (*v13.CreateCouponReply, error)
	// list of coupon by query parameters
	ListCoupon(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v13.ListCouponReply, error)
	// create stock
	CreateStock(ctx context.Context, in *v14.CreateStockRequest, opts ...grpc.CallOption) (*v14.CreateStockReply, error)
	// list of stock by query parameters
	ListStock(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v14.ListStockReply, error)
	// 设置秒杀产品的库存，直接更新DB和缓存，这里没有使用dtm+rockscache缓存一致性方案，主要原因是与flashSale服务使用dtm+rockscache操作redis的key相同，会产生冲突。
	SetFlashSaleStock(ctx context.Context, in *v14.SetFlashSaleStockRequest, opts ...grpc.CallOption) (*v14.SetFlashSaleStockReply, error)
	// 秒杀抢购
	FlashSale(ctx context.Context, in *v15.FlashSaleRequest, opts ...grpc.CallOption) (*v15.FlashSaleReply, error)
}

type eshopClient struct {
	cc grpc.ClientConnInterface
}

func NewEshopClient(cc grpc.ClientConnInterface) EshopClient {
	return &eshopClient{cc}
}

func (c *eshopClient) CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...grpc.CallOption) (*v1.CreateUserReply, error) {
	out := new(v1.CreateUserReply)
	err := c.cc.Invoke(ctx, Eshop_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) ListUser(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v1.ListUserReply, error) {
	out := new(v1.ListUserReply)
	err := c.cc.Invoke(ctx, Eshop_ListUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) CreateProduct(ctx context.Context, in *v11.CreateProductRequest, opts ...grpc.CallOption) (*v11.CreateProductReply, error) {
	out := new(v11.CreateProductReply)
	err := c.cc.Invoke(ctx, Eshop_CreateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) ListProduct(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v11.ListProductReply, error) {
	out := new(v11.ListProductReply)
	err := c.cc.Invoke(ctx, Eshop_ListProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) SubmitOrder(ctx context.Context, in *v12.SubmitOrderRequest, opts ...grpc.CallOption) (*v12.SubmitOrderReply, error) {
	out := new(v12.SubmitOrderReply)
	err := c.cc.Invoke(ctx, Eshop_SubmitOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) SendSubmitOrderNotify(ctx context.Context, in *v12.SendSubmitOrderNotifyRequest, opts ...grpc.CallOption) (*v12.SendSubmitOrderNotifyReply, error) {
	out := new(v12.SendSubmitOrderNotifyReply)
	err := c.cc.Invoke(ctx, Eshop_SendSubmitOrderNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) ListOrder(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v12.ListOrderReply, error) {
	out := new(v12.ListOrderReply)
	err := c.cc.Invoke(ctx, Eshop_ListOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) CreateCoupon(ctx context.Context, in *v13.CreateCouponRequest, opts ...grpc.CallOption) (*v13.CreateCouponReply, error) {
	out := new(v13.CreateCouponReply)
	err := c.cc.Invoke(ctx, Eshop_CreateCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) ListCoupon(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v13.ListCouponReply, error) {
	out := new(v13.ListCouponReply)
	err := c.cc.Invoke(ctx, Eshop_ListCoupon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) CreateStock(ctx context.Context, in *v14.CreateStockRequest, opts ...grpc.CallOption) (*v14.CreateStockReply, error) {
	out := new(v14.CreateStockReply)
	err := c.cc.Invoke(ctx, Eshop_CreateStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) ListStock(ctx context.Context, in *PageParam, opts ...grpc.CallOption) (*v14.ListStockReply, error) {
	out := new(v14.ListStockReply)
	err := c.cc.Invoke(ctx, Eshop_ListStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) SetFlashSaleStock(ctx context.Context, in *v14.SetFlashSaleStockRequest, opts ...grpc.CallOption) (*v14.SetFlashSaleStockReply, error) {
	out := new(v14.SetFlashSaleStockReply)
	err := c.cc.Invoke(ctx, Eshop_SetFlashSaleStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eshopClient) FlashSale(ctx context.Context, in *v15.FlashSaleRequest, opts ...grpc.CallOption) (*v15.FlashSaleReply, error) {
	out := new(v15.FlashSaleReply)
	err := c.cc.Invoke(ctx, Eshop_FlashSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EshopServer is the server API for Eshop service.
// All implementations must embed UnimplementedEshopServer
// for forward compatibility
type EshopServer interface {
	// create user
	CreateUser(context.Context, *v1.CreateUserRequest) (*v1.CreateUserReply, error)
	// list of user by query parameters
	ListUser(context.Context, *PageParam) (*v1.ListUserReply, error)
	// create product
	CreateProduct(context.Context, *v11.CreateProductRequest) (*v11.CreateProductReply, error)
	// list of product by query parameters
	ListProduct(context.Context, *PageParam) (*v11.ListProductReply, error)
	// 提交订单
	SubmitOrder(context.Context, *v12.SubmitOrderRequest) (*v12.SubmitOrderReply, error)
	// 发送提交订单通知
	SendSubmitOrderNotify(context.Context, *v12.SendSubmitOrderNotifyRequest) (*v12.SendSubmitOrderNotifyReply, error)
	// list of order by query parameters
	ListOrder(context.Context, *PageParam) (*v12.ListOrderReply, error)
	// create coupon
	CreateCoupon(context.Context, *v13.CreateCouponRequest) (*v13.CreateCouponReply, error)
	// list of coupon by query parameters
	ListCoupon(context.Context, *PageParam) (*v13.ListCouponReply, error)
	// create stock
	CreateStock(context.Context, *v14.CreateStockRequest) (*v14.CreateStockReply, error)
	// list of stock by query parameters
	ListStock(context.Context, *PageParam) (*v14.ListStockReply, error)
	// 设置秒杀产品的库存，直接更新DB和缓存，这里没有使用dtm+rockscache缓存一致性方案，主要原因是与flashSale服务使用dtm+rockscache操作redis的key相同，会产生冲突。
	SetFlashSaleStock(context.Context, *v14.SetFlashSaleStockRequest) (*v14.SetFlashSaleStockReply, error)
	// 秒杀抢购
	FlashSale(context.Context, *v15.FlashSaleRequest) (*v15.FlashSaleReply, error)
	mustEmbedUnimplementedEshopServer()
}

// UnimplementedEshopServer must be embedded to have forward compatible implementations.
type UnimplementedEshopServer struct {
}

func (UnimplementedEshopServer) CreateUser(context.Context, *v1.CreateUserRequest) (*v1.CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedEshopServer) ListUser(context.Context, *PageParam) (*v1.ListUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedEshopServer) CreateProduct(context.Context, *v11.CreateProductRequest) (*v11.CreateProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedEshopServer) ListProduct(context.Context, *PageParam) (*v11.ListProductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProduct not implemented")
}
func (UnimplementedEshopServer) SubmitOrder(context.Context, *v12.SubmitOrderRequest) (*v12.SubmitOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}
func (UnimplementedEshopServer) SendSubmitOrderNotify(context.Context, *v12.SendSubmitOrderNotifyRequest) (*v12.SendSubmitOrderNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubmitOrderNotify not implemented")
}
func (UnimplementedEshopServer) ListOrder(context.Context, *PageParam) (*v12.ListOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedEshopServer) CreateCoupon(context.Context, *v13.CreateCouponRequest) (*v13.CreateCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoupon not implemented")
}
func (UnimplementedEshopServer) ListCoupon(context.Context, *PageParam) (*v13.ListCouponReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoupon not implemented")
}
func (UnimplementedEshopServer) CreateStock(context.Context, *v14.CreateStockRequest) (*v14.CreateStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStock not implemented")
}
func (UnimplementedEshopServer) ListStock(context.Context, *PageParam) (*v14.ListStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStock not implemented")
}
func (UnimplementedEshopServer) SetFlashSaleStock(context.Context, *v14.SetFlashSaleStockRequest) (*v14.SetFlashSaleStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFlashSaleStock not implemented")
}
func (UnimplementedEshopServer) FlashSale(context.Context, *v15.FlashSaleRequest) (*v15.FlashSaleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlashSale not implemented")
}
func (UnimplementedEshopServer) mustEmbedUnimplementedEshopServer() {}

// UnsafeEshopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EshopServer will
// result in compilation errors.
type UnsafeEshopServer interface {
	mustEmbedUnimplementedEshopServer()
}

func RegisterEshopServer(s grpc.ServiceRegistrar, srv EshopServer) {
	s.RegisterService(&Eshop_ServiceDesc, srv)
}

func _Eshop_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).CreateUser(ctx, req.(*v1.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_ListUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).ListUser(ctx, req.(*PageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_CreateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).CreateProduct(ctx, req.(*v11.CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_ListProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).ListProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_ListProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).ListProduct(ctx, req.(*PageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_SubmitOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).SubmitOrder(ctx, req.(*v12.SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_SendSubmitOrderNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v12.SendSubmitOrderNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).SendSubmitOrderNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_SendSubmitOrderNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).SendSubmitOrderNotify(ctx, req.(*v12.SendSubmitOrderNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_ListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).ListOrder(ctx, req.(*PageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_CreateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v13.CreateCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).CreateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_CreateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).CreateCoupon(ctx, req.(*v13.CreateCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_ListCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).ListCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_ListCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).ListCoupon(ctx, req.(*PageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_CreateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v14.CreateStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).CreateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_CreateStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).CreateStock(ctx, req.(*v14.CreateStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_ListStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).ListStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_ListStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).ListStock(ctx, req.(*PageParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_SetFlashSaleStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v14.SetFlashSaleStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).SetFlashSaleStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_SetFlashSaleStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).SetFlashSaleStock(ctx, req.(*v14.SetFlashSaleStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eshop_FlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v15.FlashSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EshopServer).FlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Eshop_FlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EshopServer).FlashSale(ctx, req.(*v15.FlashSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Eshop_ServiceDesc is the grpc.ServiceDesc for Eshop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Eshop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.eshop_gw.v1.eshop",
	HandlerType: (*EshopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Eshop_CreateUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Eshop_ListUser_Handler,
		},
		{
			MethodName: "CreateProduct",
			Handler:    _Eshop_CreateProduct_Handler,
		},
		{
			MethodName: "ListProduct",
			Handler:    _Eshop_ListProduct_Handler,
		},
		{
			MethodName: "SubmitOrder",
			Handler:    _Eshop_SubmitOrder_Handler,
		},
		{
			MethodName: "SendSubmitOrderNotify",
			Handler:    _Eshop_SendSubmitOrderNotify_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _Eshop_ListOrder_Handler,
		},
		{
			MethodName: "CreateCoupon",
			Handler:    _Eshop_CreateCoupon_Handler,
		},
		{
			MethodName: "ListCoupon",
			Handler:    _Eshop_ListCoupon_Handler,
		},
		{
			MethodName: "CreateStock",
			Handler:    _Eshop_CreateStock_Handler,
		},
		{
			MethodName: "ListStock",
			Handler:    _Eshop_ListStock_Handler,
		},
		{
			MethodName: "SetFlashSaleStock",
			Handler:    _Eshop_SetFlashSaleStock_Handler,
		},
		{
			MethodName: "FlashSale",
			Handler:    _Eshop_FlashSale_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/eshop_gw/v1/eshop_gw.proto",
}
