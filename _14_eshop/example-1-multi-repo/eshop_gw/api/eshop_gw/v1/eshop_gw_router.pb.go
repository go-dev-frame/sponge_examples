// Code generated by https://github.com/zhufuyi/sponge, DO NOT EDIT.

package v1

import (
	"context"
	"errors"
	"strings"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"

	"github.com/zhufuyi/sponge/pkg/errcode"
	"github.com/zhufuyi/sponge/pkg/gin/middleware"

	couponV1 "eshop_gw/api/coupon/v1"
	flashSaleV1 "eshop_gw/api/flashSale/v1"
	orderV1 "eshop_gw/api/order/v1"
	productV1 "eshop_gw/api/product/v1"
	stockV1 "eshop_gw/api/stock/v1"
	userV1 "eshop_gw/api/user/v1"
)

type EshopLogicer interface {
	CreateUser(ctx context.Context, req *userV1.CreateUserRequest) (*userV1.CreateUserReply, error)
	ListUser(ctx context.Context, req *PageParam) (*userV1.ListUserReply, error)
	CreateProduct(ctx context.Context, req *productV1.CreateProductRequest) (*productV1.CreateProductReply, error)
	ListProduct(ctx context.Context, req *PageParam) (*productV1.ListProductReply, error)
	SubmitOrder(ctx context.Context, req *orderV1.SubmitOrderRequest) (*orderV1.SubmitOrderReply, error)
	SendSubmitOrderNotify(ctx context.Context, req *orderV1.SendSubmitOrderNotifyRequest) (*orderV1.SendSubmitOrderNotifyReply, error)
	ListOrder(ctx context.Context, req *PageParam) (*orderV1.ListOrderReply, error)
	CreateCoupon(ctx context.Context, req *couponV1.CreateCouponRequest) (*couponV1.CreateCouponReply, error)
	ListCoupon(ctx context.Context, req *PageParam) (*couponV1.ListCouponReply, error)
	CreateStock(ctx context.Context, req *stockV1.CreateStockRequest) (*stockV1.CreateStockReply, error)
	ListStock(ctx context.Context, req *PageParam) (*stockV1.ListStockReply, error)
	SetFlashSaleStock(ctx context.Context, req *stockV1.SetFlashSaleStockRequest) (*stockV1.SetFlashSaleStockReply, error)
	FlashSale(ctx context.Context, req *flashSaleV1.FlashSaleRequest) (*flashSaleV1.FlashSaleReply, error)
}

type EshopOption func(*eshopOptions)

type eshopOptions struct {
	isFromRPC  bool
	responser  errcode.Responser
	zapLog     *zap.Logger
	httpErrors []*errcode.Error
	rpcStatus  []*errcode.RPCStatus
	wrapCtxFn  func(c *gin.Context) context.Context
}

func (o *eshopOptions) apply(opts ...EshopOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func WithEshopHTTPResponse() EshopOption {
	return func(o *eshopOptions) {
		o.isFromRPC = false
	}
}

func WithEshopRPCResponse() EshopOption {
	return func(o *eshopOptions) {
		o.isFromRPC = true
	}
}

func WithEshopResponser(responser errcode.Responser) EshopOption {
	return func(o *eshopOptions) {
		o.responser = responser
	}
}

func WithEshopLogger(zapLog *zap.Logger) EshopOption {
	return func(o *eshopOptions) {
		o.zapLog = zapLog
	}
}

func WithEshopErrorToHTTPCode(e ...*errcode.Error) EshopOption {
	return func(o *eshopOptions) {
		o.httpErrors = e
	}
}

func WithEshopRPCStatusToHTTPCode(s ...*errcode.RPCStatus) EshopOption {
	return func(o *eshopOptions) {
		o.rpcStatus = s
	}
}

func WithEshopWrapCtx(wrapCtxFn func(c *gin.Context) context.Context) EshopOption {
	return func(o *eshopOptions) {
		o.wrapCtxFn = wrapCtxFn
	}
}

func RegisterEshopRouter(
	iRouter gin.IRouter,
	groupPathMiddlewares map[string][]gin.HandlerFunc,
	singlePathMiddlewares map[string][]gin.HandlerFunc,
	iLogic EshopLogicer,
	opts ...EshopOption) {

	o := &eshopOptions{}
	o.apply(opts...)

	if o.responser == nil {
		o.responser = errcode.NewResponser(o.isFromRPC, o.httpErrors, o.rpcStatus)
	}
	if o.zapLog == nil {
		o.zapLog, _ = zap.NewProduction()
	}

	r := &eshopRouter{
		iRouter:               iRouter,
		groupPathMiddlewares:  groupPathMiddlewares,
		singlePathMiddlewares: singlePathMiddlewares,
		iLogic:                iLogic,
		iResponse:             o.responser,
		zapLog:                o.zapLog,
		wrapCtxFn:             o.wrapCtxFn,
	}
	r.register()
}

type eshopRouter struct {
	iRouter               gin.IRouter
	groupPathMiddlewares  map[string][]gin.HandlerFunc
	singlePathMiddlewares map[string][]gin.HandlerFunc
	iLogic                EshopLogicer
	iResponse             errcode.Responser
	zapLog                *zap.Logger
	wrapCtxFn             func(c *gin.Context) context.Context
}

func (r *eshopRouter) register() {
	r.iRouter.Handle("POST", "/api/v1/user", r.withMiddleware("POST", "/api/v1/user", r.CreateUser_0)...)
	r.iRouter.Handle("GET", "/api/v1/user/list", r.withMiddleware("GET", "/api/v1/user/list", r.ListUser_0)...)
	r.iRouter.Handle("POST", "/api/v1/product", r.withMiddleware("POST", "/api/v1/product", r.CreateProduct_0)...)
	r.iRouter.Handle("GET", "/api/v1/product/list", r.withMiddleware("GET", "/api/v1/product/list", r.ListProduct_0)...)
	r.iRouter.Handle("POST", "/api/v1/order/submit", r.withMiddleware("POST", "/api/v1/order/submit", r.SubmitOrder_0)...)
	r.iRouter.Handle("POST", "/api/v1/order/sendSubmitNotify", r.withMiddleware("POST", "/api/v1/order/sendSubmitNotify", r.SendSubmitOrderNotify_0)...)
	r.iRouter.Handle("GET", "/api/v1/order/list", r.withMiddleware("GET", "/api/v1/order/list", r.ListOrder_0)...)
	r.iRouter.Handle("POST", "/api/v1/coupon", r.withMiddleware("POST", "/api/v1/coupon", r.CreateCoupon_0)...)
	r.iRouter.Handle("GET", "/api/v1/coupon/list", r.withMiddleware("GET", "/api/v1/coupon/list", r.ListCoupon_0)...)
	r.iRouter.Handle("POST", "/api/v1/stock", r.withMiddleware("POST", "/api/v1/stock", r.CreateStock_0)...)
	r.iRouter.Handle("GET", "/api/v1/stock/list", r.withMiddleware("GET", "/api/v1/stock/list", r.ListStock_0)...)
	r.iRouter.Handle("POST", "/api/v1/stock/setFlashSale", r.withMiddleware("POST", "/api/v1/stock/setFlashSale", r.SetFlashSaleStock_0)...)
	r.iRouter.Handle("POST", "/api/v1/flashSale", r.withMiddleware("POST", "/api/v1/flashSale", r.FlashSale_0)...)

}

func (r *eshopRouter) withMiddleware(method string, path string, fn gin.HandlerFunc) []gin.HandlerFunc {
	handlerFns := []gin.HandlerFunc{}

	// determine if a route group is hit or miss, left prefix rule
	for groupPath, fns := range r.groupPathMiddlewares {
		if groupPath == "" || groupPath == "/" {
			handlerFns = append(handlerFns, fns...)
			continue
		}
		size := len(groupPath)
		if len(path) < size {
			continue
		}
		if groupPath == path[:size] {
			handlerFns = append(handlerFns, fns...)
		}
	}

	// determine if a single route has been hit
	key := strings.ToUpper(method) + "->" + path
	if fns, ok := r.singlePathMiddlewares[key]; ok {
		handlerFns = append(handlerFns, fns...)
	}

	return append(handlerFns, fn)
}

func (r *eshopRouter) CreateUser_0(c *gin.Context) {
	req := &userV1.CreateUserRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.CreateUser(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) ListUser_0(c *gin.Context) {
	req := &PageParam{}
	var err error

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListUser(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) CreateProduct_0(c *gin.Context) {
	req := &productV1.CreateProductRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.CreateProduct(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) ListProduct_0(c *gin.Context) {
	req := &PageParam{}
	var err error

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListProduct(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) SubmitOrder_0(c *gin.Context) {
	req := &orderV1.SubmitOrderRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.SubmitOrder(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) SendSubmitOrderNotify_0(c *gin.Context) {
	req := &orderV1.SendSubmitOrderNotifyRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.SendSubmitOrderNotify(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) ListOrder_0(c *gin.Context) {
	req := &PageParam{}
	var err error

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListOrder(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) CreateCoupon_0(c *gin.Context) {
	req := &couponV1.CreateCouponRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.CreateCoupon(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) ListCoupon_0(c *gin.Context) {
	req := &PageParam{}
	var err error

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListCoupon(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) CreateStock_0(c *gin.Context) {
	req := &stockV1.CreateStockRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.CreateStock(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) ListStock_0(c *gin.Context) {
	req := &PageParam{}
	var err error

	if err = c.ShouldBindQuery(req); err != nil {
		r.zapLog.Warn("ShouldBindQuery error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.ListStock(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) SetFlashSaleStock_0(c *gin.Context) {
	req := &stockV1.SetFlashSaleStockRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.SetFlashSaleStock(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}

func (r *eshopRouter) FlashSale_0(c *gin.Context) {
	req := &flashSaleV1.FlashSaleRequest{}
	var err error

	if err = c.ShouldBindJSON(req); err != nil {
		r.zapLog.Warn("ShouldBindJSON error", zap.Error(err), middleware.GCtxRequestIDField(c))
		r.iResponse.ParamError(c, err)
		return
	}

	var ctx context.Context
	if r.wrapCtxFn != nil {
		ctx = r.wrapCtxFn(c)
	} else {
		ctx = middleware.WrapCtx(c)
	}

	out, err := r.iLogic.FlashSale(ctx, req)
	if err != nil {
		if errors.Is(err, errcode.SkipResponse) {
			return
		}
		r.iResponse.Error(c, err)
		return
	}

	r.iResponse.Success(c, out)
}
