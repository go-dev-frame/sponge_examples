// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/flashSale/v1/flashSale.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FlashSaleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FlashSaleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlashSaleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlashSaleRequestMultiError, or nil if none found.
func (m *FlashSaleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FlashSaleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := FlashSaleRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductID() <= 0 {
		err := FlashSaleRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := FlashSaleRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FlashSaleRequestMultiError(errors)
	}

	return nil
}

// FlashSaleRequestMultiError is an error wrapping multiple validation errors
// returned by FlashSaleRequest.ValidateAll() if the designated constraints
// aren't met.
type FlashSaleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlashSaleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlashSaleRequestMultiError) AllErrors() []error { return m }

// FlashSaleRequestValidationError is the validation error returned by
// FlashSaleRequest.Validate if the designated constraints aren't met.
type FlashSaleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlashSaleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlashSaleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlashSaleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlashSaleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlashSaleRequestValidationError) ErrorName() string { return "FlashSaleRequestValidationError" }

// Error satisfies the builtin error interface
func (e FlashSaleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlashSaleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlashSaleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlashSaleRequestValidationError{}

// Validate checks the field values on FlashSaleReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlashSaleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlashSaleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlashSaleReplyMultiError,
// or nil if none found.
func (m *FlashSaleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FlashSaleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FlashSaleReplyMultiError(errors)
	}

	return nil
}

// FlashSaleReplyMultiError is an error wrapping multiple validation errors
// returned by FlashSaleReply.ValidateAll() if the designated constraints
// aren't met.
type FlashSaleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlashSaleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlashSaleReplyMultiError) AllErrors() []error { return m }

// FlashSaleReplyValidationError is the validation error returned by
// FlashSaleReply.Validate if the designated constraints aren't met.
type FlashSaleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlashSaleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlashSaleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlashSaleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlashSaleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlashSaleReplyValidationError) ErrorName() string { return "FlashSaleReplyValidationError" }

// Error satisfies the builtin error interface
func (e FlashSaleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlashSaleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlashSaleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlashSaleReplyValidationError{}

// Validate checks the field values on RedisQueryPreparedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedisQueryPreparedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedisQueryPreparedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedisQueryPreparedRequestMultiError, or nil if none found.
func (m *RedisQueryPreparedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RedisQueryPreparedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RedisQueryPreparedRequestMultiError(errors)
	}

	return nil
}

// RedisQueryPreparedRequestMultiError is an error wrapping multiple validation
// errors returned by RedisQueryPreparedRequest.ValidateAll() if the
// designated constraints aren't met.
type RedisQueryPreparedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedisQueryPreparedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedisQueryPreparedRequestMultiError) AllErrors() []error { return m }

// RedisQueryPreparedRequestValidationError is the validation error returned by
// RedisQueryPreparedRequest.Validate if the designated constraints aren't met.
type RedisQueryPreparedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisQueryPreparedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisQueryPreparedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisQueryPreparedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisQueryPreparedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisQueryPreparedRequestValidationError) ErrorName() string {
	return "RedisQueryPreparedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RedisQueryPreparedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedisQueryPreparedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisQueryPreparedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisQueryPreparedRequestValidationError{}

// Validate checks the field values on RedisQueryPreparedReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RedisQueryPreparedReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedisQueryPreparedReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RedisQueryPreparedReplyMultiError, or nil if none found.
func (m *RedisQueryPreparedReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RedisQueryPreparedReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RedisQueryPreparedReplyMultiError(errors)
	}

	return nil
}

// RedisQueryPreparedReplyMultiError is an error wrapping multiple validation
// errors returned by RedisQueryPreparedReply.ValidateAll() if the designated
// constraints aren't met.
type RedisQueryPreparedReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedisQueryPreparedReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedisQueryPreparedReplyMultiError) AllErrors() []error { return m }

// RedisQueryPreparedReplyValidationError is the validation error returned by
// RedisQueryPreparedReply.Validate if the designated constraints aren't met.
type RedisQueryPreparedReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisQueryPreparedReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisQueryPreparedReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisQueryPreparedReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisQueryPreparedReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisQueryPreparedReplyValidationError) ErrorName() string {
	return "RedisQueryPreparedReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RedisQueryPreparedReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedisQueryPreparedReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisQueryPreparedReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisQueryPreparedReplyValidationError{}

// Validate checks the field values on SendSubmitOrderNotifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSubmitOrderNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSubmitOrderNotifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSubmitOrderNotifyRequestMultiError, or nil if none found.
func (m *SendSubmitOrderNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSubmitOrderNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := SendSubmitOrderNotifyRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductID() <= 0 {
		err := SendSubmitOrderNotifyRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductCount() <= 0 {
		err := SendSubmitOrderNotifyRequestValidationError{
			field:  "ProductCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := SendSubmitOrderNotifyRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CouponID

	if len(errors) > 0 {
		return SendSubmitOrderNotifyRequestMultiError(errors)
	}

	return nil
}

// SendSubmitOrderNotifyRequestMultiError is an error wrapping multiple
// validation errors returned by SendSubmitOrderNotifyRequest.ValidateAll() if
// the designated constraints aren't met.
type SendSubmitOrderNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSubmitOrderNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSubmitOrderNotifyRequestMultiError) AllErrors() []error { return m }

// SendSubmitOrderNotifyRequestValidationError is the validation error returned
// by SendSubmitOrderNotifyRequest.Validate if the designated constraints
// aren't met.
type SendSubmitOrderNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSubmitOrderNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSubmitOrderNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSubmitOrderNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSubmitOrderNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSubmitOrderNotifyRequestValidationError) ErrorName() string {
	return "SendSubmitOrderNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendSubmitOrderNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSubmitOrderNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSubmitOrderNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSubmitOrderNotifyRequestValidationError{}

// Validate checks the field values on SendSubmitOrderNotifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSubmitOrderNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSubmitOrderNotifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSubmitOrderNotifyReplyMultiError, or nil if none found.
func (m *SendSubmitOrderNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSubmitOrderNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendSubmitOrderNotifyReplyMultiError(errors)
	}

	return nil
}

// SendSubmitOrderNotifyReplyMultiError is an error wrapping multiple
// validation errors returned by SendSubmitOrderNotifyReply.ValidateAll() if
// the designated constraints aren't met.
type SendSubmitOrderNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSubmitOrderNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSubmitOrderNotifyReplyMultiError) AllErrors() []error { return m }

// SendSubmitOrderNotifyReplyValidationError is the validation error returned
// by SendSubmitOrderNotifyReply.Validate if the designated constraints aren't met.
type SendSubmitOrderNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSubmitOrderNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSubmitOrderNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSubmitOrderNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSubmitOrderNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSubmitOrderNotifyReplyValidationError) ErrorName() string {
	return "SendSubmitOrderNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendSubmitOrderNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSubmitOrderNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSubmitOrderNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSubmitOrderNotifyReplyValidationError{}
