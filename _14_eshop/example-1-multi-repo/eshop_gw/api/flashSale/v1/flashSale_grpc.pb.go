// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/flashSale/v1/flashSale.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlashSale_FlashSale_FullMethodName             = "/api.flashSale.v1.flashSale/FlashSale"
	FlashSale_RedisQueryPrepared_FullMethodName    = "/api.flashSale.v1.flashSale/RedisQueryPrepared"
	FlashSale_SendSubmitOrderNotify_FullMethodName = "/api.flashSale.v1.flashSale/SendSubmitOrderNotify"
)

// FlashSaleClient is the client API for FlashSale service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashSaleClient interface {
	// 秒杀抢购
	FlashSale(ctx context.Context, in *FlashSaleRequest, opts ...grpc.CallOption) (*FlashSaleReply, error)
	// 反查redis数据
	RedisQueryPrepared(ctx context.Context, in *RedisQueryPreparedRequest, opts ...grpc.CallOption) (*RedisQueryPreparedReply, error)
	// 发送提交订单通知
	SendSubmitOrderNotify(ctx context.Context, in *SendSubmitOrderNotifyRequest, opts ...grpc.CallOption) (*SendSubmitOrderNotifyReply, error)
}

type flashSaleClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashSaleClient(cc grpc.ClientConnInterface) FlashSaleClient {
	return &flashSaleClient{cc}
}

func (c *flashSaleClient) FlashSale(ctx context.Context, in *FlashSaleRequest, opts ...grpc.CallOption) (*FlashSaleReply, error) {
	out := new(FlashSaleReply)
	err := c.cc.Invoke(ctx, FlashSale_FlashSale_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleClient) RedisQueryPrepared(ctx context.Context, in *RedisQueryPreparedRequest, opts ...grpc.CallOption) (*RedisQueryPreparedReply, error) {
	out := new(RedisQueryPreparedReply)
	err := c.cc.Invoke(ctx, FlashSale_RedisQueryPrepared_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashSaleClient) SendSubmitOrderNotify(ctx context.Context, in *SendSubmitOrderNotifyRequest, opts ...grpc.CallOption) (*SendSubmitOrderNotifyReply, error) {
	out := new(SendSubmitOrderNotifyReply)
	err := c.cc.Invoke(ctx, FlashSale_SendSubmitOrderNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashSaleServer is the server API for FlashSale service.
// All implementations must embed UnimplementedFlashSaleServer
// for forward compatibility
type FlashSaleServer interface {
	// 秒杀抢购
	FlashSale(context.Context, *FlashSaleRequest) (*FlashSaleReply, error)
	// 反查redis数据
	RedisQueryPrepared(context.Context, *RedisQueryPreparedRequest) (*RedisQueryPreparedReply, error)
	// 发送提交订单通知
	SendSubmitOrderNotify(context.Context, *SendSubmitOrderNotifyRequest) (*SendSubmitOrderNotifyReply, error)
	mustEmbedUnimplementedFlashSaleServer()
}

// UnimplementedFlashSaleServer must be embedded to have forward compatible implementations.
type UnimplementedFlashSaleServer struct {
}

func (UnimplementedFlashSaleServer) FlashSale(context.Context, *FlashSaleRequest) (*FlashSaleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlashSale not implemented")
}
func (UnimplementedFlashSaleServer) RedisQueryPrepared(context.Context, *RedisQueryPreparedRequest) (*RedisQueryPreparedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedisQueryPrepared not implemented")
}
func (UnimplementedFlashSaleServer) SendSubmitOrderNotify(context.Context, *SendSubmitOrderNotifyRequest) (*SendSubmitOrderNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubmitOrderNotify not implemented")
}
func (UnimplementedFlashSaleServer) mustEmbedUnimplementedFlashSaleServer() {}

// UnsafeFlashSaleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashSaleServer will
// result in compilation errors.
type UnsafeFlashSaleServer interface {
	mustEmbedUnimplementedFlashSaleServer()
}

func RegisterFlashSaleServer(s grpc.ServiceRegistrar, srv FlashSaleServer) {
	s.RegisterService(&FlashSale_ServiceDesc, srv)
}

func _FlashSale_FlashSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlashSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServer).FlashSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSale_FlashSale_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServer).FlashSale(ctx, req.(*FlashSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSale_RedisQueryPrepared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisQueryPreparedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServer).RedisQueryPrepared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSale_RedisQueryPrepared_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServer).RedisQueryPrepared(ctx, req.(*RedisQueryPreparedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashSale_SendSubmitOrderNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSubmitOrderNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashSaleServer).SendSubmitOrderNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlashSale_SendSubmitOrderNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashSaleServer).SendSubmitOrderNotify(ctx, req.(*SendSubmitOrderNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlashSale_ServiceDesc is the grpc.ServiceDesc for FlashSale service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlashSale_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.flashSale.v1.flashSale",
	HandlerType: (*FlashSaleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FlashSale",
			Handler:    _FlashSale_FlashSale_Handler,
		},
		{
			MethodName: "RedisQueryPrepared",
			Handler:    _FlashSale_RedisQueryPrepared_Handler,
		},
		{
			MethodName: "SendSubmitOrderNotify",
			Handler:    _FlashSale_SendSubmitOrderNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/flashSale/v1/flashSale.proto",
}
