// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/order/v1/order.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubmitOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitOrderRequestMultiError, or nil if none found.
func (m *SubmitOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := SubmitOrderRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductID() <= 0 {
		err := SubmitOrderRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductCount() <= 0 {
		err := SubmitOrderRequestValidationError{
			field:  "ProductCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := SubmitOrderRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CouponID

	if len(errors) > 0 {
		return SubmitOrderRequestMultiError(errors)
	}

	return nil
}

// SubmitOrderRequestMultiError is an error wrapping multiple validation errors
// returned by SubmitOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type SubmitOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitOrderRequestMultiError) AllErrors() []error { return m }

// SubmitOrderRequestValidationError is the validation error returned by
// SubmitOrderRequest.Validate if the designated constraints aren't met.
type SubmitOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitOrderRequestValidationError) ErrorName() string {
	return "SubmitOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitOrderRequestValidationError{}

// Validate checks the field values on SubmitOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmitOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitOrderReplyMultiError, or nil if none found.
func (m *SubmitOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderID

	if len(errors) > 0 {
		return SubmitOrderReplyMultiError(errors)
	}

	return nil
}

// SubmitOrderReplyMultiError is an error wrapping multiple validation errors
// returned by SubmitOrderReply.ValidateAll() if the designated constraints
// aren't met.
type SubmitOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitOrderReplyMultiError) AllErrors() []error { return m }

// SubmitOrderReplyValidationError is the validation error returned by
// SubmitOrderReply.Validate if the designated constraints aren't met.
type SubmitOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitOrderReplyValidationError) ErrorName() string { return "SubmitOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e SubmitOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitOrderReplyValidationError{}

// Validate checks the field values on SendSubmitOrderNotifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSubmitOrderNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSubmitOrderNotifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSubmitOrderNotifyRequestMultiError, or nil if none found.
func (m *SendSubmitOrderNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSubmitOrderNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := SendSubmitOrderNotifyRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductID() <= 0 {
		err := SendSubmitOrderNotifyRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductCount() <= 0 {
		err := SendSubmitOrderNotifyRequestValidationError{
			field:  "ProductCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := SendSubmitOrderNotifyRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CouponID

	if len(errors) > 0 {
		return SendSubmitOrderNotifyRequestMultiError(errors)
	}

	return nil
}

// SendSubmitOrderNotifyRequestMultiError is an error wrapping multiple
// validation errors returned by SendSubmitOrderNotifyRequest.ValidateAll() if
// the designated constraints aren't met.
type SendSubmitOrderNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSubmitOrderNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSubmitOrderNotifyRequestMultiError) AllErrors() []error { return m }

// SendSubmitOrderNotifyRequestValidationError is the validation error returned
// by SendSubmitOrderNotifyRequest.Validate if the designated constraints
// aren't met.
type SendSubmitOrderNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSubmitOrderNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSubmitOrderNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSubmitOrderNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSubmitOrderNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSubmitOrderNotifyRequestValidationError) ErrorName() string {
	return "SendSubmitOrderNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendSubmitOrderNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSubmitOrderNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSubmitOrderNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSubmitOrderNotifyRequestValidationError{}

// Validate checks the field values on SendSubmitOrderNotifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSubmitOrderNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSubmitOrderNotifyReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSubmitOrderNotifyReplyMultiError, or nil if none found.
func (m *SendSubmitOrderNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSubmitOrderNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendSubmitOrderNotifyReplyMultiError(errors)
	}

	return nil
}

// SendSubmitOrderNotifyReplyMultiError is an error wrapping multiple
// validation errors returned by SendSubmitOrderNotifyReply.ValidateAll() if
// the designated constraints aren't met.
type SendSubmitOrderNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSubmitOrderNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSubmitOrderNotifyReplyMultiError) AllErrors() []error { return m }

// SendSubmitOrderNotifyReplyValidationError is the validation error returned
// by SendSubmitOrderNotifyReply.Validate if the designated constraints aren't met.
type SendSubmitOrderNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSubmitOrderNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSubmitOrderNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSubmitOrderNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSubmitOrderNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSubmitOrderNotifyReplyValidationError) ErrorName() string {
	return "SendSubmitOrderNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SendSubmitOrderNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSubmitOrderNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSubmitOrderNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSubmitOrderNotifyReplyValidationError{}

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderID()) < 16 {
		err := CreateOrderRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserID() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductID() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductCount() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "ProductCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CouponID

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

// Validate checks the field values on CreateOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderReplyMultiError, or nil if none found.
func (m *CreateOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrderReplyMultiError(errors)
	}

	return nil
}

// CreateOrderReplyMultiError is an error wrapping multiple validation errors
// returned by CreateOrderReply.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderReplyMultiError) AllErrors() []error { return m }

// CreateOrderReplyValidationError is the validation error returned by
// CreateOrderReply.Validate if the designated constraints aren't met.
type CreateOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderReplyValidationError) ErrorName() string { return "CreateOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderReplyValidationError{}

// Validate checks the field values on CreateOrderRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRevertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRevertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRevertRequestMultiError, or nil if none found.
func (m *CreateOrderRevertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRevertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrderID()) < 16 {
		err := CreateOrderRevertRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserID() <= 0 {
		err := CreateOrderRevertRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductID() <= 0 {
		err := CreateOrderRevertRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductCount() <= 0 {
		err := CreateOrderRevertRequestValidationError{
			field:  "ProductCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreateOrderRevertRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for CouponID

	if len(errors) > 0 {
		return CreateOrderRevertRequestMultiError(errors)
	}

	return nil
}

// CreateOrderRevertRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrderRevertRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderRevertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRevertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRevertRequestMultiError) AllErrors() []error { return m }

// CreateOrderRevertRequestValidationError is the validation error returned by
// CreateOrderRevertRequest.Validate if the designated constraints aren't met.
type CreateOrderRevertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRevertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRevertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRevertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRevertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRevertRequestValidationError) ErrorName() string {
	return "CreateOrderRevertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRevertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRevertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRevertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRevertRequestValidationError{}

// Validate checks the field values on CreatePayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayRequestMultiError, or nil if none found.
func (m *CreatePayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CreatePayRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderID()) < 16 {
		err := CreatePayRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreatePayRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePayRequestMultiError(errors)
	}

	return nil
}

// CreatePayRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePayRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayRequestMultiError) AllErrors() []error { return m }

// CreatePayRequestValidationError is the validation error returned by
// CreatePayRequest.Validate if the designated constraints aren't met.
type CreatePayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayRequestValidationError) ErrorName() string { return "CreatePayRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreatePayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayRequestValidationError{}

// Validate checks the field values on CreateOrderRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRevertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRevertReplyMultiError, or nil if none found.
func (m *CreateOrderRevertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRevertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateOrderRevertReplyMultiError(errors)
	}

	return nil
}

// CreateOrderRevertReplyMultiError is an error wrapping multiple validation
// errors returned by CreateOrderRevertReply.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderRevertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRevertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRevertReplyMultiError) AllErrors() []error { return m }

// CreateOrderRevertReplyValidationError is the validation error returned by
// CreateOrderRevertReply.Validate if the designated constraints aren't met.
type CreateOrderRevertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRevertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRevertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRevertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRevertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRevertReplyValidationError) ErrorName() string {
	return "CreateOrderRevertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRevertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRevertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRevertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRevertReplyValidationError{}

// Validate checks the field values on CouponUseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouponUseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponUseRequestMultiError, or nil if none found.
func (m *CouponUseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCouponID() <= 0 {
		err := CouponUseRequestValidationError{
			field:  "CouponID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CouponUseRequestMultiError(errors)
	}

	return nil
}

// CouponUseRequestMultiError is an error wrapping multiple validation errors
// returned by CouponUseRequest.ValidateAll() if the designated constraints
// aren't met.
type CouponUseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseRequestMultiError) AllErrors() []error { return m }

// CouponUseRequestValidationError is the validation error returned by
// CouponUseRequest.Validate if the designated constraints aren't met.
type CouponUseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseRequestValidationError) ErrorName() string { return "CouponUseRequestValidationError" }

// Error satisfies the builtin error interface
func (e CouponUseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseRequestValidationError{}

// Validate checks the field values on StockDeductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StockDeductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockDeductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StockDeductRequestMultiError, or nil if none found.
func (m *StockDeductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StockDeductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductID() <= 0 {
		err := StockDeductRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductCount() <= 0 {
		err := StockDeductRequestValidationError{
			field:  "ProductCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StockDeductRequestMultiError(errors)
	}

	return nil
}

// StockDeductRequestMultiError is an error wrapping multiple validation errors
// returned by StockDeductRequest.ValidateAll() if the designated constraints
// aren't met.
type StockDeductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockDeductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockDeductRequestMultiError) AllErrors() []error { return m }

// StockDeductRequestValidationError is the validation error returned by
// StockDeductRequest.Validate if the designated constraints aren't met.
type StockDeductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockDeductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockDeductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockDeductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockDeductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockDeductRequestValidationError) ErrorName() string {
	return "StockDeductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StockDeductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockDeductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockDeductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockDeductRequestValidationError{}

// Validate checks the field values on DeleteOrderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderByIDRequestMultiError, or nil if none found.
func (m *DeleteOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOrderByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteOrderByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrderByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderByIDRequestMultiError) AllErrors() []error { return m }

// DeleteOrderByIDRequestValidationError is the validation error returned by
// DeleteOrderByIDRequest.Validate if the designated constraints aren't met.
type DeleteOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderByIDRequestValidationError) ErrorName() string {
	return "DeleteOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderByIDRequestValidationError{}

// Validate checks the field values on DeleteOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrderByIDReplyMultiError, or nil if none found.
func (m *DeleteOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrderByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteOrderByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteOrderByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrderByIDReplyMultiError) AllErrors() []error { return m }

// DeleteOrderByIDReplyValidationError is the validation error returned by
// DeleteOrderByIDReply.Validate if the designated constraints aren't met.
type DeleteOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrderByIDReplyValidationError) ErrorName() string {
	return "DeleteOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrderByIDReplyValidationError{}

// Validate checks the field values on UpdateOrderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderByIDRequestMultiError, or nil if none found.
func (m *UpdateOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrderID

	// no validation rules for UserID

	// no validation rules for ProductID

	// no validation rules for ProductCount

	// no validation rules for Amount

	// no validation rules for CouponID

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateOrderByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateOrderByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderByIDRequestMultiError) AllErrors() []error { return m }

// UpdateOrderByIDRequestValidationError is the validation error returned by
// UpdateOrderByIDRequest.Validate if the designated constraints aren't met.
type UpdateOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderByIDRequestValidationError) ErrorName() string {
	return "UpdateOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderByIDRequestValidationError{}

// Validate checks the field values on UpdateOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderByIDReplyMultiError, or nil if none found.
func (m *UpdateOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateOrderByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateOrderByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderByIDReplyMultiError) AllErrors() []error { return m }

// UpdateOrderByIDReplyValidationError is the validation error returned by
// UpdateOrderByIDReply.Validate if the designated constraints aren't met.
type UpdateOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderByIDReplyValidationError) ErrorName() string {
	return "UpdateOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderByIDReplyValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for OrderID

	// no validation rules for UserID

	// no validation rules for ProductID

	// no validation rules for ProductCount

	// no validation rules for Amount

	// no validation rules for CouponID

	// no validation rules for Status

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on GetOrderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrderByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderByIDRequestMultiError, or nil if none found.
func (m *GetOrderByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetOrderByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderByIDRequestMultiError(errors)
	}

	return nil
}

// GetOrderByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrderByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrderByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderByIDRequestMultiError) AllErrors() []error { return m }

// GetOrderByIDRequestValidationError is the validation error returned by
// GetOrderByIDRequest.Validate if the designated constraints aren't met.
type GetOrderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByIDRequestValidationError) ErrorName() string {
	return "GetOrderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByIDRequestValidationError{}

// Validate checks the field values on GetOrderByIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderByIDReplyMultiError, or nil if none found.
func (m *GetOrderByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderByIDReplyValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderByIDReplyValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderByIDReplyValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrderByIDReplyMultiError(errors)
	}

	return nil
}

// GetOrderByIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetOrderByIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetOrderByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderByIDReplyMultiError) AllErrors() []error { return m }

// GetOrderByIDReplyValidationError is the validation error returned by
// GetOrderByIDReply.Validate if the designated constraints aren't met.
type GetOrderByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderByIDReplyValidationError) ErrorName() string {
	return "GetOrderByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrderByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderByIDReplyValidationError{}

// Validate checks the field values on ListOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrderRequestMultiError, or nil if none found.
func (m *ListOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListOrderRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrderRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListOrderRequestMultiError(errors)
	}

	return nil
}

// ListOrderRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderRequestMultiError) AllErrors() []error { return m }

// ListOrderRequestValidationError is the validation error returned by
// ListOrderRequest.Validate if the designated constraints aren't met.
type ListOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderRequestValidationError) ErrorName() string { return "ListOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderRequestValidationError{}

// Validate checks the field values on ListOrderReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOrderReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrderReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOrderReplyMultiError,
// or nil if none found.
func (m *ListOrderReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrderReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrderReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrderReplyValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrderReplyValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListOrderReplyMultiError(errors)
	}

	return nil
}

// ListOrderReplyMultiError is an error wrapping multiple validation errors
// returned by ListOrderReply.ValidateAll() if the designated constraints
// aren't met.
type ListOrderReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrderReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrderReplyMultiError) AllErrors() []error { return m }

// ListOrderReplyValidationError is the validation error returned by
// ListOrderReply.Validate if the designated constraints aren't met.
type ListOrderReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrderReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrderReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrderReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrderReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrderReplyValidationError) ErrorName() string { return "ListOrderReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListOrderReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrderReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrderReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrderReplyValidationError{}
