// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/stock/v1/stock.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StockDeductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StockDeductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockDeductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StockDeductRequestMultiError, or nil if none found.
func (m *StockDeductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StockDeductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductID() <= 0 {
		err := StockDeductRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductCount() <= 0 {
		err := StockDeductRequestValidationError{
			field:  "ProductCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StockDeductRequestMultiError(errors)
	}

	return nil
}

// StockDeductRequestMultiError is an error wrapping multiple validation errors
// returned by StockDeductRequest.ValidateAll() if the designated constraints
// aren't met.
type StockDeductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockDeductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockDeductRequestMultiError) AllErrors() []error { return m }

// StockDeductRequestValidationError is the validation error returned by
// StockDeductRequest.Validate if the designated constraints aren't met.
type StockDeductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockDeductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockDeductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockDeductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockDeductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockDeductRequestValidationError) ErrorName() string {
	return "StockDeductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StockDeductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockDeductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockDeductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockDeductRequestValidationError{}

// Validate checks the field values on StockDeductReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StockDeductReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockDeductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StockDeductReplyMultiError, or nil if none found.
func (m *StockDeductReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StockDeductReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StockDeductReplyMultiError(errors)
	}

	return nil
}

// StockDeductReplyMultiError is an error wrapping multiple validation errors
// returned by StockDeductReply.ValidateAll() if the designated constraints
// aren't met.
type StockDeductReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockDeductReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockDeductReplyMultiError) AllErrors() []error { return m }

// StockDeductReplyValidationError is the validation error returned by
// StockDeductReply.Validate if the designated constraints aren't met.
type StockDeductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockDeductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockDeductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockDeductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockDeductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockDeductReplyValidationError) ErrorName() string { return "StockDeductReplyValidationError" }

// Error satisfies the builtin error interface
func (e StockDeductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockDeductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockDeductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockDeductReplyValidationError{}

// Validate checks the field values on StockDeductRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StockDeductRevertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockDeductRevertRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StockDeductRevertRequestMultiError, or nil if none found.
func (m *StockDeductRevertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StockDeductRevertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProductID() <= 0 {
		err := StockDeductRevertRequestValidationError{
			field:  "ProductID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetProductCount() <= 0 {
		err := StockDeductRevertRequestValidationError{
			field:  "ProductCount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StockDeductRevertRequestMultiError(errors)
	}

	return nil
}

// StockDeductRevertRequestMultiError is an error wrapping multiple validation
// errors returned by StockDeductRevertRequest.ValidateAll() if the designated
// constraints aren't met.
type StockDeductRevertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockDeductRevertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockDeductRevertRequestMultiError) AllErrors() []error { return m }

// StockDeductRevertRequestValidationError is the validation error returned by
// StockDeductRevertRequest.Validate if the designated constraints aren't met.
type StockDeductRevertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockDeductRevertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockDeductRevertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockDeductRevertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockDeductRevertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockDeductRevertRequestValidationError) ErrorName() string {
	return "StockDeductRevertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StockDeductRevertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockDeductRevertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockDeductRevertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockDeductRevertRequestValidationError{}

// Validate checks the field values on StockDeductRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StockDeductRevertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StockDeductRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StockDeductRevertReplyMultiError, or nil if none found.
func (m *StockDeductRevertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *StockDeductRevertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StockDeductRevertReplyMultiError(errors)
	}

	return nil
}

// StockDeductRevertReplyMultiError is an error wrapping multiple validation
// errors returned by StockDeductRevertReply.ValidateAll() if the designated
// constraints aren't met.
type StockDeductRevertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockDeductRevertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockDeductRevertReplyMultiError) AllErrors() []error { return m }

// StockDeductRevertReplyValidationError is the validation error returned by
// StockDeductRevertReply.Validate if the designated constraints aren't met.
type StockDeductRevertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockDeductRevertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockDeductRevertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockDeductRevertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockDeductRevertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockDeductRevertReplyValidationError) ErrorName() string {
	return "StockDeductRevertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e StockDeductRevertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStockDeductRevertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockDeductRevertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockDeductRevertReplyValidationError{}

// Validate checks the field values on SetFlashSaleStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetFlashSaleStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFlashSaleStockRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetFlashSaleStockRequestMultiError, or nil if none found.
func (m *SetFlashSaleStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFlashSaleStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductID

	// no validation rules for Stock

	if len(errors) > 0 {
		return SetFlashSaleStockRequestMultiError(errors)
	}

	return nil
}

// SetFlashSaleStockRequestMultiError is an error wrapping multiple validation
// errors returned by SetFlashSaleStockRequest.ValidateAll() if the designated
// constraints aren't met.
type SetFlashSaleStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFlashSaleStockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFlashSaleStockRequestMultiError) AllErrors() []error { return m }

// SetFlashSaleStockRequestValidationError is the validation error returned by
// SetFlashSaleStockRequest.Validate if the designated constraints aren't met.
type SetFlashSaleStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFlashSaleStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFlashSaleStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFlashSaleStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFlashSaleStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFlashSaleStockRequestValidationError) ErrorName() string {
	return "SetFlashSaleStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetFlashSaleStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFlashSaleStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFlashSaleStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFlashSaleStockRequestValidationError{}

// Validate checks the field values on SetFlashSaleStockReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetFlashSaleStockReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetFlashSaleStockReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetFlashSaleStockReplyMultiError, or nil if none found.
func (m *SetFlashSaleStockReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SetFlashSaleStockReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetFlashSaleStockReplyMultiError(errors)
	}

	return nil
}

// SetFlashSaleStockReplyMultiError is an error wrapping multiple validation
// errors returned by SetFlashSaleStockReply.ValidateAll() if the designated
// constraints aren't met.
type SetFlashSaleStockReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetFlashSaleStockReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetFlashSaleStockReplyMultiError) AllErrors() []error { return m }

// SetFlashSaleStockReplyValidationError is the validation error returned by
// SetFlashSaleStockReply.Validate if the designated constraints aren't met.
type SetFlashSaleStockReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetFlashSaleStockReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetFlashSaleStockReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetFlashSaleStockReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetFlashSaleStockReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetFlashSaleStockReplyValidationError) ErrorName() string {
	return "SetFlashSaleStockReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SetFlashSaleStockReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetFlashSaleStockReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetFlashSaleStockReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetFlashSaleStockReplyValidationError{}

// Validate checks the field values on CreateStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStockRequestMultiError, or nil if none found.
func (m *CreateStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductID

	// no validation rules for Stock

	if len(errors) > 0 {
		return CreateStockRequestMultiError(errors)
	}

	return nil
}

// CreateStockRequestMultiError is an error wrapping multiple validation errors
// returned by CreateStockRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStockRequestMultiError) AllErrors() []error { return m }

// CreateStockRequestValidationError is the validation error returned by
// CreateStockRequest.Validate if the designated constraints aren't met.
type CreateStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStockRequestValidationError) ErrorName() string {
	return "CreateStockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStockRequestValidationError{}

// Validate checks the field values on CreateStockReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateStockReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStockReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStockReplyMultiError, or nil if none found.
func (m *CreateStockReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStockReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateStockReplyMultiError(errors)
	}

	return nil
}

// CreateStockReplyMultiError is an error wrapping multiple validation errors
// returned by CreateStockReply.ValidateAll() if the designated constraints
// aren't met.
type CreateStockReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStockReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStockReplyMultiError) AllErrors() []error { return m }

// CreateStockReplyValidationError is the validation error returned by
// CreateStockReply.Validate if the designated constraints aren't met.
type CreateStockReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStockReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStockReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStockReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStockReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStockReplyValidationError) ErrorName() string { return "CreateStockReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateStockReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStockReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStockReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStockReplyValidationError{}

// Validate checks the field values on DeleteStockByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStockByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStockByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStockByIDRequestMultiError, or nil if none found.
func (m *DeleteStockByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStockByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteStockByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteStockByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteStockByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteStockByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteStockByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStockByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStockByIDRequestMultiError) AllErrors() []error { return m }

// DeleteStockByIDRequestValidationError is the validation error returned by
// DeleteStockByIDRequest.Validate if the designated constraints aren't met.
type DeleteStockByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStockByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStockByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStockByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStockByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStockByIDRequestValidationError) ErrorName() string {
	return "DeleteStockByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStockByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStockByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStockByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStockByIDRequestValidationError{}

// Validate checks the field values on DeleteStockByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStockByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStockByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStockByIDReplyMultiError, or nil if none found.
func (m *DeleteStockByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStockByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteStockByIDReplyMultiError(errors)
	}

	return nil
}

// DeleteStockByIDReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteStockByIDReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteStockByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStockByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStockByIDReplyMultiError) AllErrors() []error { return m }

// DeleteStockByIDReplyValidationError is the validation error returned by
// DeleteStockByIDReply.Validate if the designated constraints aren't met.
type DeleteStockByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStockByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStockByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStockByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStockByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStockByIDReplyValidationError) ErrorName() string {
	return "DeleteStockByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStockByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStockByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStockByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStockByIDReplyValidationError{}

// Validate checks the field values on UpdateStockByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStockByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStockByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStockByIDRequestMultiError, or nil if none found.
func (m *UpdateStockByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStockByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductID

	// no validation rules for Stock

	if len(errors) > 0 {
		return UpdateStockByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateStockByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStockByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStockByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStockByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStockByIDRequestMultiError) AllErrors() []error { return m }

// UpdateStockByIDRequestValidationError is the validation error returned by
// UpdateStockByIDRequest.Validate if the designated constraints aren't met.
type UpdateStockByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStockByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStockByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStockByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStockByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStockByIDRequestValidationError) ErrorName() string {
	return "UpdateStockByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStockByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStockByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStockByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStockByIDRequestValidationError{}

// Validate checks the field values on UpdateStockByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStockByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStockByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStockByIDReplyMultiError, or nil if none found.
func (m *UpdateStockByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStockByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStockByIDReplyMultiError(errors)
	}

	return nil
}

// UpdateStockByIDReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateStockByIDReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateStockByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStockByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStockByIDReplyMultiError) AllErrors() []error { return m }

// UpdateStockByIDReplyValidationError is the validation error returned by
// UpdateStockByIDReply.Validate if the designated constraints aren't met.
type UpdateStockByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStockByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStockByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStockByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStockByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStockByIDReplyValidationError) ErrorName() string {
	return "UpdateStockByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStockByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStockByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStockByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStockByIDReplyValidationError{}

// Validate checks the field values on Stock with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stock with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StockMultiError, or nil if none found.
func (m *Stock) ValidateAll() error {
	return m.validate(true)
}

func (m *Stock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductID

	// no validation rules for Stock

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return StockMultiError(errors)
	}

	return nil
}

// StockMultiError is an error wrapping multiple validation errors returned by
// Stock.ValidateAll() if the designated constraints aren't met.
type StockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StockMultiError) AllErrors() []error { return m }

// StockValidationError is the validation error returned by Stock.Validate if
// the designated constraints aren't met.
type StockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StockValidationError) ErrorName() string { return "StockValidationError" }

// Error satisfies the builtin error interface
func (e StockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StockValidationError{}

// Validate checks the field values on GetStockByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStockByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStockByIDRequestMultiError, or nil if none found.
func (m *GetStockByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetStockByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStockByIDRequestMultiError(errors)
	}

	return nil
}

// GetStockByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetStockByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStockByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockByIDRequestMultiError) AllErrors() []error { return m }

// GetStockByIDRequestValidationError is the validation error returned by
// GetStockByIDRequest.Validate if the designated constraints aren't met.
type GetStockByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockByIDRequestValidationError) ErrorName() string {
	return "GetStockByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStockByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockByIDRequestValidationError{}

// Validate checks the field values on GetStockByIDReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStockByIDReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStockByIDReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStockByIDReplyMultiError, or nil if none found.
func (m *GetStockByIDReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStockByIDReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStock()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStockByIDReplyValidationError{
					field:  "Stock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStockByIDReplyValidationError{
					field:  "Stock",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStock()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStockByIDReplyValidationError{
				field:  "Stock",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStockByIDReplyMultiError(errors)
	}

	return nil
}

// GetStockByIDReplyMultiError is an error wrapping multiple validation errors
// returned by GetStockByIDReply.ValidateAll() if the designated constraints
// aren't met.
type GetStockByIDReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStockByIDReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStockByIDReplyMultiError) AllErrors() []error { return m }

// GetStockByIDReplyValidationError is the validation error returned by
// GetStockByIDReply.Validate if the designated constraints aren't met.
type GetStockByIDReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStockByIDReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStockByIDReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStockByIDReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStockByIDReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStockByIDReplyValidationError) ErrorName() string {
	return "GetStockByIDReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetStockByIDReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStockByIDReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStockByIDReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStockByIDReplyValidationError{}

// Validate checks the field values on ListStockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListStockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStockRequestMultiError, or nil if none found.
func (m *ListStockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStockRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStockRequestValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStockRequestValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListStockRequestMultiError(errors)
	}

	return nil
}

// ListStockRequestMultiError is an error wrapping multiple validation errors
// returned by ListStockRequest.ValidateAll() if the designated constraints
// aren't met.
type ListStockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStockRequestMultiError) AllErrors() []error { return m }

// ListStockRequestValidationError is the validation error returned by
// ListStockRequest.Validate if the designated constraints aren't met.
type ListStockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStockRequestValidationError) ErrorName() string { return "ListStockRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListStockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStockRequestValidationError{}

// Validate checks the field values on ListStockReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListStockReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStockReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListStockReplyMultiError,
// or nil if none found.
func (m *ListStockReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStockReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetStocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStockReplyValidationError{
						field:  fmt.Sprintf("Stocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStockReplyValidationError{
						field:  fmt.Sprintf("Stocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStockReplyValidationError{
					field:  fmt.Sprintf("Stocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStockReplyMultiError(errors)
	}

	return nil
}

// ListStockReplyMultiError is an error wrapping multiple validation errors
// returned by ListStockReply.ValidateAll() if the designated constraints
// aren't met.
type ListStockReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStockReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStockReplyMultiError) AllErrors() []error { return m }

// ListStockReplyValidationError is the validation error returned by
// ListStockReply.Validate if the designated constraints aren't met.
type ListStockReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStockReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStockReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStockReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStockReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStockReplyValidationError) ErrorName() string { return "ListStockReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListStockReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStockReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStockReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStockReplyValidationError{}
