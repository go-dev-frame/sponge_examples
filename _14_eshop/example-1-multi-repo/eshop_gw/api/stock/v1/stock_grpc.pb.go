// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: api/stock/v1/stock.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Stock_StockDeduct_FullMethodName       = "/api.stock.v1.stock/StockDeduct"
	Stock_StockDeductRevert_FullMethodName = "/api.stock.v1.stock/StockDeductRevert"
	Stock_SetFlashSaleStock_FullMethodName = "/api.stock.v1.stock/SetFlashSaleStock"
	Stock_Create_FullMethodName            = "/api.stock.v1.stock/Create"
	Stock_DeleteByID_FullMethodName        = "/api.stock.v1.stock/DeleteByID"
	Stock_UpdateByID_FullMethodName        = "/api.stock.v1.stock/UpdateByID"
	Stock_GetByID_FullMethodName           = "/api.stock.v1.stock/GetByID"
	Stock_List_FullMethodName              = "/api.stock.v1.stock/List"
)

// StockClient is the client API for Stock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockClient interface {
	// 扣减库存
	StockDeduct(ctx context.Context, in *StockDeductRequest, opts ...grpc.CallOption) (*StockDeductReply, error)
	// 补偿库存
	StockDeductRevert(ctx context.Context, in *StockDeductRevertRequest, opts ...grpc.CallOption) (*StockDeductRevertReply, error)
	// 设置秒杀产品的库存，直接更新DB和缓存，这里没有使用dtm+rockscache缓存一致性方案，主要原因是与flashSale服务使用dtm+rockscache操作redis的key相同，会产生冲突。
	SetFlashSaleStock(ctx context.Context, in *SetFlashSaleStockRequest, opts ...grpc.CallOption) (*SetFlashSaleStockReply, error)
	// create stock
	Create(ctx context.Context, in *CreateStockRequest, opts ...grpc.CallOption) (*CreateStockReply, error)
	// delete stock by id
	DeleteByID(ctx context.Context, in *DeleteStockByIDRequest, opts ...grpc.CallOption) (*DeleteStockByIDReply, error)
	// update stock by id
	UpdateByID(ctx context.Context, in *UpdateStockByIDRequest, opts ...grpc.CallOption) (*UpdateStockByIDReply, error)
	// get stock by id
	GetByID(ctx context.Context, in *GetStockByIDRequest, opts ...grpc.CallOption) (*GetStockByIDReply, error)
	// list of stock by query parameters
	List(ctx context.Context, in *ListStockRequest, opts ...grpc.CallOption) (*ListStockReply, error)
}

type stockClient struct {
	cc grpc.ClientConnInterface
}

func NewStockClient(cc grpc.ClientConnInterface) StockClient {
	return &stockClient{cc}
}

func (c *stockClient) StockDeduct(ctx context.Context, in *StockDeductRequest, opts ...grpc.CallOption) (*StockDeductReply, error) {
	out := new(StockDeductReply)
	err := c.cc.Invoke(ctx, Stock_StockDeduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockDeductRevert(ctx context.Context, in *StockDeductRevertRequest, opts ...grpc.CallOption) (*StockDeductRevertReply, error) {
	out := new(StockDeductRevertReply)
	err := c.cc.Invoke(ctx, Stock_StockDeductRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) SetFlashSaleStock(ctx context.Context, in *SetFlashSaleStockRequest, opts ...grpc.CallOption) (*SetFlashSaleStockReply, error) {
	out := new(SetFlashSaleStockReply)
	err := c.cc.Invoke(ctx, Stock_SetFlashSaleStock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) Create(ctx context.Context, in *CreateStockRequest, opts ...grpc.CallOption) (*CreateStockReply, error) {
	out := new(CreateStockReply)
	err := c.cc.Invoke(ctx, Stock_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) DeleteByID(ctx context.Context, in *DeleteStockByIDRequest, opts ...grpc.CallOption) (*DeleteStockByIDReply, error) {
	out := new(DeleteStockByIDReply)
	err := c.cc.Invoke(ctx, Stock_DeleteByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) UpdateByID(ctx context.Context, in *UpdateStockByIDRequest, opts ...grpc.CallOption) (*UpdateStockByIDReply, error) {
	out := new(UpdateStockByIDReply)
	err := c.cc.Invoke(ctx, Stock_UpdateByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) GetByID(ctx context.Context, in *GetStockByIDRequest, opts ...grpc.CallOption) (*GetStockByIDReply, error) {
	out := new(GetStockByIDReply)
	err := c.cc.Invoke(ctx, Stock_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) List(ctx context.Context, in *ListStockRequest, opts ...grpc.CallOption) (*ListStockReply, error) {
	out := new(ListStockReply)
	err := c.cc.Invoke(ctx, Stock_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServer is the server API for Stock service.
// All implementations must embed UnimplementedStockServer
// for forward compatibility
type StockServer interface {
	// 扣减库存
	StockDeduct(context.Context, *StockDeductRequest) (*StockDeductReply, error)
	// 补偿库存
	StockDeductRevert(context.Context, *StockDeductRevertRequest) (*StockDeductRevertReply, error)
	// 设置秒杀产品的库存，直接更新DB和缓存，这里没有使用dtm+rockscache缓存一致性方案，主要原因是与flashSale服务使用dtm+rockscache操作redis的key相同，会产生冲突。
	SetFlashSaleStock(context.Context, *SetFlashSaleStockRequest) (*SetFlashSaleStockReply, error)
	// create stock
	Create(context.Context, *CreateStockRequest) (*CreateStockReply, error)
	// delete stock by id
	DeleteByID(context.Context, *DeleteStockByIDRequest) (*DeleteStockByIDReply, error)
	// update stock by id
	UpdateByID(context.Context, *UpdateStockByIDRequest) (*UpdateStockByIDReply, error)
	// get stock by id
	GetByID(context.Context, *GetStockByIDRequest) (*GetStockByIDReply, error)
	// list of stock by query parameters
	List(context.Context, *ListStockRequest) (*ListStockReply, error)
	mustEmbedUnimplementedStockServer()
}

// UnimplementedStockServer must be embedded to have forward compatible implementations.
type UnimplementedStockServer struct {
}

func (UnimplementedStockServer) StockDeduct(context.Context, *StockDeductRequest) (*StockDeductReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockDeduct not implemented")
}
func (UnimplementedStockServer) StockDeductRevert(context.Context, *StockDeductRevertRequest) (*StockDeductRevertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockDeductRevert not implemented")
}
func (UnimplementedStockServer) SetFlashSaleStock(context.Context, *SetFlashSaleStockRequest) (*SetFlashSaleStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFlashSaleStock not implemented")
}
func (UnimplementedStockServer) Create(context.Context, *CreateStockRequest) (*CreateStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStockServer) DeleteByID(context.Context, *DeleteStockByIDRequest) (*DeleteStockByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedStockServer) UpdateByID(context.Context, *UpdateStockByIDRequest) (*UpdateStockByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedStockServer) GetByID(context.Context, *GetStockByIDRequest) (*GetStockByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedStockServer) List(context.Context, *ListStockRequest) (*ListStockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStockServer) mustEmbedUnimplementedStockServer() {}

// UnsafeStockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServer will
// result in compilation errors.
type UnsafeStockServer interface {
	mustEmbedUnimplementedStockServer()
}

func RegisterStockServer(s grpc.ServiceRegistrar, srv StockServer) {
	s.RegisterService(&Stock_ServiceDesc, srv)
}

func _Stock_StockDeduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockDeductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockDeduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stock_StockDeduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockDeduct(ctx, req.(*StockDeductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockDeductRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockDeductRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockDeductRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stock_StockDeductRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockDeductRevert(ctx, req.(*StockDeductRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_SetFlashSaleStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFlashSaleStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).SetFlashSaleStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stock_SetFlashSaleStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).SetFlashSaleStock(ctx, req.(*SetFlashSaleStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stock_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).Create(ctx, req.(*CreateStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStockByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stock_DeleteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).DeleteByID(ctx, req.(*DeleteStockByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStockByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stock_UpdateByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).UpdateByID(ctx, req.(*UpdateStockByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stock_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).GetByID(ctx, req.(*GetStockByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stock_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).List(ctx, req.(*ListStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stock_ServiceDesc is the grpc.ServiceDesc for Stock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.stock.v1.stock",
	HandlerType: (*StockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StockDeduct",
			Handler:    _Stock_StockDeduct_Handler,
		},
		{
			MethodName: "StockDeductRevert",
			Handler:    _Stock_StockDeductRevert_Handler,
		},
		{
			MethodName: "SetFlashSaleStock",
			Handler:    _Stock_SetFlashSaleStock_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Stock_Create_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _Stock_DeleteByID_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _Stock_UpdateByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Stock_GetByID_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Stock_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/stock/v1/stock.proto",
}
