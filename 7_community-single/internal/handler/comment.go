// Code generated by https://github.com/zhufuyi/sponge

package handler

import (
	"context"
	"errors"

	communityV1 "community/api/community/v1"
	"community/internal/cache"
	"community/internal/dao"
	"community/internal/ecode"
	"community/internal/model"

	"github.com/zhufuyi/sponge/pkg/gin/middleware"
	"github.com/zhufuyi/sponge/pkg/logger"
	"github.com/zhufuyi/sponge/pkg/mysql/query"

	"github.com/jinzhu/copier"
)

var _ communityV1.CommentServiceLogicer = (*commentServiceHandler)(nil)

type commentServiceHandler struct {
	postDao           dao.PostDao
	commentDao        dao.CommentDao
	commentContentDao dao.CommentContentDao
	commentHotDao     dao.CommentHotDao
	commentLatestDao  dao.CommentLatestDao
	userCommentDao    dao.UserCommentDao
}

// NewCommentServiceHandler create a handler
func NewCommentServiceHandler() communityV1.CommentServiceLogicer {
	return &commentServiceHandler{
		postDao: dao.NewPostDao(
			model.GetDB(),
			cache.NewPostCache(model.GetCacheType()),
		),
		commentDao: dao.NewCommentDao(
			model.GetDB(),
			cache.NewCommentCache(model.GetCacheType()),
		),
		commentContentDao: dao.NewCommentContentDao(
			model.GetDB(),
			cache.NewCommentContentCache(model.GetCacheType()),
		),
		commentHotDao: dao.NewCommentHotDao(
			model.GetDB(),
			cache.NewCommentHotCache(model.GetCacheType()),
		),
		commentLatestDao: dao.NewCommentLatestDao(
			model.GetDB(),
			cache.NewCommentLatestCache(model.GetCacheType()),
		),
		userCommentDao: dao.NewUserCommentDao(
			model.GetDB(),
			cache.NewUserCommentCache(model.GetCacheType()),
		),
	}
}

// Create 创建评论
func (h *commentServiceHandler) Create(ctx context.Context, req *communityV1.CreateCommentRequest) (*communityV1.CreateCommentReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 判断post是否存在
	_, err = h.postDao.GetByID(ctx, req.PostId)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.postDao.GetByID error", logger.Err(err), logger.Uint64("id", req.PostId), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.postDao.GetByID error", logger.Err(err), logger.Uint64("id", req.PostId), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 创建评论
	comment := &model.Comment{
		PostID:  req.PostId,
		UserID:  req.UserId,
		DelFlag: delFlagNormal,
	}
	commentID, err := h.commentDao.CreateByTx(ctx, tx, comment)
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentDao.CreateByTx error", logger.Err(err), logger.Any("comment", comment), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 创建评论内容
	commentContent := &model.CommentContent{
		CommentID:  commentID,
		Content:    req.Content,
		DeviceType: req.DeviceType,
		IP:         req.Ip,
	}
	_, err = h.commentContentDao.CreateByTx(ctx, tx, commentContent)
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentContentDao.CreateByTx error", logger.Err(err), logger.Any("commentContent", commentContent), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 创建最新评论
	commentLatest := &model.CommentLatest{
		UserID:    req.UserId,
		CommentID: commentID,
		PostID:    req.PostId,
		DelFlag:   delFlagNormal,
	}
	_, err = h.commentLatestDao.CreateByTx(ctx, tx, commentLatest)
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentLatestDao.CreateByTx error", logger.Err(err), logger.Any("commentLatest", commentLatest), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 创建热门评论
	commentHot := &model.CommentHot{
		UserID:    req.UserId,
		CommentID: commentID,
		PostID:    req.PostId,
		DelFlag:   delFlagNormal,
	}
	_, err = h.commentHotDao.CreateByTx(ctx, tx, commentHot)
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentHotDao.CreateByTx error", logger.Err(err), logger.Any("commentHot", commentHot), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 创建用户个人评论
	userComment := &model.UserComment{
		CommentID: commentID,
		UserID:    req.UserId,
		DelFlag:   delFlagNormal,
	}
	_, err = h.userCommentDao.CreateByTx(ctx, tx, userComment)
	if err != nil {
		tx.Rollback()
		logger.Error("h.userCommentDao.CreateByTx error", logger.Err(err), logger.Any("userComment", userComment), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 评论数+1
	err = h.postDao.IncrCommentCountByTx(ctx, tx, req.PostId)
	if err != nil {
		tx.Rollback()
		logger.Error("h.postDao.IncrCommentCountByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	commentInfo, err := convertComment(comment, commentContent)
	if err != nil {
		return nil, err
	}

	return &communityV1.CreateCommentReply{Comment: commentInfo}, nil
}

// DeleteByID 删除评论
func (h *commentServiceHandler) DeleteByID(ctx context.Context, req *communityV1.DeleteCommentByIDRequest) (*communityV1.DeleteCommentByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 判断评论是否存在
	comment, err := h.commentDao.GetByID(ctx, req.Id)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	if comment.UserID != req.UserId {
		logger.Error("only delete your own comment", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.Forbidden.Err()
	}
	if comment.DelFlag > 0 {
		return &communityV1.DeleteCommentByIDReply{}, nil
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 删除评论
	err = h.commentDao.DeleteByTx(ctx, tx, req.Id, int(req.DelFlag))
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 删除评论内容
	err = h.commentContentDao.DeleteByTx(ctx, tx, req.Id)
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentContentDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 删除最新评论
	err = h.commentLatestDao.DeleteByTx(ctx, tx, req.Id, int(req.DelFlag))
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentLatestDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 删除热门评论
	err = h.commentHotDao.DeleteByTx(ctx, tx, req.Id, int(req.DelFlag))
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentHotDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 删除用户个人评论
	err = h.userCommentDao.DeleteByTx(ctx, tx, req.Id, int(req.DelFlag))
	if err != nil {
		tx.Rollback()
		logger.Error("h.userCommentDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 评论数-1
	err = h.postDao.DecrCommentCountByTx(ctx, tx, comment.PostID)
	if err != nil {
		tx.Rollback()
		logger.Error("h.postDao.DecrCommentCountByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.DeleteCommentByIDReply{}, nil
}

// UpdateByID 更新评论
func (h *commentServiceHandler) UpdateByID(ctx context.Context, req *communityV1.UpdateCommentByIDRequest) (*communityV1.UpdateCommentByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	commentComment, err := h.commentContentDao.GetByCommentID(ctx, req.Id)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	commentComment.Content = req.Content
	err = h.commentContentDao.UpdateByID(ctx, commentComment)
	if err != nil {
		logger.Error("h.commentContentDao.UpdateByID error", logger.Err(err), logger.Any("commentComment", commentComment), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.UpdateCommentByIDReply{}, nil
}

// Reply 回复评论
func (h *commentServiceHandler) Reply(ctx context.Context, req *communityV1.ReplyCommentRequest) (*communityV1.ReplyCommentReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 判断评论是否存在
	commentInfo, err := h.commentDao.GetByID(ctx, req.CommentId)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("id", req.CommentId), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.commentDao.GetByID error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	if commentInfo.ParentID > 0 {
		logger.Error("re-commenting on replied comments is prohibited", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.ErrReCommentService.Err()
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 创建回复评论
	comment := &model.Comment{
		PostID:   commentInfo.PostID,
		ParentID: req.CommentId,
		UserID:   req.UserId,
		DelFlag:  delFlagNormal,
	}
	commentID, err := h.commentDao.CreateByTx(ctx, tx, comment)
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentDao.CreateByTx error", logger.Err(err), logger.Any("comment", comment), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 创建回复评论内容
	commentContent := &model.CommentContent{
		CommentID:  commentID,
		Content:    req.Content,
		DeviceType: req.DeviceType,
		IP:         req.Ip,
	}
	_, err = h.commentContentDao.CreateByTx(ctx, tx, commentContent)
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentContentDao.CreateByTx error", logger.Err(err), logger.Any("commentContent", commentContent), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 创建最新回复评论
	commentLatest := &model.CommentLatest{
		UserID:    req.UserId,
		CommentID: commentID,
		PostID:    comment.PostID,
		ParentID:  req.CommentId,
		DelFlag:   delFlagNormal,
	}
	_, err = h.commentLatestDao.CreateByTx(ctx, tx, commentLatest)
	if err != nil {
		tx.Rollback()
		logger.Error("h.commentLatestDao.CreateByTx error", logger.Err(err), logger.Any("commentLatest", commentLatest), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 创建用户个人评论
	userComment := &model.UserComment{
		CommentID: commentID,
		UserID:    req.UserId,
		DelFlag:   delFlagNormal,
	}
	_, err = h.userCommentDao.CreateByTx(ctx, tx, userComment)
	if err != nil {
		tx.Rollback()
		logger.Error("h.userCommentDao.CreateByTx error", logger.Err(err), logger.Any("userComment", userComment), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 评论数+1
	err = h.postDao.IncrCommentCountByTx(ctx, tx, comment.PostID)
	if err != nil {
		tx.Rollback()
		logger.Error("h.postDao.IncrCommentCountByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 评论回复数量+1
	err = h.commentDao.IncrReplyCountByTx(ctx, tx, req.CommentId)
	if err != nil {
		tx.Rollback()
		return nil, err
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	data, err := convertComment(comment, commentContent)
	if err != nil {
		logger.Error("convertComment error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.ReplyCommentReply{Comment: data}, nil
}

// GetByID 根据id获取评论
func (h *commentServiceHandler) GetByID(ctx context.Context, req *communityV1.GetCommentByIDRequest) (*communityV1.GetCommentByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	comment, err := h.commentDao.GetByID(ctx, req.Id)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("commentID", req.Id), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("commentID", req.Id), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	commentContent, err := h.commentContentDao.GetByID(ctx, comment.ID)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.commentContentDao.GetByID error", logger.Err(err), logger.Uint64("commentID", req.Id), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.commentContentDao.GetByID error", logger.Err(err), logger.Uint64("commentID", req.Id), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	data, err := convertComment(comment, commentContent)
	if err != nil {
		logger.Error("convertComment error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.GetCommentByIDReply{Comment: data}, nil
}

// ListByIDs 根据批量id获取评论列表
func (h *commentServiceHandler) ListByIDs(ctx context.Context, req *communityV1.ListCommentByIDsRequest) (*communityV1.ListCommentByIDsReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	commentMap, err := h.commentDao.GetByIDs(ctx, req.Ids)
	if err != nil {
		logger.Error("h.commentDao.GetByIDs error", logger.Err(err), logger.Any("ids", req.Ids), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	commentContentMap, err := h.commentContentDao.GetByCommentIDs(ctx, req.Ids)
	if err != nil {
		logger.Error("h.commentContentDao.GetByCommentIDs error", logger.Err(err), logger.Any("ids", req.Ids), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	commentInfos := []*communityV1.CommentInfo{}
	for _, id := range req.Ids {
		if comment, ok1 := commentMap[id]; ok1 {
			// 过滤已删除的评论
			if comment.DelFlag > 0 {
				continue
			}
			if commentContent, ok2 := commentContentMap[id]; ok2 {
				commentInfo, err := convertComment(comment, commentContent)
				if err != nil {
					logger.Warn("convertPost error", logger.Err(err), logger.Any("comment", comment), middleware.CtxRequestIDField(ctx))
					continue
				}
				commentInfos = append(commentInfos, commentInfo)
			}
		}
	}

	return &communityV1.ListCommentByIDsReply{Comments: commentInfos}, nil
}

// ListLatest 最新评论列表
func (h *commentServiceHandler) ListLatest(ctx context.Context, req *communityV1.ListCommentLatestRequest) (*communityV1.ListCommentLatestReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	records, total, err := h.commentLatestDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-comment_id",
		Columns: []query.Column{
			{
				Name:  "post_id",
				Value: req.PostId,
			},
			{
				Name:  "del_flag",
				Value: delFlagNormal,
			},
		},
	})
	if err != nil {
		logger.Error("h.commentLatestDao.GetByColumns error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	if len(records) == 0 {
		return &communityV1.ListCommentLatestReply{Comments: []*communityV1.CommentInfo{}, Total: total}, nil
	}

	commentIDs := []uint64{}
	for _, record := range records {
		commentIDs = append(commentIDs, record.CommentID)
	}

	reply, err := h.ListByIDs(ctx, &communityV1.ListCommentByIDsRequest{Ids: commentIDs})
	if err != nil {
		logger.Warn("h.ListByIDs error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.ListCommentLatestReply{Comments: reply.Comments, Total: total}, nil
}

// ListHot 热门评论列表
func (h *commentServiceHandler) ListHot(ctx context.Context, req *communityV1.ListCommentHotRequest) (*communityV1.ListCommentHotReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	records, total, err := h.commentHotDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-comment_id",
		Columns: []query.Column{
			{
				Name:  "post_id",
				Value: req.PostId,
			},
			{
				Name:  "del_flag",
				Value: delFlagNormal,
			},
		},
	})
	if err != nil {
		logger.Error("h.commentHotDao.GetByColumns error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	if len(records) == 0 {
		return &communityV1.ListCommentHotReply{Comments: []*communityV1.CommentInfo{}, Total: total}, nil
	}

	commentIDs := []uint64{}
	for _, record := range records {
		commentIDs = append(commentIDs, record.CommentID)
	}

	reply, err := h.ListByIDs(ctx, &communityV1.ListCommentByIDsRequest{Ids: commentIDs})
	if err != nil {
		logger.Warn("h.ListByIDs error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.ListCommentHotReply{Comments: reply.Comments, Total: total}, nil
}

// ListReply 评论回复列表
func (h *commentServiceHandler) ListReply(ctx context.Context, req *communityV1.ListCommentReplyRequest) (*communityV1.ListCommentReplyReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	records, total, err := h.commentDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-id",
		Columns: []query.Column{
			{
				Name:  "parent_id",
				Value: req.CommentId,
			},
			{
				Name:  "del_flag",
				Value: delFlagNormal,
			},
		},
	})
	if err != nil {
		logger.Error("h.commentDao.GetByColumns error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	if len(records) == 0 {
		return &communityV1.ListCommentReplyReply{Comments: []*communityV1.CommentInfo{}, Total: total}, nil
	}

	commentIDs := []uint64{}
	for _, record := range records {
		commentIDs = append(commentIDs, record.ID)
	}

	reply, err := h.ListByIDs(ctx, &communityV1.ListCommentByIDsRequest{Ids: commentIDs})
	if err != nil {
		logger.Warn("h.ListByIDs error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.ListCommentReplyReply{Comments: reply.Comments, Total: total}, nil
}

func convertComment(c *model.Comment, cc *model.CommentContent) (*communityV1.CommentInfo, error) {
	commentInfo := &communityV1.CommentInfo{}

	err := copier.Copy(commentInfo, c)
	if err != nil {
		return nil, err
	}

	// 如果字段大小不一致，需要手动转换
	commentInfo.Id = c.ID
	commentInfo.PostId = c.PostID
	commentInfo.UserId = c.UserID
	commentInfo.ParentId = c.ParentID
	commentInfo.Content = cc.Content
	commentInfo.DeviceType = cc.DeviceType
	commentInfo.Ip = cc.IP
	commentInfo.CreatedAt = c.CreatedAt.Unix()
	commentInfo.UpdatedAt = c.UpdatedAt.Unix()

	return commentInfo, nil
}
