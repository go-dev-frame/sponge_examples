// Code generated by https://github.com/zhufuyi/sponge

package handler

import (
	"context"
	"errors"

	communityV1 "community/api/community/v1"
	"community/internal/cache"
	"community/internal/dao"
	"community/internal/ecode"
	"community/internal/model"

	"github.com/zhufuyi/sponge/pkg/gin/middleware"
	"github.com/zhufuyi/sponge/pkg/logger"
	"github.com/zhufuyi/sponge/pkg/mysql/query"
)

const (
	// 点赞类型
	likeTypePost    = 1 // 帖子点赞
	likeTypeComment = 2 // 评论点赞

	// 点赞状态
	likeStatusUnliked = 0 // 未点赞
	likeStatusLiked   = 1 // 已点赞
)

var _ communityV1.LikeServiceLogicer = (*likeServiceHandler)(nil)

type likeServiceHandler struct {
	userLikeDao dao.UserLikeDao
	postDao     dao.PostDao
	commentDao  dao.CommentDao
}

// NewLikeServiceHandler create a handler
func NewLikeServiceHandler() communityV1.LikeServiceLogicer {
	return &likeServiceHandler{
		userLikeDao: dao.NewUserLikeDao(
			model.GetDB(),
			cache.NewUserLikeCache(model.GetCacheType()),
		),
		postDao: dao.NewPostDao(
			model.GetDB(),
			cache.NewPostCache(model.GetCacheType()),
		),
		commentDao: dao.NewCommentDao(
			model.GetDB(),
			cache.NewCommentCache(model.GetCacheType()),
		),
	}
}

// Create 点赞
func (h *likeServiceHandler) Create(ctx context.Context, req *communityV1.CreateLikeRequest) (*communityV1.CreateLikeReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 判断点赞对象是否存在
	err = h.checkLikeExist(ctx, req.ObjType, req.ObjId)
	if err != nil {
		return nil, err
	}

	// 判断是否已经点赞过
	userLike, err := h.userLikeDao.GetByUser(ctx, req.UserId, int(req.ObjType), req.ObjId)
	if err != nil && !errors.Is(err, model.ErrRecordNotFound) {
		logger.Error("h.userLikeDao.GetByUser error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	if userLike.Status == likeStatusLiked {
		return &communityV1.CreateLikeReply{}, nil
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 点赞
	if userLike.ID == 0 {
		// 创建新点赞
		userLikeRecord := &model.UserLike{
			ObjType: int(req.ObjType),
			ObjID:   req.ObjId,
			UserID:  req.UserId,
			Status:  likeStatusLiked,
		}
		_, err = h.userLikeDao.CreateByTx(ctx, tx, userLikeRecord)
		if err != nil {
			tx.Rollback()
			logger.Error("h.userLikeDao.CreateByTx error", logger.Err(err), logger.Any("userLike", userLikeRecord), middleware.CtxRequestIDField(ctx))
			return nil, ecode.InternalServerError.Err()
		}
	} else {
		// 更新点赞状态
		err = h.userLikeDao.UpdateStatusByTx(ctx, tx, userLike.ID, likeStatusLiked)
		if err != nil {
			tx.Rollback()
			logger.Error("h.userLikeDao.UpdateByTx error", logger.Err(err), logger.Any("id", userLike.ID), middleware.CtxRequestIDField(ctx))
			return nil, ecode.InternalServerError.Err()
		}
	}

	// 点赞数量+1
	switch req.ObjType {
	case likeTypePost:
		err = h.postDao.IncrLikeCountByTx(ctx, tx, req.ObjId)
		if err != nil {
			tx.Rollback()
			logger.Error("h.postDao.IncrLikeCountByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
			return nil, ecode.InternalServerError.Err()
		}
	case likeTypeComment:
		err = h.commentDao.IncrLikeCountByTx(ctx, tx, req.ObjId)
		if err != nil {
			tx.Rollback()
			logger.Error("h.commentDao.IncrLikeCountByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
			return nil, ecode.InternalServerError.Err()
		}
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.CreateLikeReply{}, nil
}

// Delete 取消点赞
func (h *likeServiceHandler) Delete(ctx context.Context, req *communityV1.DeleteLikeRequest) (*communityV1.DeleteLikeReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 判断点赞对象是否存在
	err = h.checkLikeExist(ctx, req.ObjType, req.ObjId)
	if err != nil {
		return nil, err
	}

	// 判断是否已经取消点赞
	userLike, err := h.userLikeDao.GetByUser(ctx, req.UserId, int(req.ObjType), req.ObjId)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.userLikeDao.GetByUser error", logger.Err(err), logger.Uint64("id", req.ObjId), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.userLikeDao.GetByUser error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	if userLike.Status == likeStatusUnliked {
		return &communityV1.DeleteLikeReply{}, nil
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 取消点赞
	err = h.userLikeDao.UpdateStatusByTx(ctx, tx, userLike.ID, likeStatusUnliked)
	if err != nil {
		tx.Rollback()
		logger.Error("h.userLikeDao.UpdateByTx error", logger.Err(err), logger.Any("id", userLike.ID), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 点赞数量-1
	switch req.ObjType {
	case likeTypePost:
		err = h.postDao.DecrLikeCountByTx(ctx, tx, req.ObjId)
		if err != nil {
			tx.Rollback()
			logger.Error("h.postDao.DecrLikeCountByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
			return nil, ecode.InternalServerError.Err()
		}
	case likeTypeComment:
		err = h.commentDao.DecrLikeCountByTx(ctx, tx, req.ObjId)
		if err != nil {
			tx.Rollback()
			logger.Error("h.commentDao.DecrLikeCountByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
			return nil, ecode.InternalServerError.Err()
		}
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.DeleteLikeReply{}, nil
}

// ListPost 获取帖子点赞列表
func (h *likeServiceHandler) ListPost(ctx context.Context, req *communityV1.ListPostLikeRequest) (*communityV1.ListPostLikeReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	records, total, err := h.userLikeDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-id",
		Columns: []query.Column{
			{
				Name:  "obj_id",
				Value: req.PostId,
			},
			{
				Name:  "obj_type",
				Value: likeTypePost,
			},
			{
				Name:  "status",
				Value: likeStatusLiked,
			},
		},
	})
	if err != nil {
		logger.Error("h.userLikeDao.GetByColumns error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	userLikeInfos := []*communityV1.LikeInfo{}
	for _, record := range records {
		userLikeInfos = append(userLikeInfos, convertUserLike(record))
	}

	return &communityV1.ListPostLikeReply{Likes: userLikeInfos, Total: total}, nil
}

// ListComment 获取评论点赞列表
func (h *likeServiceHandler) ListComment(ctx context.Context, req *communityV1.ListCommentLikeRequest) (*communityV1.ListCommentLikeReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	records, total, err := h.userLikeDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-id",
		Columns: []query.Column{
			{
				Name:  "obj_id",
				Value: req.CommentId,
			},
			{
				Name:  "obj_type",
				Value: likeTypeComment,
			},
			{
				Name:  "status",
				Value: likeStatusLiked,
			},
		},
	})
	if err != nil {
		logger.Error("h.userLikeDao.GetByColumns error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	userLikeInfos := []*communityV1.LikeInfo{}
	for _, record := range records {
		userLikeInfos = append(userLikeInfos, convertUserLike(record))
	}

	return &communityV1.ListCommentLikeReply{Likes: userLikeInfos, Total: total}, nil
}

func (h *likeServiceHandler) checkLikeExist(ctx context.Context, objType int32, objID uint64) error {
	switch objType {
	case likeTypePost:
		_, err := h.postDao.GetByID(ctx, objID)
		if err != nil {
			if errors.Is(err, model.ErrRecordNotFound) {
				logger.Warn("h.postDao.GetByID error", logger.Err(err), logger.Uint64("id", objID), middleware.CtxRequestIDField(ctx))
				return ecode.NotFound.Err()
			}
			logger.Error("h.postDao.GetByID error", logger.Err(err), logger.Uint64("id", objID), middleware.CtxRequestIDField(ctx))
			return ecode.InternalServerError.Err()
		}
	case likeTypeComment:
		_, err := h.commentDao.GetByID(ctx, objID)
		if err != nil {
			if errors.Is(err, model.ErrRecordNotFound) {
				logger.Warn("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("id", objID), middleware.CtxRequestIDField(ctx))
				return ecode.NotFound.Err()
			}
			logger.Error("h.commentDao.GetByID error", logger.Err(err), logger.Uint64("id", objID), middleware.CtxRequestIDField(ctx))
			return ecode.InternalServerError.Err()
		}
	}

	return nil
}

func convertUserLike(l *model.UserLike) *communityV1.LikeInfo {
	return &communityV1.LikeInfo{
		Id:        l.ID,
		UserId:    l.UserID,
		ObjType:   int32(l.ObjType),
		ObjId:     l.ObjID,
		Status:    int32(l.Status),
		CreatedAt: l.CreatedAt.Unix(),
		UpdatedAt: l.UpdatedAt.Unix(),
	}
}
