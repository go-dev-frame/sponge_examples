// Code generated by https://github.com/zhufuyi/sponge

package handler

import (
	"context"
	"encoding/json"
	"errors"
	"strings"

	communityV1 "community/api/community/v1"
	"community/internal/cache"
	"community/internal/dao"
	"community/internal/ecode"
	"community/internal/model"

	"github.com/zhufuyi/sponge/pkg/gin/middleware"
	"github.com/zhufuyi/sponge/pkg/logger"
	"github.com/zhufuyi/sponge/pkg/mysql"
	"github.com/zhufuyi/sponge/pkg/mysql/query"

	"github.com/jinzhu/copier"
)

const (
	// 帖子类型
	postTypeUnknown = 0 // 未知
	postTypeText    = 1 // 文本
	postTypeImage   = 2 // 图片
	postTypeVideo   = 3 // 视频

	// 删除帖子类型
	delFlagNormal  = 0 // 正常
	delFlagByUser  = 1 // 用户删除
	delFlagByAdmin = 2 // 管理员删除

	// 帖子可视范围
	visibleAll      = 0 // 公开
	visibleOnlySelf = 1 // 仅自己可见

	datetimeLayout = "2006-01-02 15:04:05"
)

var _ communityV1.PostServiceLogicer = (*postServiceHandler)(nil)

type postServiceHandler struct {
	postDao       dao.PostDao
	postLatestDao dao.PostLatestDao
	postHotDao    dao.PostHotDao
	userPostDao   dao.UserPostDao
}

// NewPostServiceHandler create a handler
func NewPostServiceHandler() communityV1.PostServiceLogicer {
	return &postServiceHandler{
		postDao: dao.NewPostDao(
			model.GetDB(),
			cache.NewPostCache(model.GetCacheType()),
		),
		postLatestDao: dao.NewPostLatestDao(
			model.GetDB(),
			cache.NewPostLatestCache(model.GetCacheType()),
		),
		postHotDao: dao.NewPostHotDao(
			model.GetDB(),
			cache.NewPostHotCache(model.GetCacheType()),
		),
		userPostDao: dao.NewUserPostDao(
			model.GetDB(),
			cache.NewUserPostCache(model.GetCacheType()),
		),
	}
}

// Create 创建帖子
func (h *postServiceHandler) Create(ctx context.Context, req *communityV1.CreatePostRequest) (*communityV1.CreatePostReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}
	err = checkPostParams(req)
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	postType := getPostType(req)
	content, err := getContent(postType, req)
	if err != nil {
		logger.Warn("getContent error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, err
	}

	postData := &model.Post{
		PostType:  postType,
		UserID:    req.UserId,
		Title:     req.Title,
		Content:   content,
		Longitude: float64(req.Longitude),
		Latitude:  float64(req.Latitude),
		Position:  req.Position,
		DelFlag:   delFlagNormal,
		Visible:   visibleOnlySelf,
	}
	// 创建帖子
	postID, err := h.postDao.CreateByTx(ctx, tx, postData)
	if err != nil {
		tx.Rollback()
		logger.Error("h.postDao.CreateByTx error", logger.Err(err), logger.Any("postData", postData), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	postLatestData := &model.PostLatest{
		PostID:  postID,
		UserID:  req.UserId,
		DelFlag: delFlagNormal,
	}
	// 创建最新帖子
	_, err = h.postLatestDao.CreateByTx(ctx, tx, postLatestData)
	if err != nil {
		tx.Rollback()
		logger.Error("h.postLatestDao.CreateByTx error", logger.Err(err), logger.Any("postLatestData", postLatestData), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	postHotData := &model.PostHot{
		PostID:  postID,
		UserID:  req.UserId,
		DelFlag: delFlagNormal,
	}
	// 创建热门帖子
	_, err = h.postHotDao.CreateByTx(ctx, tx, postHotData)
	if err != nil {
		tx.Rollback()
		logger.Error("h.postHotDao.CreateByTx error", logger.Err(err), logger.Any("postHotData", postHotData), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	userPostData := &model.UserPost{
		PostID:  postID,
		UserID:  req.UserId,
		DelFlag: delFlagNormal,
	}
	// 创建用户帖子
	_, err = h.userPostDao.CreateByTx(ctx, tx, userPostData)
	if err != nil {
		tx.Rollback()
		logger.Error("h.userPostDao.CreateByTx error", logger.Err(err), logger.Any("userPostData", postHotData), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	postData.ID = postID
	postInfo, err := convertPost(postData)
	if err != nil {
		// 已经添加成功，不需要返回错误
		logger.Warn("convertPost error", logger.Err(err), logger.Any("postData", postData), middleware.CtxRequestIDField(ctx))
	}

	return &communityV1.CreatePostReply{Post: postInfo}, nil
}

// UpdateContent 更新帖子内容
func (h *postServiceHandler) UpdateContent(ctx context.Context, req *communityV1.UpdatePostContentRequest) (*communityV1.UpdatePostContentReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	reqVal := &communityV1.CreatePostRequest{}
	err = copier.Copy(reqVal, req)
	if err != nil {
		logger.Warn("copier.Copy error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	err = checkPostParams(reqVal)
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	postType := getPostType(reqVal)
	content, err := getContent(postType, reqVal)
	if err != nil {
		logger.Warn("getContent error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, err
	}

	err = h.postDao.UpdateByID(ctx, &model.Post{
		Model:   mysql.Model{ID: req.Id},
		Title:   req.Title,
		Content: content,
	})
	if err != nil {
		logger.Error("h.postDao.UpdateByID error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.UpdatePostContentReply{}, nil
}

// Delete 删除帖子
func (h *postServiceHandler) Delete(ctx context.Context, req *communityV1.DeletePostRequest) (*communityV1.DeletePostReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	// 判断帖子是否存在
	post, err := h.postDao.GetByID(ctx, req.Id)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.postDao.GetByID error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.postDao.GetByID error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	if post.UserID != req.UserId {
		logger.Error("only delete your own posts", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.Forbidden.Err()
	}
	if post.DelFlag > 0 {
		return &communityV1.DeletePostReply{}, nil
	}

	db := model.GetDB()
	tx := db.Begin()
	if tx.Error != nil {
		logger.Error("tx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}
	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
		}
	}()

	// 删除帖子
	err = h.postDao.DeleteByTx(ctx, tx, req.Id, int(req.DelFlag))
	if err != nil {
		tx.Rollback()
		logger.Error("h.postDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 删除最新帖子
	err = h.postLatestDao.DeleteByTx(ctx, tx, req.Id, int(req.DelFlag))
	if err != nil {
		tx.Rollback()
		logger.Error("h.postLatestDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 删除热门帖子
	err = h.postHotDao.DeleteByTx(ctx, tx, req.Id, int(req.DelFlag))
	if err != nil {
		tx.Rollback()
		logger.Error("h.postHotDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	// 删除用户帖子
	err = h.userPostDao.DeleteByTx(ctx, tx, req.Id, int(req.DelFlag))
	if err != nil {
		tx.Rollback()
		logger.Error("h.userPostDao.DeleteByTx error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	err = tx.Commit().Error
	if err != nil {
		tx.Rollback()
		logger.Error("tx.Commit error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.DeletePostReply{}, nil
}

// GetByID 根据id获取帖子详情
func (h *postServiceHandler) GetByID(ctx context.Context, req *communityV1.GetPostByIDRequest) (*communityV1.GetPostByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	post, err := h.postDao.GetByID(ctx, req.Id)
	if err != nil {
		if errors.Is(err, model.ErrRecordNotFound) {
			logger.Warn("h.postDao.GetByID error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
			return nil, ecode.NotFound.Err()
		}
		logger.Error("h.postDao.GetByID error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	if post.DelFlag > 0 {
		logger.Warn("not found the post", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.NotFound.Err()
	}

	postInfo, err := convertPost(post)
	if err != nil {
		logger.Warn("convertPost error", logger.Err(err), logger.Any("post", post), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.GetPostByIDReply{Post: postInfo}, nil
}

// ListByIDs 根据批量id获取帖子列表
func (h *postServiceHandler) ListByIDs(ctx context.Context, req *communityV1.ListPostByIDsRequest) (*communityV1.ListPostByIDsReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	postMap, err := h.postDao.GetByIDs(ctx, req.Ids)
	if err != nil {
		logger.Error("h.postDao.GetByIDs error", logger.Err(err), logger.Any("ids", req.Ids), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	posts := []*communityV1.PostInfo{}
	for _, id := range req.Ids {
		if v, ok := postMap[id]; ok {
			// 过滤已删除的帖子
			if v.DelFlag > 0 {
				continue
			}
			post, err := convertPost(v)
			if err != nil {
				logger.Warn("convertPost error", logger.Err(err), logger.Any("post", v), middleware.CtxRequestIDField(ctx))
				continue
			}
			posts = append(posts, post)
		}
	}

	return &communityV1.ListPostByIDsReply{Posts: posts}, nil
}

// ListByUserID 用户发布过的帖子列表
func (h *postServiceHandler) ListByUserID(ctx context.Context, req *communityV1.ListPostByUserIDRequest) (*communityV1.ListPostByUserIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	records, total, err := h.userPostDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-post_id",
		Columns: []query.Column{
			{
				Name:  "user_id",
				Value: req.UserId,
			},
			{
				Name:  "del_flag",
				Value: delFlagNormal,
			},
		},
	})
	if err != nil {
		logger.Error("h.userPostDao.GetByColumns error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	if len(records) == 0 {
		return &communityV1.ListPostByUserIDReply{Posts: []*communityV1.PostInfo{}, Total: total}, nil
	}

	postIDs := []uint64{}
	for _, record := range records {
		postIDs = append(postIDs, record.PostID)
	}

	reply, err := h.ListByIDs(ctx, &communityV1.ListPostByIDsRequest{Ids: postIDs})
	if err != nil {
		logger.Error("h.ListByIDs error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.ListPostByUserIDReply{Posts: reply.Posts, Total: total}, nil
}

// ListLatest 最新的帖子列表
func (h *postServiceHandler) ListLatest(ctx context.Context, req *communityV1.ListPostLatestRequest) (*communityV1.ListPostLatestReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	records, total, err := h.postLatestDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-post_id",
		Columns: []query.Column{
			{
				Name:  "del_flag",
				Value: delFlagNormal,
			},
		},
	})
	if err != nil {
		logger.Error("h.postLatestDao.GetByColumns error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	if len(records) == 0 {
		return &communityV1.ListPostLatestReply{Posts: []*communityV1.PostInfo{}, Total: total}, nil
	}

	postIDs := []uint64{}
	for _, record := range records {
		postIDs = append(postIDs, record.PostID)
	}

	reply, err := h.ListByIDs(ctx, &communityV1.ListPostByIDsRequest{Ids: postIDs})
	if err != nil {
		logger.Warn("h.ListByIDs error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.ListPostLatestReply{Posts: reply.Posts, Total: total}, nil
}

// ListHot 热门的帖子列表
func (h *postServiceHandler) ListHot(ctx context.Context, req *communityV1.ListPostHotRequest) (*communityV1.ListPostHotReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	records, total, err := h.postHotDao.GetByColumns(ctx, &query.Params{
		Page: int(req.Page),
		Size: int(req.Limit),
		Sort: "-post_id",
		Columns: []query.Column{
			{
				Name:  "del_flag",
				Value: delFlagNormal,
			},
		},
	})
	if err != nil {
		logger.Error("h.postHotDao.GetByColumns error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	if len(records) == 0 {
		return &communityV1.ListPostHotReply{Posts: []*communityV1.PostInfo{}, Total: total}, nil
	}

	postIDs := []uint64{}
	for _, record := range records {
		postIDs = append(postIDs, record.PostID)
	}

	reply, err := h.ListByIDs(ctx, &communityV1.ListPostByIDsRequest{Ids: postIDs})
	if err != nil {
		logger.Warn("h.ListByIDs error", logger.Err(err), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.ListPostHotReply{Posts: reply.Posts, Total: total}, nil
}

// IncrViewCount 观看数量+1
func (h *postServiceHandler) IncrViewCount(ctx context.Context, req *communityV1.IncrPostViewCountRequest) (*communityV1.IncrPostViewCountReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	err = h.postDao.IncrViewCount(ctx, req.Id)
	if err != nil {
		logger.Error("h.postDao.IncrViewCount error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.IncrPostViewCountReply{}, nil
}

// IncrShareCount 分享数量+1
func (h *postServiceHandler) IncrShareCount(ctx context.Context, req *communityV1.IncrPostShareCountRequest) (*communityV1.IncrPostShareCountReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InvalidParams.Err()
	}

	err = h.postDao.IncrShareCount(ctx, req.Id)
	if err != nil {
		logger.Error("h.postDao.IncrShareCount error", logger.Err(err), logger.Uint64("id", req.Id), middleware.CtxRequestIDField(ctx))
		return nil, ecode.InternalServerError.Err()
	}

	return &communityV1.IncrPostShareCountReply{}, nil
}

func checkPostParams(req *communityV1.CreatePostRequest) error {
	if req.Text == "" && req.PicKeys == "" && req.VideoKey == "" {
		return ecode.ErrPostTypePostService.Err()
	}
	if req.PicKeys != "" && req.VideoKey != "" {
		return ecode.ErrPostType2PostService.Err()
	}
	if req.VideoKey != "" {
		if req.CoverKey == "" || req.VideoDuration == 0 || req.CoverWidth == 0 || req.CoverHeight == 0 {
			return ecode.ErrVideoParamPostService.Err()
		}
	}

	return nil
}

func getPostType(req *communityV1.CreatePostRequest) int {
	if req.PicKeys != "" {
		return postTypeImage
	}
	if req.VideoKey != "" {
		return postTypeVideo
	}
	if req.Text != "" {
		return postTypeText
	}

	return postTypeUnknown
}

func getContent(postType int, req *communityV1.CreatePostRequest) (string, error) {
	data := make(map[string]interface{})
	switch postType {
	case postTypeText:
		data["text"] = req.Text
	case postTypeImage:
		pics := strings.Split(req.PicKeys, ",")
		data["pic"] = pics
	case postTypeVideo:
		data["video"] = map[string]interface{}{
			"video_key":    req.VideoKey,
			"duration":     req.VideoDuration,
			"cover_key":    req.CoverKey,
			"cover_width":  req.CoverWidth,
			"cover_height": req.CoverHeight,
		}
	default:
		return "", ecode.ErrPostTypePostService.Err()
	}
	content, err := json.Marshal(data)
	if err != nil {
		return "", err
	}
	return string(content), nil
}

func convertPost(post *model.Post) (*communityV1.PostInfo, error) {
	postInfo := &communityV1.PostInfo{}
	err := copier.Copy(postInfo, post)
	if err != nil {
		return nil, err
	}

	// 如果字段大小不一致，需要手动转换
	postInfo.Id = post.ID
	postInfo.UserId = post.UserID
	postInfo.CreatedAt = post.CreatedAt.Unix()
	postInfo.UpdatedAt = post.UpdatedAt.Unix()

	postInfo.Content, err = convertContent(post)
	if err != nil {
		return nil, err
	}

	return postInfo, nil
}

func convertContent(post *model.Post) (string, error) {
	if len(post.Content) == 0 {
		return "", nil
	}

	rawContent := make(map[string]interface{})
	err := json.Unmarshal([]byte(post.Content), &rawContent)
	if err != nil {
		return "", err
	}

	data := make(map[string]interface{})
	postType := post.PostType
	switch postType {
	case postTypeText:
		data["text"] = rawContent["text"]
	case postTypeImage:
		data["pic"] = rawContent["pic"]
	case postTypeVideo:
		vContent := rawContent["video"].(map[string]interface{})
		data["video"] = map[string]interface{}{
			"video_url":    vContent["video_key"],
			"duration":     vContent["duration"],
			"cover_url":    vContent["cover_key"],
			"cover_width":  vContent["cover_width"],
			"cover_height": vContent["cover_height"],
		}
	}

	content, err := json.Marshal(data)
	if err != nil {
		return "", err
	}
	return string(content), nil
}
