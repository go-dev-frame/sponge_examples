// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	userV1 "user_gw/api/user/v1"
	user_gwV1 "user_gw/api/user_gw/v1"
	"user_gw/internal/ecode"
	"user_gw/internal/rpcclient"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"
)

var _ user_gwV1.UserLogicer = (*userClient)(nil)

type userClient struct {
	// define the rpc server clients here
	// example:
	userCli userV1.UserClient
}

// NewUserClient create a client
func NewUserClient() user_gwV1.UserLogicer {
	return &userClient{
		// example:
		userCli: userV1.NewUserClient(rpcclient.GetUserRPCConn()),
	}
}

// Register ......
func (c *userClient) Register(ctx context.Context, req *user_gwV1.RegisterRequest) (*user_gwV1.RegisterReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	userReply, err := c.userCli.Register(ctx, &userV1.RegisterRequest{
		Email:    req.Email,
		Password: req.Password,
	})
	if err != nil {
		return nil, err
	}

	return &user_gwV1.RegisterReply{Id: userReply.Id}, nil
}

// Login ......
func (c *userClient) Login(ctx context.Context, req *user_gwV1.LoginRequest) (*user_gwV1.LoginReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	userReply, err := c.userCli.Login(ctx, &userV1.LoginRequest{
		Email:    req.Email,
		Password: req.Password,
	})
	if err != nil {
		return nil, err
	}

	return &user_gwV1.LoginReply{
		Id:    userReply.Id,
		Token: userReply.Token,
	}, nil
}

// Logout ......
func (c *userClient) Logout(ctx context.Context, req *user_gwV1.LogoutRequest) (*user_gwV1.LogoutReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.userCli.Logout(ctx, &userV1.LogoutRequest{
		Id:    req.Id,
		Token: req.Token,
	})
	if err != nil {
		return nil, err
	}

	return &user_gwV1.LogoutReply{}, nil
}

// ChangePassword ......
func (c *userClient) ChangePassword(ctx context.Context, req *user_gwV1.ChangePasswordRequest) (*user_gwV1.ChangeRegisterReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	_, err = c.userCli.ChangePassword(ctx, &userV1.ChangePasswordRequest{
		Id:       req.Id,
		Password: req.Password,
	})
	if err != nil {
		return nil, err
	}

	return &user_gwV1.ChangeRegisterReply{}, nil
}
