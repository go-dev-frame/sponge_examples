// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	"github.com/dtm-labs/client/dtmgrpc"
	"google.golang.org/grpc"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	transferV1 "transfer/api/transfer/v1"
	"transfer/internal/ecode"
	"transfer/internal/rpcclient"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		transferV1.RegisterTransferServer(server, NewTransferServer())
	})
}

var _ transferV1.TransferServer = (*transfer)(nil)

type transfer struct {
	transferV1.UnimplementedTransferServer
}

// NewTransferServer create a server
func NewTransferServer() transferV1.TransferServer {
	return &transfer{}
}

// Transfer 转账
func (s *transfer) Transfer(ctx context.Context, req *transferV1.TransferRequest) (*transferV1.TransferReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	var (
		// 使用ip直连方式还是服务发现方式，在配置文件中配置
		dtmServer      = rpcclient.GetDtmEndpoint()
		transferServer = rpcclient.GetTransferEndpoint()
	)

	transOutURL := transferServer + transferV1.Transfer_TransOut_FullMethodName
	transOutBody := &transferV1.TransOutRequest{
		Amount: req.Amount,
		UserId: req.FromUserId,
	}
	transInURL := transferServer + transferV1.Transfer_TransIn_FullMethodName
	transInData := &transferV1.TransInRequest{
		Amount: req.Amount,
		UserId: req.ToUserId,
	}
	headers := map[string]string{interceptor.ContextRequestIDKey: interceptor.ServerCtxRequestID(ctx)}

	gid := dtmgrpc.MustGenGid(dtmServer)
	msg := dtmgrpc.NewMsgGrpc(dtmServer, gid, dtmgrpc.WithBranchHeaders(headers))
	msg.Add(transOutURL, transOutBody)
	msg.Add(transInURL, transInData)
	msg.WaitResult = true
	err = msg.Submit()
	if err != nil {
		logger.Error("Transfer error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.Err()
	}

	logger.Info("submit dtm transaction success", logger.String("gid", gid), interceptor.ServerCtxRequestIDField(ctx))

	return &transferV1.TransferReply{}, nil
}

// TransOut 转出
func (s *transfer) TransOut(ctx context.Context, req *transferV1.TransOutRequest) (*transferV1.TransOutReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusAborted.ToRPCErr("参数校验失败")
	}
	logger.Info("转出成功", logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
	return &transferV1.TransOutReply{}, nil
}

// TransIn 转入
func (s *transfer) TransIn(ctx context.Context, req *transferV1.TransInRequest) (*transferV1.TransInReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusAborted.ToRPCErr("参数校验失败")
	}
	logger.Info("转入成功", logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
	return &transferV1.TransInReply{}, nil
}
