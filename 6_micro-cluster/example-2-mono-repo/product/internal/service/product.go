// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	"google.golang.org/grpc"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	productV1 "eshop/api/product/v1"
	"eshop/product/internal/ecode"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		productV1.RegisterProductServer(server, NewProductServer())
	})
}

var _ productV1.ProductServer = (*product)(nil)

type product struct {
	productV1.UnimplementedProductServer

	// example:
	//		iDao dao.ProductDao
}

// NewProductServer create a server
func NewProductServer() productV1.ProductServer {
	return &product{
		// example:
		//		iDao: dao.NewProductDao(
		//			model.GetDB(),
		//			cache.NewProductCache(model.GetCacheType()),
		//		),
	}
}

// GetByID get product by id
func (s *product) GetByID(ctx context.Context, req *productV1.GetByIDRequest) (*productV1.GetByIDReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	// fill in the business logic code here

	return &productV1.GetByIDReply{
		ProductDetail: &productV1.ProductDetail{
			Id:          1,
			Name:        "Data cable",
			Price:       10,
			Description: "Android type C data cable",
		},
		InventoryID: 1,
	}, nil
}
