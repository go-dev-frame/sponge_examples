// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/user/v1/teacher.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeacherClient is the client API for Teacher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherClient interface {
	// create teacher
	Create(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherReply, error)
	// delete teacher by id
	DeleteByID(ctx context.Context, in *DeleteTeacherByIDRequest, opts ...grpc.CallOption) (*DeleteTeacherByIDReply, error)
	// delete teacher by batch id
	DeleteByIDs(ctx context.Context, in *DeleteTeacherByIDsRequest, opts ...grpc.CallOption) (*DeleteTeacherByIDsReply, error)
	// update teacher by id
	UpdateByID(ctx context.Context, in *UpdateTeacherByIDRequest, opts ...grpc.CallOption) (*UpdateTeacherByIDReply, error)
	// get teacher by id
	GetByID(ctx context.Context, in *GetTeacherByIDRequest, opts ...grpc.CallOption) (*GetTeacherByIDReply, error)
	// get teacher by condition
	GetByCondition(ctx context.Context, in *GetTeacherByConditionRequest, opts ...grpc.CallOption) (*GetTeacherByConditionReply, error)
	// list of teacher by batch id
	ListByIDs(ctx context.Context, in *ListTeacherByIDsRequest, opts ...grpc.CallOption) (*ListTeacherByIDsReply, error)
	// list of teacher by query parameters
	List(ctx context.Context, in *ListTeacherRequest, opts ...grpc.CallOption) (*ListTeacherReply, error)
}

type teacherClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherClient(cc grpc.ClientConnInterface) TeacherClient {
	return &teacherClient{cc}
}

func (c *teacherClient) Create(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherReply, error) {
	out := new(CreateTeacherReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacher/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) DeleteByID(ctx context.Context, in *DeleteTeacherByIDRequest, opts ...grpc.CallOption) (*DeleteTeacherByIDReply, error) {
	out := new(DeleteTeacherByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacher/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) DeleteByIDs(ctx context.Context, in *DeleteTeacherByIDsRequest, opts ...grpc.CallOption) (*DeleteTeacherByIDsReply, error) {
	out := new(DeleteTeacherByIDsReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacher/DeleteByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) UpdateByID(ctx context.Context, in *UpdateTeacherByIDRequest, opts ...grpc.CallOption) (*UpdateTeacherByIDReply, error) {
	out := new(UpdateTeacherByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacher/UpdateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) GetByID(ctx context.Context, in *GetTeacherByIDRequest, opts ...grpc.CallOption) (*GetTeacherByIDReply, error) {
	out := new(GetTeacherByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacher/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) GetByCondition(ctx context.Context, in *GetTeacherByConditionRequest, opts ...grpc.CallOption) (*GetTeacherByConditionReply, error) {
	out := new(GetTeacherByConditionReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacher/GetByCondition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) ListByIDs(ctx context.Context, in *ListTeacherByIDsRequest, opts ...grpc.CallOption) (*ListTeacherByIDsReply, error) {
	out := new(ListTeacherByIDsReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacher/ListByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherClient) List(ctx context.Context, in *ListTeacherRequest, opts ...grpc.CallOption) (*ListTeacherReply, error) {
	out := new(ListTeacherReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacher/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServer is the server API for Teacher service.
// All implementations must embed UnimplementedTeacherServer
// for forward compatibility
type TeacherServer interface {
	// create teacher
	Create(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error)
	// delete teacher by id
	DeleteByID(context.Context, *DeleteTeacherByIDRequest) (*DeleteTeacherByIDReply, error)
	// delete teacher by batch id
	DeleteByIDs(context.Context, *DeleteTeacherByIDsRequest) (*DeleteTeacherByIDsReply, error)
	// update teacher by id
	UpdateByID(context.Context, *UpdateTeacherByIDRequest) (*UpdateTeacherByIDReply, error)
	// get teacher by id
	GetByID(context.Context, *GetTeacherByIDRequest) (*GetTeacherByIDReply, error)
	// get teacher by condition
	GetByCondition(context.Context, *GetTeacherByConditionRequest) (*GetTeacherByConditionReply, error)
	// list of teacher by batch id
	ListByIDs(context.Context, *ListTeacherByIDsRequest) (*ListTeacherByIDsReply, error)
	// list of teacher by query parameters
	List(context.Context, *ListTeacherRequest) (*ListTeacherReply, error)
	mustEmbedUnimplementedTeacherServer()
}

// UnimplementedTeacherServer must be embedded to have forward compatible implementations.
type UnimplementedTeacherServer struct {
}

func (UnimplementedTeacherServer) Create(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTeacherServer) DeleteByID(context.Context, *DeleteTeacherByIDRequest) (*DeleteTeacherByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedTeacherServer) DeleteByIDs(context.Context, *DeleteTeacherByIDsRequest) (*DeleteTeacherByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByIDs not implemented")
}
func (UnimplementedTeacherServer) UpdateByID(context.Context, *UpdateTeacherByIDRequest) (*UpdateTeacherByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedTeacherServer) GetByID(context.Context, *GetTeacherByIDRequest) (*GetTeacherByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedTeacherServer) GetByCondition(context.Context, *GetTeacherByConditionRequest) (*GetTeacherByConditionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByCondition not implemented")
}
func (UnimplementedTeacherServer) ListByIDs(context.Context, *ListTeacherByIDsRequest) (*ListTeacherByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByIDs not implemented")
}
func (UnimplementedTeacherServer) List(context.Context, *ListTeacherRequest) (*ListTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTeacherServer) mustEmbedUnimplementedTeacherServer() {}

// UnsafeTeacherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServer will
// result in compilation errors.
type UnsafeTeacherServer interface {
	mustEmbedUnimplementedTeacherServer()
}

func RegisterTeacherServer(s grpc.ServiceRegistrar, srv TeacherServer) {
	s.RegisterService(&Teacher_ServiceDesc, srv)
}

func _Teacher_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacher/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).Create(ctx, req.(*CreateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacher/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).DeleteByID(ctx, req.(*DeleteTeacherByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_DeleteByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).DeleteByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacher/DeleteByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).DeleteByIDs(ctx, req.(*DeleteTeacherByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeacherByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacher/UpdateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).UpdateByID(ctx, req.(*UpdateTeacherByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacher/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).GetByID(ctx, req.(*GetTeacherByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_GetByCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherByConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).GetByCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacher/GetByCondition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).GetByCondition(ctx, req.(*GetTeacherByConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_ListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeacherByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).ListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacher/ListByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).ListByIDs(ctx, req.(*ListTeacherByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teacher_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacher/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServer).List(ctx, req.(*ListTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Teacher_ServiceDesc is the grpc.ServiceDesc for Teacher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Teacher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.teacher",
	HandlerType: (*TeacherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Teacher_Create_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _Teacher_DeleteByID_Handler,
		},
		{
			MethodName: "DeleteByIDs",
			Handler:    _Teacher_DeleteByIDs_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _Teacher_UpdateByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _Teacher_GetByID_Handler,
		},
		{
			MethodName: "GetByCondition",
			Handler:    _Teacher_GetByCondition_Handler,
		},
		{
			MethodName: "ListByIDs",
			Handler:    _Teacher_ListByIDs_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Teacher_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/teacher.proto",
}
