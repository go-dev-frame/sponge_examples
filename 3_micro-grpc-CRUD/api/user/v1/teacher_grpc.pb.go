// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/user/v1/teacher.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeacherServiceClient is the client API for TeacherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeacherServiceClient interface {
	Create(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherReply, error)
	DeleteByID(ctx context.Context, in *DeleteTeacherByIDRequest, opts ...grpc.CallOption) (*DeleteTeacherByIDReply, error)
	DeleteByIDs(ctx context.Context, in *DeleteTeacherByIDsRequest, opts ...grpc.CallOption) (*DeleteTeacherByIDsReply, error)
	UpdateByID(ctx context.Context, in *UpdateTeacherByIDRequest, opts ...grpc.CallOption) (*UpdateTeacherByIDReply, error)
	GetByID(ctx context.Context, in *GetTeacherByIDRequest, opts ...grpc.CallOption) (*GetTeacherByIDReply, error)
	ListByIDs(ctx context.Context, in *ListTeacherByIDsRequest, opts ...grpc.CallOption) (*ListTeacherByIDsReply, error)
	List(ctx context.Context, in *ListTeacherRequest, opts ...grpc.CallOption) (*ListTeacherReply, error)
}

type teacherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeacherServiceClient(cc grpc.ClientConnInterface) TeacherServiceClient {
	return &teacherServiceClient{cc}
}

func (c *teacherServiceClient) Create(ctx context.Context, in *CreateTeacherRequest, opts ...grpc.CallOption) (*CreateTeacherReply, error) {
	out := new(CreateTeacherReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacherService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) DeleteByID(ctx context.Context, in *DeleteTeacherByIDRequest, opts ...grpc.CallOption) (*DeleteTeacherByIDReply, error) {
	out := new(DeleteTeacherByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacherService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) DeleteByIDs(ctx context.Context, in *DeleteTeacherByIDsRequest, opts ...grpc.CallOption) (*DeleteTeacherByIDsReply, error) {
	out := new(DeleteTeacherByIDsReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacherService/DeleteByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) UpdateByID(ctx context.Context, in *UpdateTeacherByIDRequest, opts ...grpc.CallOption) (*UpdateTeacherByIDReply, error) {
	out := new(UpdateTeacherByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacherService/UpdateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) GetByID(ctx context.Context, in *GetTeacherByIDRequest, opts ...grpc.CallOption) (*GetTeacherByIDReply, error) {
	out := new(GetTeacherByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacherService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) ListByIDs(ctx context.Context, in *ListTeacherByIDsRequest, opts ...grpc.CallOption) (*ListTeacherByIDsReply, error) {
	out := new(ListTeacherByIDsReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacherService/ListByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teacherServiceClient) List(ctx context.Context, in *ListTeacherRequest, opts ...grpc.CallOption) (*ListTeacherReply, error) {
	out := new(ListTeacherReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teacherService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeacherServiceServer is the server API for TeacherService service.
// All implementations must embed UnimplementedTeacherServiceServer
// for forward compatibility
type TeacherServiceServer interface {
	Create(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error)
	DeleteByID(context.Context, *DeleteTeacherByIDRequest) (*DeleteTeacherByIDReply, error)
	DeleteByIDs(context.Context, *DeleteTeacherByIDsRequest) (*DeleteTeacherByIDsReply, error)
	UpdateByID(context.Context, *UpdateTeacherByIDRequest) (*UpdateTeacherByIDReply, error)
	GetByID(context.Context, *GetTeacherByIDRequest) (*GetTeacherByIDReply, error)
	ListByIDs(context.Context, *ListTeacherByIDsRequest) (*ListTeacherByIDsReply, error)
	List(context.Context, *ListTeacherRequest) (*ListTeacherReply, error)
	mustEmbedUnimplementedTeacherServiceServer()
}

// UnimplementedTeacherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeacherServiceServer struct {
}

func (UnimplementedTeacherServiceServer) Create(context.Context, *CreateTeacherRequest) (*CreateTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTeacherServiceServer) DeleteByID(context.Context, *DeleteTeacherByIDRequest) (*DeleteTeacherByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedTeacherServiceServer) DeleteByIDs(context.Context, *DeleteTeacherByIDsRequest) (*DeleteTeacherByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByIDs not implemented")
}
func (UnimplementedTeacherServiceServer) UpdateByID(context.Context, *UpdateTeacherByIDRequest) (*UpdateTeacherByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedTeacherServiceServer) GetByID(context.Context, *GetTeacherByIDRequest) (*GetTeacherByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedTeacherServiceServer) ListByIDs(context.Context, *ListTeacherByIDsRequest) (*ListTeacherByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByIDs not implemented")
}
func (UnimplementedTeacherServiceServer) List(context.Context, *ListTeacherRequest) (*ListTeacherReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTeacherServiceServer) mustEmbedUnimplementedTeacherServiceServer() {}

// UnsafeTeacherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeacherServiceServer will
// result in compilation errors.
type UnsafeTeacherServiceServer interface {
	mustEmbedUnimplementedTeacherServiceServer()
}

func RegisterTeacherServiceServer(s grpc.ServiceRegistrar, srv TeacherServiceServer) {
	s.RegisterService(&TeacherService_ServiceDesc, srv)
}

func _TeacherService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacherService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).Create(ctx, req.(*CreateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacherService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).DeleteByID(ctx, req.(*DeleteTeacherByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_DeleteByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeacherByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).DeleteByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacherService/DeleteByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).DeleteByIDs(ctx, req.(*DeleteTeacherByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeacherByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacherService/UpdateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).UpdateByID(ctx, req.(*UpdateTeacherByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacherService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).GetByID(ctx, req.(*GetTeacherByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_ListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeacherByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).ListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacherService/ListByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).ListByIDs(ctx, req.(*ListTeacherByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeacherService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeacherServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teacherService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeacherServiceServer).List(ctx, req.(*ListTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeacherService_ServiceDesc is the grpc.ServiceDesc for TeacherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeacherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.teacherService",
	HandlerType: (*TeacherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TeacherService_Create_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _TeacherService_DeleteByID_Handler,
		},
		{
			MethodName: "DeleteByIDs",
			Handler:    _TeacherService_DeleteByIDs_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _TeacherService_UpdateByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _TeacherService_GetByID_Handler,
		},
		{
			MethodName: "ListByIDs",
			Handler:    _TeacherService_ListByIDs_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TeacherService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/teacher.proto",
}
