// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/user/v1/teach.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeachServiceClient is the client API for TeachService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeachServiceClient interface {
	Create(ctx context.Context, in *CreateTeachRequest, opts ...grpc.CallOption) (*CreateTeachReply, error)
	DeleteByID(ctx context.Context, in *DeleteTeachByIDRequest, opts ...grpc.CallOption) (*DeleteTeachByIDReply, error)
	DeleteByIDs(ctx context.Context, in *DeleteTeachByIDsRequest, opts ...grpc.CallOption) (*DeleteTeachByIDsReply, error)
	UpdateByID(ctx context.Context, in *UpdateTeachByIDRequest, opts ...grpc.CallOption) (*UpdateTeachByIDReply, error)
	GetByID(ctx context.Context, in *GetTeachByIDRequest, opts ...grpc.CallOption) (*GetTeachByIDReply, error)
	ListByIDs(ctx context.Context, in *ListTeachByIDsRequest, opts ...grpc.CallOption) (*ListTeachByIDsReply, error)
	List(ctx context.Context, in *ListTeachRequest, opts ...grpc.CallOption) (*ListTeachReply, error)
}

type teachServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTeachServiceClient(cc grpc.ClientConnInterface) TeachServiceClient {
	return &teachServiceClient{cc}
}

func (c *teachServiceClient) Create(ctx context.Context, in *CreateTeachRequest, opts ...grpc.CallOption) (*CreateTeachReply, error) {
	out := new(CreateTeachReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teachService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachServiceClient) DeleteByID(ctx context.Context, in *DeleteTeachByIDRequest, opts ...grpc.CallOption) (*DeleteTeachByIDReply, error) {
	out := new(DeleteTeachByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teachService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachServiceClient) DeleteByIDs(ctx context.Context, in *DeleteTeachByIDsRequest, opts ...grpc.CallOption) (*DeleteTeachByIDsReply, error) {
	out := new(DeleteTeachByIDsReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teachService/DeleteByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachServiceClient) UpdateByID(ctx context.Context, in *UpdateTeachByIDRequest, opts ...grpc.CallOption) (*UpdateTeachByIDReply, error) {
	out := new(UpdateTeachByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teachService/UpdateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachServiceClient) GetByID(ctx context.Context, in *GetTeachByIDRequest, opts ...grpc.CallOption) (*GetTeachByIDReply, error) {
	out := new(GetTeachByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teachService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachServiceClient) ListByIDs(ctx context.Context, in *ListTeachByIDsRequest, opts ...grpc.CallOption) (*ListTeachByIDsReply, error) {
	out := new(ListTeachByIDsReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teachService/ListByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teachServiceClient) List(ctx context.Context, in *ListTeachRequest, opts ...grpc.CallOption) (*ListTeachReply, error) {
	out := new(ListTeachReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.teachService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeachServiceServer is the server API for TeachService service.
// All implementations must embed UnimplementedTeachServiceServer
// for forward compatibility
type TeachServiceServer interface {
	Create(context.Context, *CreateTeachRequest) (*CreateTeachReply, error)
	DeleteByID(context.Context, *DeleteTeachByIDRequest) (*DeleteTeachByIDReply, error)
	DeleteByIDs(context.Context, *DeleteTeachByIDsRequest) (*DeleteTeachByIDsReply, error)
	UpdateByID(context.Context, *UpdateTeachByIDRequest) (*UpdateTeachByIDReply, error)
	GetByID(context.Context, *GetTeachByIDRequest) (*GetTeachByIDReply, error)
	ListByIDs(context.Context, *ListTeachByIDsRequest) (*ListTeachByIDsReply, error)
	List(context.Context, *ListTeachRequest) (*ListTeachReply, error)
	mustEmbedUnimplementedTeachServiceServer()
}

// UnimplementedTeachServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTeachServiceServer struct {
}

func (UnimplementedTeachServiceServer) Create(context.Context, *CreateTeachRequest) (*CreateTeachReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTeachServiceServer) DeleteByID(context.Context, *DeleteTeachByIDRequest) (*DeleteTeachByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedTeachServiceServer) DeleteByIDs(context.Context, *DeleteTeachByIDsRequest) (*DeleteTeachByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByIDs not implemented")
}
func (UnimplementedTeachServiceServer) UpdateByID(context.Context, *UpdateTeachByIDRequest) (*UpdateTeachByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedTeachServiceServer) GetByID(context.Context, *GetTeachByIDRequest) (*GetTeachByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedTeachServiceServer) ListByIDs(context.Context, *ListTeachByIDsRequest) (*ListTeachByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByIDs not implemented")
}
func (UnimplementedTeachServiceServer) List(context.Context, *ListTeachRequest) (*ListTeachReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTeachServiceServer) mustEmbedUnimplementedTeachServiceServer() {}

// UnsafeTeachServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeachServiceServer will
// result in compilation errors.
type UnsafeTeachServiceServer interface {
	mustEmbedUnimplementedTeachServiceServer()
}

func RegisterTeachServiceServer(s grpc.ServiceRegistrar, srv TeachServiceServer) {
	s.RegisterService(&TeachService_ServiceDesc, srv)
}

func _TeachService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teachService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachServiceServer).Create(ctx, req.(*CreateTeachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeachByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teachService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachServiceServer).DeleteByID(ctx, req.(*DeleteTeachByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachService_DeleteByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeachByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachServiceServer).DeleteByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teachService/DeleteByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachServiceServer).DeleteByIDs(ctx, req.(*DeleteTeachByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachService_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeachByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachServiceServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teachService/UpdateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachServiceServer).UpdateByID(ctx, req.(*UpdateTeachByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeachByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teachService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachServiceServer).GetByID(ctx, req.(*GetTeachByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachService_ListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeachByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachServiceServer).ListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teachService/ListByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachServiceServer).ListByIDs(ctx, req.(*ListTeachByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeachService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeachServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.teachService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeachServiceServer).List(ctx, req.(*ListTeachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TeachService_ServiceDesc is the grpc.ServiceDesc for TeachService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TeachService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.teachService",
	HandlerType: (*TeachServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _TeachService_Create_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _TeachService_DeleteByID_Handler,
		},
		{
			MethodName: "DeleteByIDs",
			Handler:    _TeachService_DeleteByIDs_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _TeachService_UpdateByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _TeachService_GetByID_Handler,
		},
		{
			MethodName: "ListByIDs",
			Handler:    _TeachService_ListByIDs_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TeachService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/teach.proto",
}
