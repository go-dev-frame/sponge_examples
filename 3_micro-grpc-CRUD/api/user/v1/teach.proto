syntax = "proto3";

package api.user.v1;

import "api/types/types.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tagger/tagger.proto";
//import "validate/validate.proto";

option go_package = "user/api/user/v1;v1";

// Default settings for generating swagger documents
// NOTE: because json does not support 64 bits, the int64 and uint64 types under *.swagger.json are automatically converted to string types
// Reference https://github.com/grpc-ecosystem/grpc-gateway/blob/db7fbefff7c04877cdb32e16d4a248a024428207/examples/internal/proto/examplepb/a_bit_of_everything.proto  
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:8080"
  base_path: ""
  info: {
    title: "user api docs";
    version: "2.0";
  }
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Input a \"Bearer your-jwt-token\" to Value";
      }
    }
  }
};

service teachService {
  rpc Create(CreateTeachRequest) returns (CreateTeachReply) {
    option (google.api.http) = {
      post: "/api/v1/teach"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create teach",
      description: "submit information to create teach",
      tags: "teach",
    };
  }

  rpc DeleteByID(DeleteTeachByIDRequest) returns (DeleteTeachByIDReply) {
    option (google.api.http) = {
      delete: "/api/v1/teach/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete teach",
      description: "delete teach by id",
      tags: "teach",
      //security: {
      //  security_requirement: {
      //    key: "BearerAuth";
      //    value: {}
      //  }
      //}
    };
  }

  rpc DeleteByIDs(DeleteTeachByIDsRequest) returns (DeleteTeachByIDsReply) {
    option (google.api.http) = {
      post: "/api/v1/teach/delete/ids"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete teachs by batch id",
      description: "delete teachs by batch id",
      tags: "teach",
      //security: {
      //  security_requirement: {
      //    key: "BearerAuth";
      //    value: {}
      //  }
      //}
    };
  }

  rpc UpdateByID(UpdateTeachByIDRequest) returns (UpdateTeachByIDReply) {
    option (google.api.http) = {
      put: "/api/v1/teach/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update teach",
      description: "update teach by id",
      tags: "teach",
      //security: {
      //  security_requirement: {
      //    key: "BearerAuth";
      //    value: {}
      //  }
      //}
    };
  }

  rpc GetByID(GetTeachByIDRequest) returns (GetTeachByIDReply) {
    option (google.api.http) = {
      get: "/api/v1/teach/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get teach detail",
      description: "get teach detail by id",
      tags: "teach",
      //security: {
      //  security_requirement: {
      //    key: "BearerAuth";
      //    value: {}
      //  }
      //}
    };
  }

  rpc ListByIDs(ListTeachByIDsRequest) returns (ListTeachByIDsReply) {
    option (google.api.http) = {
      post: "/api/v1/teach/list/ids"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "list of teachs by batch id",
      description: "list of teachs by batch id",
      tags: "teach",
      //security: {
      //  security_requirement: {
      //    key: "BearerAuth";
      //    value: {}
      //  }
      //}
    };
  }

  rpc List(ListTeachRequest) returns (ListTeachReply) {
    option (google.api.http) = {
      post: "/api/v1/teach/list"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "list of teachs by parameters",
      description: "list of teachs by paging and conditions",
      tags: "teach",
      //security: {
      //  security_requirement: {
      //    key: "BearerAuth";
      //    value: {}
      //  }
      //}
    };
  }
}

// Some notes on defining fields under message:
// (1) Fill in the validate rules https://github.com/envoyproxy/protoc-gen-validate#constraint-rules
// (2) When using the protoc-gen-openapiv2 plugin, if the defined fields are snake case,
//      you must add annotations for snake case names, such as string foo_bar = 1 [json_name = "foo_bar"],
//      to ensure that the front end and back end JSON naming is consistent.
// (3) If the declared route path includes a variable, such as /api/v1/teach/{id},
//      the request parameter of the rpc method contains the route variable field and this field
//      must be annotated, such as int64 id = 1 [(tagger.tags) = "uri:\"id\"" ]


message CreateTeachRequest {
	int64 teacherId = 1;  // 老师id
	string teacherName = 2;  // 老师名称
	int64 courseId = 3;  // 课程id
	string courseName = 4;  // 课程名称
	string score = 5;  // 学生评价教学质量，5个等级：A,B,C,D,E
}

message CreateTeachReply {
  uint64   id =1;
}

message DeleteTeachByIDRequest {
  uint64   id =1 [(tagger.tags) = "uri:\"id\"" ];
}

message DeleteTeachByIDReply {

}

message DeleteTeachByIDsRequest {
  repeated uint64 ids = 1;
}

message DeleteTeachByIDsReply {

}

message UpdateTeachByIDRequest {
	uint64 id = 1 [(tagger.tags) = "uri:\"id\"" ]; 
	int64 teacherId = 2;  // 老师id
	string teacherName = 3;  // 老师名称
	int64 courseId = 4;  // 课程id
	string courseName = 5;  // 课程名称
	string score = 6;  // 学生评价教学质量，5个等级：A,B,C,D,E
}

message UpdateTeachByIDReply {

}

message Teach {
	uint64 id = 1; 
	int64 createdAt = 2; 
	int64 updatedAt = 3; 
	int64 teacherId = 4;  // 老师id
	string teacherName = 5;  // 老师名称
	int64 courseId = 6;  // 课程id
	string courseName = 7;  // 课程名称
	string score = 8;  // 学生评价教学质量，5个等级：A,B,C,D,E
}

message GetTeachByIDRequest {
  uint64   id =1 [(tagger.tags) = "uri:\"id\"" ];
}

message GetTeachByIDReply {
  Teach teach = 1;
}

message ListTeachByIDsRequest {
  repeated uint64 ids = 1;
}

message ListTeachByIDsReply {
  repeated Teach teachs = 1;
}

message ListTeachRequest {
  types.Params params = 1;
}

message ListTeachReply {
  int64 total =1;
  repeated Teach teachs = 2;
}


