// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/user/v1/course.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseServiceClient interface {
	Create(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseReply, error)
	DeleteByID(ctx context.Context, in *DeleteCourseByIDRequest, opts ...grpc.CallOption) (*DeleteCourseByIDReply, error)
	DeleteByIDs(ctx context.Context, in *DeleteCourseByIDsRequest, opts ...grpc.CallOption) (*DeleteCourseByIDsReply, error)
	UpdateByID(ctx context.Context, in *UpdateCourseByIDRequest, opts ...grpc.CallOption) (*UpdateCourseByIDReply, error)
	GetByID(ctx context.Context, in *GetCourseByIDRequest, opts ...grpc.CallOption) (*GetCourseByIDReply, error)
	ListByIDs(ctx context.Context, in *ListCourseByIDsRequest, opts ...grpc.CallOption) (*ListCourseByIDsReply, error)
	List(ctx context.Context, in *ListCourseRequest, opts ...grpc.CallOption) (*ListCourseReply, error)
}

type courseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseServiceClient(cc grpc.ClientConnInterface) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) Create(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseReply, error) {
	out := new(CreateCourseReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.courseService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteByID(ctx context.Context, in *DeleteCourseByIDRequest, opts ...grpc.CallOption) (*DeleteCourseByIDReply, error) {
	out := new(DeleteCourseByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.courseService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteByIDs(ctx context.Context, in *DeleteCourseByIDsRequest, opts ...grpc.CallOption) (*DeleteCourseByIDsReply, error) {
	out := new(DeleteCourseByIDsReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.courseService/DeleteByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) UpdateByID(ctx context.Context, in *UpdateCourseByIDRequest, opts ...grpc.CallOption) (*UpdateCourseByIDReply, error) {
	out := new(UpdateCourseByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.courseService/UpdateByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetByID(ctx context.Context, in *GetCourseByIDRequest, opts ...grpc.CallOption) (*GetCourseByIDReply, error) {
	out := new(GetCourseByIDReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.courseService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ListByIDs(ctx context.Context, in *ListCourseByIDsRequest, opts ...grpc.CallOption) (*ListCourseByIDsReply, error) {
	out := new(ListCourseByIDsReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.courseService/ListByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) List(ctx context.Context, in *ListCourseRequest, opts ...grpc.CallOption) (*ListCourseReply, error) {
	out := new(ListCourseReply)
	err := c.cc.Invoke(ctx, "/api.user.v1.courseService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
// All implementations must embed UnimplementedCourseServiceServer
// for forward compatibility
type CourseServiceServer interface {
	Create(context.Context, *CreateCourseRequest) (*CreateCourseReply, error)
	DeleteByID(context.Context, *DeleteCourseByIDRequest) (*DeleteCourseByIDReply, error)
	DeleteByIDs(context.Context, *DeleteCourseByIDsRequest) (*DeleteCourseByIDsReply, error)
	UpdateByID(context.Context, *UpdateCourseByIDRequest) (*UpdateCourseByIDReply, error)
	GetByID(context.Context, *GetCourseByIDRequest) (*GetCourseByIDReply, error)
	ListByIDs(context.Context, *ListCourseByIDsRequest) (*ListCourseByIDsReply, error)
	List(context.Context, *ListCourseRequest) (*ListCourseReply, error)
	mustEmbedUnimplementedCourseServiceServer()
}

// UnimplementedCourseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServiceServer struct {
}

func (UnimplementedCourseServiceServer) Create(context.Context, *CreateCourseRequest) (*CreateCourseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCourseServiceServer) DeleteByID(context.Context, *DeleteCourseByIDRequest) (*DeleteCourseByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (UnimplementedCourseServiceServer) DeleteByIDs(context.Context, *DeleteCourseByIDsRequest) (*DeleteCourseByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByIDs not implemented")
}
func (UnimplementedCourseServiceServer) UpdateByID(context.Context, *UpdateCourseByIDRequest) (*UpdateCourseByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByID not implemented")
}
func (UnimplementedCourseServiceServer) GetByID(context.Context, *GetCourseByIDRequest) (*GetCourseByIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedCourseServiceServer) ListByIDs(context.Context, *ListCourseByIDsRequest) (*ListCourseByIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByIDs not implemented")
}
func (UnimplementedCourseServiceServer) List(context.Context, *ListCourseRequest) (*ListCourseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCourseServiceServer) mustEmbedUnimplementedCourseServiceServer() {}

// UnsafeCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServiceServer will
// result in compilation errors.
type UnsafeCourseServiceServer interface {
	mustEmbedUnimplementedCourseServiceServer()
}

func RegisterCourseServiceServer(s grpc.ServiceRegistrar, srv CourseServiceServer) {
	s.RegisterService(&CourseService_ServiceDesc, srv)
}

func _CourseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.courseService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).Create(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.courseService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteByID(ctx, req.(*DeleteCourseByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.courseService/DeleteByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteByIDs(ctx, req.(*DeleteCourseByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpdateByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpdateByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.courseService/UpdateByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpdateByID(ctx, req.(*UpdateCourseByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.courseService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetByID(ctx, req.(*GetCourseByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ListByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ListByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.courseService/ListByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ListByIDs(ctx, req.(*ListCourseByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.user.v1.courseService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).List(ctx, req.(*ListCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseService_ServiceDesc is the grpc.ServiceDesc for CourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.courseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CourseService_Create_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _CourseService_DeleteByID_Handler,
		},
		{
			MethodName: "DeleteByIDs",
			Handler:    _CourseService_DeleteByIDs_Handler,
		},
		{
			MethodName: "UpdateByID",
			Handler:    _CourseService_UpdateByID_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _CourseService_GetByID_Handler,
		},
		{
			MethodName: "ListByIDs",
			Handler:    _CourseService_ListByIDs_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CourseService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/v1/course.proto",
}
