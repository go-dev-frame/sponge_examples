// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"database/sql"
	"errors"

	"github.com/dtm-labs/client/dtmcli"
	"github.com/dtm-labs/client/dtmgrpc"
	"google.golang.org/grpc"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	couponV1 "eshop/api/coupon/v1"
	"eshop/coupon/internal/dao"
	"eshop/coupon/internal/ecode"
	"eshop/coupon/internal/model"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		couponV1.RegisterCouponServer(server, NewCouponServer())
	})
}

var _ couponV1.CouponServer = (*coupon)(nil)

type coupon struct {
	couponV1.UnimplementedCouponServer
}

// NewCouponServer create a server
func NewCouponServer() couponV1.CouponServer {
	return &coupon{}
}

// CouponUse 使用优惠券
func (s *coupon) CouponUse(ctx context.Context, req *couponV1.CouponUseRequest) (*couponV1.CouponUseReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 使用子事务屏障
	barrier, err := dtmgrpc.BarrierFromGrpc(ctx)
	if err != nil {
		logger.Error("BarrierFromGrpc error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusCouponUseCoupon.Err()
	}

	tx := model.GetDB().Begin().Statement.ConnPool.(*sql.Tx)
	err = barrier.Call(tx, func(tx *sql.Tx) error {
		return dao.CouponUse(tx, req.CouponID)
	})
	if err != nil {
		logger.Error("CouponUse error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		if errors.Is(err, dtmcli.ErrFailure) {
			return nil, ecode.StatusAborted.ToRPCErr(dtmcli.ResultFailure)
		}
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}

	return &couponV1.CouponUseReply{}, nil
}

// CouponUseRevert 补偿优惠券
func (s *coupon) CouponUseRevert(ctx context.Context, req *couponV1.CouponUseRevertRequest) (*couponV1.CouponUseRevertReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 使用子事务屏障
	barrier, err := dtmgrpc.BarrierFromGrpc(ctx)
	if err != nil {
		logger.Error("BarrierFromGrpc error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusCouponUseCoupon.Err()
	}

	tx := model.GetDB().Begin().Statement.ConnPool.(*sql.Tx)
	err = barrier.Call(tx, func(tx *sql.Tx) error {
		return dao.CouponUseRevert(tx, req.CouponID)
	})
	if err != nil {
		logger.Error("CouponUseRevert error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}

	return &couponV1.CouponUseRevertReply{}, nil
}
