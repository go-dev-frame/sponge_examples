// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/coupon/v1/coupon.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CouponUseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouponUseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponUseRequestMultiError, or nil if none found.
func (m *CouponUseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCouponId() <= 0 {
		err := CouponUseRequestValidationError{
			field:  "CouponId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CouponUseRequestMultiError(errors)
	}

	return nil
}

// CouponUseRequestMultiError is an error wrapping multiple validation errors
// returned by CouponUseRequest.ValidateAll() if the designated constraints
// aren't met.
type CouponUseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseRequestMultiError) AllErrors() []error { return m }

// CouponUseRequestValidationError is the validation error returned by
// CouponUseRequest.Validate if the designated constraints aren't met.
type CouponUseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseRequestValidationError) ErrorName() string { return "CouponUseRequestValidationError" }

// Error satisfies the builtin error interface
func (e CouponUseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseRequestValidationError{}

// Validate checks the field values on CouponUseReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouponUseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouponUseReplyMultiError,
// or nil if none found.
func (m *CouponUseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponUseReplyMultiError(errors)
	}

	return nil
}

// CouponUseReplyMultiError is an error wrapping multiple validation errors
// returned by CouponUseReply.ValidateAll() if the designated constraints
// aren't met.
type CouponUseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseReplyMultiError) AllErrors() []error { return m }

// CouponUseReplyValidationError is the validation error returned by
// CouponUseReply.Validate if the designated constraints aren't met.
type CouponUseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseReplyValidationError) ErrorName() string { return "CouponUseReplyValidationError" }

// Error satisfies the builtin error interface
func (e CouponUseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseReplyValidationError{}

// Validate checks the field values on CouponUseRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponUseRevertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponUseRevertRequestMultiError, or nil if none found.
func (m *CouponUseRevertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseRevertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCouponId() <= 0 {
		err := CouponUseRevertRequestValidationError{
			field:  "CouponId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CouponUseRevertRequestMultiError(errors)
	}

	return nil
}

// CouponUseRevertRequestMultiError is an error wrapping multiple validation
// errors returned by CouponUseRevertRequest.ValidateAll() if the designated
// constraints aren't met.
type CouponUseRevertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseRevertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseRevertRequestMultiError) AllErrors() []error { return m }

// CouponUseRevertRequestValidationError is the validation error returned by
// CouponUseRevertRequest.Validate if the designated constraints aren't met.
type CouponUseRevertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseRevertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseRevertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseRevertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseRevertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseRevertRequestValidationError) ErrorName() string {
	return "CouponUseRevertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CouponUseRevertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseRevertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseRevertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseRevertRequestValidationError{}

// Validate checks the field values on CouponUseRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CouponUseRevertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouponUseRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouponUseRevertReplyMultiError, or nil if none found.
func (m *CouponUseRevertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CouponUseRevertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CouponUseRevertReplyMultiError(errors)
	}

	return nil
}

// CouponUseRevertReplyMultiError is an error wrapping multiple validation
// errors returned by CouponUseRevertReply.ValidateAll() if the designated
// constraints aren't met.
type CouponUseRevertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponUseRevertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponUseRevertReplyMultiError) AllErrors() []error { return m }

// CouponUseRevertReplyValidationError is the validation error returned by
// CouponUseRevertReply.Validate if the designated constraints aren't met.
type CouponUseRevertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponUseRevertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponUseRevertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponUseRevertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponUseRevertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponUseRevertReplyValidationError) ErrorName() string {
	return "CouponUseRevertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CouponUseRevertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouponUseRevertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponUseRevertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponUseRevertReplyValidationError{}
