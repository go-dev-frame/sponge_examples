// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"database/sql"
	"strings"
	"time"

	orderV1 "order/api/order/v1"
	"order/internal/config"
	"order/internal/dao"
	"order/internal/ecode"
	"order/internal/model"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/krand"
	"github.com/zhufuyi/sponge/pkg/logger"

	"github.com/dtm-labs/client/dtmgrpc"
	"google.golang.org/grpc"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		orderV1.RegisterOrderServer(server, NewOrderServer())
	})
}

var _ orderV1.OrderServer = (*order)(nil)

type order struct {
	orderV1.UnimplementedOrderServer
}

// NewOrderServer create a server
func NewOrderServer() orderV1.OrderServer {
	return &order{}
}

// Submit 提交订单(分布式事务)
func (s *order) Submit(ctx context.Context, req *orderV1.SubmitRequest) (*orderV1.SubmitReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)
	orderID := strings.ReplaceAll(time.Now().Format("20060102150405.000000"), ".", "") + krand.String(krand.R_NUM, 6)

	couponReq := &orderV1.CouponUseRequest{CouponId: req.CouponId}
	stockReq := &orderV1.StockDeductRequest{
		ProductId:    req.ProductId,
		ProductCount: req.ProductCount,
	}
	orderReq := &orderV1.CreateOrderRequest{
		OrderId:      orderID,
		UserId:       req.UserId,
		ProductId:    req.ProductId,
		Amount:       req.Amount,
		ProductCount: req.ProductCount,
		CouponId:     req.CouponId,
	}
	payReq := &orderV1.CreatePayRequest{
		UserId:  req.UserId,
		OrderId: orderID,
		Amount:  req.Amount,
	}

	saga := dtmgrpc.NewSagaGrpc(config.DtmGrpcAddr, orderID)
	saga.Add(config.OrderGrpcAddr+"/api.order.v1.order/Create", config.OrderGrpcAddr+"/api.order.v1.order/CreateRevert", orderReq)
	saga.Add(config.StockGrpcAddr+"/api.stock.v1.stock/StockDeduct", config.StockGrpcAddr+"/api.stock.v1.stock/StockDeductRevert", stockReq)
	if req.CouponId > 0 {
		saga.Add(config.CouponGrpcAddr+"/api.coupon.v1.coupon/CouponUse", config.CouponGrpcAddr+"/api.coupon.v1.coupon/CouponUseRevert", couponReq)
	}
	saga.Add(config.PayGrpcAddr+"/api.pay.v1.pay/Create", config.PayGrpcAddr+"/api.pay.v1.pay/CreateRevert", payReq)
	err = saga.Submit()
	if err != nil {
		logger.Error("Submit error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}

	return &orderV1.SubmitReply{
		OrderId: orderID,
	}, nil
}

// Create 创建订单
func (s *order) Create(ctx context.Context, req *orderV1.CreateOrderRequest) (*orderV1.CreateOrderReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 使用子事务屏障
	barrier, err := dtmgrpc.BarrierFromGrpc(ctx)
	if err != nil {
		logger.Error("BarrierFromGrpc error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusCreateOrder.Err()
	}

	tx := model.GetDB().Begin().Statement.ConnPool.(*sql.Tx)
	err = barrier.Call(tx, func(tx *sql.Tx) error {
		return dao.CreateOrder(tx, req.OrderId, req.UserId, req.ProductId, req.Amount, req.ProductCount, req.CouponId)
	})
	if err != nil {
		logger.Error("CreateOrder error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}

	return &orderV1.CreateOrderReply{}, nil
}

// CreateRevert 取消创建订单
func (s *order) CreateRevert(ctx context.Context, req *orderV1.CreateOrderRevertRequest) (*orderV1.CreateOrderRevertReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 使用子事务屏障
	barrier, err := dtmgrpc.BarrierFromGrpc(ctx)
	if err != nil {
		logger.Error("BarrierFromGrpc error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusCreateOrder.Err()
	}

	tx := model.GetDB().Begin().Statement.ConnPool.(*sql.Tx)
	err = barrier.Call(tx, func(tx *sql.Tx) error {
		return dao.CreateOrderRevert(tx, req.OrderId)
	})
	if err != nil {
		logger.Error("CreateOrderRevert error", logger.Err(err), logger.Any("orderID", req.OrderId), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}

	return &orderV1.CreateOrderRevertReply{}, nil
}
