// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"

	orderV1 "order_gw/api/order/v1"
	order_gwV1 "order_gw/api/order_gw/v1"
	"order_gw/internal/ecode"
	"order_gw/internal/rpcclient"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"
)

var _ order_gwV1.OrderLogicer = (*orderClient)(nil)

type orderClient struct {
	orderCli orderV1.OrderClient
}

// NewOrderClient create a client
func NewOrderClient() order_gwV1.OrderLogicer {
	return &orderClient{
		orderCli: orderV1.NewOrderClient(rpcclient.GetOrderRPCConn()),
	}
}

// Submit 提交订单(分布式事务)
func (c *orderClient) Submit(ctx context.Context, req *orderV1.SubmitRequest) (*orderV1.SubmitReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.CtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}

	reply, err := c.orderCli.Submit(ctx, req)
	if err != nil {
		logger.Warn("Submit error", logger.Err(err), interceptor.CtxRequestIDField(ctx))
		return nil, err
	}

	return reply, nil
}
