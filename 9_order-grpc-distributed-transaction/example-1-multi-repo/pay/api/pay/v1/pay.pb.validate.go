// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/pay/v1/pay.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePayRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreatePayRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayRequestMultiError, or nil if none found.
func (m *CreatePayRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CreatePayRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderID()) < 16 {
		err := CreatePayRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreatePayRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePayRequestMultiError(errors)
	}

	return nil
}

// CreatePayRequestMultiError is an error wrapping multiple validation errors
// returned by CreatePayRequest.ValidateAll() if the designated constraints
// aren't met.
type CreatePayRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayRequestMultiError) AllErrors() []error { return m }

// CreatePayRequestValidationError is the validation error returned by
// CreatePayRequest.Validate if the designated constraints aren't met.
type CreatePayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayRequestValidationError) ErrorName() string { return "CreatePayRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreatePayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayRequestValidationError{}

// Validate checks the field values on CreatePayReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreatePayReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreatePayReplyMultiError,
// or nil if none found.
func (m *CreatePayReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePayReplyMultiError(errors)
	}

	return nil
}

// CreatePayReplyMultiError is an error wrapping multiple validation errors
// returned by CreatePayReply.ValidateAll() if the designated constraints
// aren't met.
type CreatePayReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayReplyMultiError) AllErrors() []error { return m }

// CreatePayReplyValidationError is the validation error returned by
// CreatePayReply.Validate if the designated constraints aren't met.
type CreatePayReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayReplyValidationError) ErrorName() string { return "CreatePayReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreatePayReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayReplyValidationError{}

// Validate checks the field values on CreatePayRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePayRevertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayRevertRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayRevertRequestMultiError, or nil if none found.
func (m *CreatePayRevertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayRevertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserID() <= 0 {
		err := CreatePayRevertRequestValidationError{
			field:  "UserID",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderID()) < 16 {
		err := CreatePayRevertRequestValidationError{
			field:  "OrderID",
			reason: "value length must be at least 16 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreatePayRevertRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePayRevertRequestMultiError(errors)
	}

	return nil
}

// CreatePayRevertRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePayRevertRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePayRevertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayRevertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayRevertRequestMultiError) AllErrors() []error { return m }

// CreatePayRevertRequestValidationError is the validation error returned by
// CreatePayRevertRequest.Validate if the designated constraints aren't met.
type CreatePayRevertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayRevertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayRevertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayRevertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayRevertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayRevertRequestValidationError) ErrorName() string {
	return "CreatePayRevertRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePayRevertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayRevertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayRevertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayRevertRequestValidationError{}

// Validate checks the field values on CreatePayRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePayRevertReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePayRevertReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePayRevertReplyMultiError, or nil if none found.
func (m *CreatePayRevertReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePayRevertReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreatePayRevertReplyMultiError(errors)
	}

	return nil
}

// CreatePayRevertReplyMultiError is an error wrapping multiple validation
// errors returned by CreatePayRevertReply.ValidateAll() if the designated
// constraints aren't met.
type CreatePayRevertReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePayRevertReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePayRevertReplyMultiError) AllErrors() []error { return m }

// CreatePayRevertReplyValidationError is the validation error returned by
// CreatePayRevertReply.Validate if the designated constraints aren't met.
type CreatePayRevertReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePayRevertReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePayRevertReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePayRevertReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePayRevertReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePayRevertReplyValidationError) ErrorName() string {
	return "CreatePayRevertReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePayRevertReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePayRevertReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePayRevertReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePayRevertReplyValidationError{}
