// Code generated by https://github.com/zhufuyi/sponge

package service

import (
	"context"
	"database/sql"
	"errors"

	stockV1 "stock/api/stock/v1"
	"stock/internal/dao"
	"stock/internal/ecode"
	"stock/internal/model"

	"github.com/zhufuyi/sponge/pkg/grpc/interceptor"
	"github.com/zhufuyi/sponge/pkg/logger"

	"github.com/dtm-labs/client/dtmcli"
	"github.com/dtm-labs/client/dtmgrpc"
	"google.golang.org/grpc"
)

func init() {
	registerFns = append(registerFns, func(server *grpc.Server) {
		stockV1.RegisterStockServer(server, NewStockServer())
	})
}

var _ stockV1.StockServer = (*stock)(nil)

type stock struct {
	stockV1.UnimplementedStockServer
}

// NewStockServer create a server
func NewStockServer() stockV1.StockServer {
	return &stock{}
}

// StockDeduct 扣减库存
func (s *stock) StockDeduct(ctx context.Context, req *stockV1.StockDeductRequest) (*stockV1.StockDeductReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 使用子事务屏障
	barrier, err := dtmgrpc.BarrierFromGrpc(ctx)
	if err != nil {
		logger.Error("BarrierFromGrpc error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusStockDeductStock.Err()
	}

	tx := model.GetDB().Begin().Statement.ConnPool.(*sql.Tx)
	err = barrier.Call(tx, func(tx *sql.Tx) error {
		return dao.StockDeduct(tx, req.ProductId, req.ProductCount)
	})
	if err != nil {
		logger.Error("StockDeduct error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		if errors.Is(err, dtmcli.ErrFailure) {
			return nil, ecode.StatusAborted.ToRPCErr()
		}
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}

	return &stockV1.StockDeductReply{}, nil
}

// StockDeductRevert 补偿库存
func (s *stock) StockDeductRevert(ctx context.Context, req *stockV1.StockDeductRevertRequest) (*stockV1.StockDeductRevertReply, error) {
	err := req.Validate()
	if err != nil {
		logger.Warn("req.Validate error", logger.Err(err), logger.Any("req", req), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInvalidParams.Err()
	}
	ctx = interceptor.WrapServerCtx(ctx)

	// 使用子事务屏障
	barrier, err := dtmgrpc.BarrierFromGrpc(ctx)
	if err != nil {
		logger.Error("BarrierFromGrpc error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusStockDeductRevertStock.Err()
	}

	tx := model.GetDB().Begin().Statement.ConnPool.(*sql.Tx)
	err = barrier.Call(tx, func(tx *sql.Tx) error {
		return dao.StockDeductRevert(tx, req.ProductId, req.ProductCount)
	})
	if err != nil {
		logger.Error("CouponUseRevert error", logger.Err(err), interceptor.ServerCtxRequestIDField(ctx))
		return nil, ecode.StatusInternalServerError.ToRPCErr()
	}

	return &stockV1.StockDeductRevertReply{}, nil
}
